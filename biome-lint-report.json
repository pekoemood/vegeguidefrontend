{
	"summary": {
		"changed": 0,
		"unchanged": 34,
		"matches": 0,
		"duration": { "secs": 0, "nanos": 9431209 },
		"errors": 41,
		"warnings": 0,
		"skipped": 0,
		"suggestedFixesSkipped": 0,
		"diagnosticsNotPrinted": 0
	},
	"diagnostics": [
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AddFridgeItemForm.tsx" },
				"span": [1978, 2161],
				"sourceCode": "import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { FridgeAddItem } from \"../types/apiResponse\";\n\nconst AddFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\thandleAdd,\n}: {\n\tcloseModal: () => void;\n\tcategories: { name: string; icon: string }[];\n\thandleAdd: (props: FridgeAddItem) => void;\n}) => {\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [amount, setAmount] = useState<string>(\"\");\n\tconst [category, setCategory] = useState<string>(\"\");\n\tconst [date, setDate] = useState<Date | undefined>(undefined);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を追加</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"category-select\"\n\t\t\t\t\t\t\tid=\"category\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t\taria-label=\"カテゴリ選択\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value=\"\" disabled>\n\t\t\t\t\t\t\t\tカテゴリを選択してください\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ [\"anchorName\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t\tdata-testid=\"selected-date\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ [\"positionAnchor\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleAdd({ name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t追加\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddFridgeItemForm;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AddFridgeItemForm.tsx" },
				"span": [2659, 2704],
				"sourceCode": "import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { FridgeAddItem } from \"../types/apiResponse\";\n\nconst AddFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\thandleAdd,\n}: {\n\tcloseModal: () => void;\n\tcategories: { name: string; icon: string }[];\n\thandleAdd: (props: FridgeAddItem) => void;\n}) => {\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [amount, setAmount] = useState<string>(\"\");\n\tconst [category, setCategory] = useState<string>(\"\");\n\tconst [date, setDate] = useState<Date | undefined>(undefined);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を追加</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"category-select\"\n\t\t\t\t\t\t\tid=\"category\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t\taria-label=\"カテゴリ選択\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value=\"\" disabled>\n\t\t\t\t\t\t\t\tカテゴリを選択してください\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ [\"anchorName\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t\tdata-testid=\"selected-date\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ [\"positionAnchor\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleAdd({ name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t追加\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddFridgeItemForm;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AddFridgeItemForm.tsx" },
				"span": [2750, 2855],
				"sourceCode": "import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { FridgeAddItem } from \"../types/apiResponse\";\n\nconst AddFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\thandleAdd,\n}: {\n\tcloseModal: () => void;\n\tcategories: { name: string; icon: string }[];\n\thandleAdd: (props: FridgeAddItem) => void;\n}) => {\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [amount, setAmount] = useState<string>(\"\");\n\tconst [category, setCategory] = useState<string>(\"\");\n\tconst [date, setDate] = useState<Date | undefined>(undefined);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を追加</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"category-select\"\n\t\t\t\t\t\t\tid=\"category\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t\taria-label=\"カテゴリ選択\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value=\"\" disabled>\n\t\t\t\t\t\t\t\tカテゴリを選択してください\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ [\"anchorName\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t\tdata-testid=\"selected-date\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ [\"positionAnchor\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleAdd({ name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t追加\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddFridgeItemForm;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AddListForm.tsx" },
				"span": [826, 871],
				"sourceCode": "import { useState } from \"react\";\n\nconst AddListForm = ({\n\tcloseModal,\n\thandleAddList,\n}: {\n\tcloseModal: () => void;\n\thandleAddList: (name: string) => Promise<void>;\n}) => {\n\tconst [name, setName] = useState<string>(\"\");\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg shadow-lg min-w-sm md:min-w-md lg:min-w-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\tキャンセル\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn\" onClick={() => handleAddList(name)}>\n\t\t\t\t\t\t追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddListForm;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AddListForm.tsx" },
				"span": [914, 974],
				"sourceCode": "import { useState } from \"react\";\n\nconst AddListForm = ({\n\tcloseModal,\n\thandleAddList,\n}: {\n\tcloseModal: () => void;\n\thandleAddList: (name: string) => Promise<void>;\n}) => {\n\tconst [name, setName] = useState<string>(\"\");\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg shadow-lg min-w-sm md:min-w-md lg:min-w-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\tキャンセル\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn\" onClick={() => handleAddList(name)}>\n\t\t\t\t\t\t追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddListForm;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useValidAnchor",
			"severity": "error",
			"description": "Use a button element instead of an a element.",
			"message": [
				{ "elements": [], "content": "Use a " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element instead of an " },
				{ "elements": ["Emphasis"], "content": "a" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "Anchor elements should only be used for default sections or page navigation"
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Check " },
								{
									"elements": [
										{
											"Hyperlink": {
												"href": "https://marcysutton.com/links-vs-buttons-in-modern-web-applications"
											}
										}
									],
									"content": "this thorough explanation"
								},
								{
									"elements": [],
									"content": " to better understand the context."
								}
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AccountSetting.tsx" },
				"span": [778, 817],
				"sourceCode": "import { useState } from \"react\";\nimport MailTab from \"./MailTab\";\nimport PasswordTab from \"./PasswordTab\";\nimport ProfileTab from \"./ProfileTab\";\n\nconst AccountSetting = ({\n\tname,\n\temail,\n\tgoogle_account,\n}: { name: string; email: string; google_account: boolean }) => {\n\tconst [activeTab, setActiveTab] = useState<string>(\"profile\");\n\n\treturn (\n\t\t<main className=\"bg-base-100 p-6 rounded-lg max-w-lg lg:w-lg shadow-lg\">\n\t\t\t<h2 className=\"text-xl font-bold\">アカウント設定</h2>\n\t\t\t<p className=\"text-neutral-500 text-sm\">\n\t\t\t\tアカウント情報の確認と変更ができます。\n\t\t\t</p>\n\n\t\t\t<div role=\"tablist\" className=\"tabs tabs-box mt-6\">\n\t\t\t\t<a\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"profile\" && \"tab-active\"}`}\n\t\t\t\t\tonClick={() => setActiveTab(\"profile\")}\n\t\t\t\t>\n\t\t\t\t\tプロフィール\n\t\t\t\t</a>\n\t\t\t\t{!google_account && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"password\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"password\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tパスワード\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"mail\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"mail\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tメール\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-6 p-6 border border-base-300 rounded-lg\">\n\t\t\t\t{activeTab === \"profile\" && (\n\t\t\t\t\t<ProfileTab name={name} email={email} googleUser={google_account} />\n\t\t\t\t)}\n\t\t\t\t{activeTab === \"password\" && <PasswordTab />}\n\t\t\t\t{activeTab === \"mail\" && <MailTab email={email} />}\n\t\t\t</div>\n\t\t</main>\n\t);\n};\n\nexport default AccountSetting;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useValidAnchor",
			"severity": "error",
			"description": "Use a button element instead of an a element.",
			"message": [
				{ "elements": [], "content": "Use a " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element instead of an " },
				{ "elements": ["Emphasis"], "content": "a" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "Anchor elements should only be used for default sections or page navigation"
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Check " },
								{
									"elements": [
										{
											"Hyperlink": {
												"href": "https://marcysutton.com/links-vs-buttons-in-modern-web-applications"
											}
										}
									],
									"content": "this thorough explanation"
								},
								{
									"elements": [],
									"content": " to better understand the context."
								}
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AccountSetting.tsx" },
				"span": [1022, 1062],
				"sourceCode": "import { useState } from \"react\";\nimport MailTab from \"./MailTab\";\nimport PasswordTab from \"./PasswordTab\";\nimport ProfileTab from \"./ProfileTab\";\n\nconst AccountSetting = ({\n\tname,\n\temail,\n\tgoogle_account,\n}: { name: string; email: string; google_account: boolean }) => {\n\tconst [activeTab, setActiveTab] = useState<string>(\"profile\");\n\n\treturn (\n\t\t<main className=\"bg-base-100 p-6 rounded-lg max-w-lg lg:w-lg shadow-lg\">\n\t\t\t<h2 className=\"text-xl font-bold\">アカウント設定</h2>\n\t\t\t<p className=\"text-neutral-500 text-sm\">\n\t\t\t\tアカウント情報の確認と変更ができます。\n\t\t\t</p>\n\n\t\t\t<div role=\"tablist\" className=\"tabs tabs-box mt-6\">\n\t\t\t\t<a\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"profile\" && \"tab-active\"}`}\n\t\t\t\t\tonClick={() => setActiveTab(\"profile\")}\n\t\t\t\t>\n\t\t\t\t\tプロフィール\n\t\t\t\t</a>\n\t\t\t\t{!google_account && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"password\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"password\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tパスワード\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"mail\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"mail\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tメール\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-6 p-6 border border-base-300 rounded-lg\">\n\t\t\t\t{activeTab === \"profile\" && (\n\t\t\t\t\t<ProfileTab name={name} email={email} googleUser={google_account} />\n\t\t\t\t)}\n\t\t\t\t{activeTab === \"password\" && <PasswordTab />}\n\t\t\t\t{activeTab === \"mail\" && <MailTab email={email} />}\n\t\t\t</div>\n\t\t</main>\n\t);\n};\n\nexport default AccountSetting;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useValidAnchor",
			"severity": "error",
			"description": "Use a button element instead of an a element.",
			"message": [
				{ "elements": [], "content": "Use a " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element instead of an " },
				{ "elements": ["Emphasis"], "content": "a" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "Anchor elements should only be used for default sections or page navigation"
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Check " },
								{
									"elements": [
										{
											"Hyperlink": {
												"href": "https://marcysutton.com/links-vs-buttons-in-modern-web-applications"
											}
										}
									],
									"content": "this thorough explanation"
								},
								{
									"elements": [],
									"content": " to better understand the context."
								}
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AccountSetting.tsx" },
				"span": [1232, 1268],
				"sourceCode": "import { useState } from \"react\";\nimport MailTab from \"./MailTab\";\nimport PasswordTab from \"./PasswordTab\";\nimport ProfileTab from \"./ProfileTab\";\n\nconst AccountSetting = ({\n\tname,\n\temail,\n\tgoogle_account,\n}: { name: string; email: string; google_account: boolean }) => {\n\tconst [activeTab, setActiveTab] = useState<string>(\"profile\");\n\n\treturn (\n\t\t<main className=\"bg-base-100 p-6 rounded-lg max-w-lg lg:w-lg shadow-lg\">\n\t\t\t<h2 className=\"text-xl font-bold\">アカウント設定</h2>\n\t\t\t<p className=\"text-neutral-500 text-sm\">\n\t\t\t\tアカウント情報の確認と変更ができます。\n\t\t\t</p>\n\n\t\t\t<div role=\"tablist\" className=\"tabs tabs-box mt-6\">\n\t\t\t\t<a\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"profile\" && \"tab-active\"}`}\n\t\t\t\t\tonClick={() => setActiveTab(\"profile\")}\n\t\t\t\t>\n\t\t\t\t\tプロフィール\n\t\t\t\t</a>\n\t\t\t\t{!google_account && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"password\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"password\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tパスワード\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"mail\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"mail\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tメール\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-6 p-6 border border-base-300 rounded-lg\">\n\t\t\t\t{activeTab === \"profile\" && (\n\t\t\t\t\t<ProfileTab name={name} email={email} googleUser={google_account} />\n\t\t\t\t)}\n\t\t\t\t{activeTab === \"password\" && <PasswordTab />}\n\t\t\t\t{activeTab === \"mail\" && <MailTab email={email} />}\n\t\t\t</div>\n\t\t</main>\n\t);\n};\n\nexport default AccountSetting;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AddItemForm.tsx" },
				"span": [1782, 1912],
				"sourceCode": "import { useState } from \"react\";\n\nconst AddItemForm = ({\n\tcategories,\n\tcloseModal,\n\thandleAddItem,\n}: {\n\tcategories: string[];\n\tcloseModal: () => void;\n\thandleAddItem: (item: {\n\t\tname: string;\n\t\tdisplay_amount: string;\n\t\tcategory: string;\n\t}) => void;\n}) => {\n\tconst [name, setName] = useState(\"\");\n\tconst [amount, setAmount] = useState(\"\");\n\tconst [category, setCategory] = useState(\"\");\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい食材を追加</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t買い物リストに追加する食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"grid grid-cols-3 gap-4 mb-4\">\n\t\t\t\t\t<div className=\"col-span-2\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-span-1\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t<select\n\t\t\t\t\t\tname=\"\"\n\t\t\t\t\t\tid=\"\"\n\t\t\t\t\t\tclassName=\"select\"\n\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\" className=\"text-neutral-500\">\n\t\t\t\t\t\t\tカテゴリーを選択\n\t\t\t\t\t\t</option>\n\t\t\t\t\t\t{categories.map((cate) => (\n\t\t\t\t\t\t\t<option key={cate} value={cate}>\n\t\t\t\t\t\t\t\t{cate}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex justify-center gap-2 mt-4\">\n\t\t\t\t\t<button type=\"button\" className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\tキャンセル\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\thandleAddItem({ name, display_amount: amount, category })\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddItemForm;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AddItemFromRecipe.tsx" },
				"span": [1272, 1317],
				"sourceCode": "import { Check, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { AddShoppingListParams, ShoppingList } from \"../types/apiResponse\";\n\nconst AddLItemFromRecipe = ({\n\tcloseModal,\n\tshoppingLists,\n\trecipeName,\n\thandleAddShoppingList,\n}: {\n\tcloseModal: () => void;\n\tshoppingLists: ShoppingList[];\n\trecipeName: string;\n\thandleAddShoppingList: (params: AddShoppingListParams) => Promise<void>;\n}) => {\n\tconst [isCreateMode, setIsCreateMode] = useState<boolean>(false);\n\tconst [name, setName] = useState<string>(\"\");\n\tconsole.log(\"ショッピングリストデータ\", shoppingLists);\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t{isCreateMode ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\tonClick={() => handleAddShoppingList({ name })}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t作成して追加\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">買い物リストを選択</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{recipeName}の食材を全て追加する買い物リストを選択してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t\t{shoppingLists.map((list) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={list.id}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline justify-between h-15 border-base-300\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thandleAddShoppingList({ shoppingListId: list.id })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdisabled={list.already_added}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-left flex flex-start items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t{list.already_added ? (\n\t\t\t\t\t\t\t\t\t\t\t<Check size={15} />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div>{list.name}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t\t\t{list.checked_count}/{list.items_count}完了\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t最終更新：{list.updated}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-dash btn-primary h-15\"\n\t\t\t\t\t\t\t\tonClick={() => setIsCreateMode((prev) => !prev)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t新しいリストを作成\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddLItemFromRecipe;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AddItemFromRecipe.tsx" },
				"span": [1366, 1462],
				"sourceCode": "import { Check, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { AddShoppingListParams, ShoppingList } from \"../types/apiResponse\";\n\nconst AddLItemFromRecipe = ({\n\tcloseModal,\n\tshoppingLists,\n\trecipeName,\n\thandleAddShoppingList,\n}: {\n\tcloseModal: () => void;\n\tshoppingLists: ShoppingList[];\n\trecipeName: string;\n\thandleAddShoppingList: (params: AddShoppingListParams) => Promise<void>;\n}) => {\n\tconst [isCreateMode, setIsCreateMode] = useState<boolean>(false);\n\tconst [name, setName] = useState<string>(\"\");\n\tconsole.log(\"ショッピングリストデータ\", shoppingLists);\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t{isCreateMode ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\tonClick={() => handleAddShoppingList({ name })}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t作成して追加\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">買い物リストを選択</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{recipeName}の食材を全て追加する買い物リストを選択してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t\t{shoppingLists.map((list) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={list.id}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline justify-between h-15 border-base-300\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thandleAddShoppingList({ shoppingListId: list.id })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdisabled={list.already_added}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-left flex flex-start items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t{list.already_added ? (\n\t\t\t\t\t\t\t\t\t\t\t<Check size={15} />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div>{list.name}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t\t\t{list.checked_count}/{list.items_count}完了\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t最終更新：{list.updated}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-dash btn-primary h-15\"\n\t\t\t\t\t\t\t\tonClick={() => setIsCreateMode((prev) => !prev)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t新しいリストを作成\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddLItemFromRecipe;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AddItemFromRecipe.tsx" },
				"span": [1878, 2127],
				"sourceCode": "import { Check, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { AddShoppingListParams, ShoppingList } from \"../types/apiResponse\";\n\nconst AddLItemFromRecipe = ({\n\tcloseModal,\n\tshoppingLists,\n\trecipeName,\n\thandleAddShoppingList,\n}: {\n\tcloseModal: () => void;\n\tshoppingLists: ShoppingList[];\n\trecipeName: string;\n\thandleAddShoppingList: (params: AddShoppingListParams) => Promise<void>;\n}) => {\n\tconst [isCreateMode, setIsCreateMode] = useState<boolean>(false);\n\tconst [name, setName] = useState<string>(\"\");\n\tconsole.log(\"ショッピングリストデータ\", shoppingLists);\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t{isCreateMode ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\tonClick={() => handleAddShoppingList({ name })}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t作成して追加\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">買い物リストを選択</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{recipeName}の食材を全て追加する買い物リストを選択してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t\t{shoppingLists.map((list) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={list.id}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline justify-between h-15 border-base-300\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thandleAddShoppingList({ shoppingListId: list.id })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdisabled={list.already_added}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-left flex flex-start items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t{list.already_added ? (\n\t\t\t\t\t\t\t\t\t\t\t<Check size={15} />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div>{list.name}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t\t\t{list.checked_count}/{list.items_count}完了\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t最終更新：{list.updated}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-dash btn-primary h-15\"\n\t\t\t\t\t\t\t\tonClick={() => setIsCreateMode((prev) => !prev)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t新しいリストを作成\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddLItemFromRecipe;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AddItemFromRecipe.tsx" },
				"span": [2669, 2792],
				"sourceCode": "import { Check, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { AddShoppingListParams, ShoppingList } from \"../types/apiResponse\";\n\nconst AddLItemFromRecipe = ({\n\tcloseModal,\n\tshoppingLists,\n\trecipeName,\n\thandleAddShoppingList,\n}: {\n\tcloseModal: () => void;\n\tshoppingLists: ShoppingList[];\n\trecipeName: string;\n\thandleAddShoppingList: (params: AddShoppingListParams) => Promise<void>;\n}) => {\n\tconst [isCreateMode, setIsCreateMode] = useState<boolean>(false);\n\tconst [name, setName] = useState<string>(\"\");\n\tconsole.log(\"ショッピングリストデータ\", shoppingLists);\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t{isCreateMode ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\tonClick={() => handleAddShoppingList({ name })}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t作成して追加\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">買い物リストを選択</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{recipeName}の食材を全て追加する買い物リストを選択してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t\t{shoppingLists.map((list) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={list.id}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline justify-between h-15 border-base-300\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thandleAddShoppingList({ shoppingListId: list.id })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdisabled={list.already_added}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-left flex flex-start items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t{list.already_added ? (\n\t\t\t\t\t\t\t\t\t\t\t<Check size={15} />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div>{list.name}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t\t\t{list.checked_count}/{list.items_count}完了\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t最終更新：{list.updated}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-dash btn-primary h-15\"\n\t\t\t\t\t\t\t\tonClick={() => setIsCreateMode((prev) => !prev)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t新しいリストを作成\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddLItemFromRecipe;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/AddItemFromRecipe.tsx" },
				"span": [2946, 2991],
				"sourceCode": "import { Check, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { AddShoppingListParams, ShoppingList } from \"../types/apiResponse\";\n\nconst AddLItemFromRecipe = ({\n\tcloseModal,\n\tshoppingLists,\n\trecipeName,\n\thandleAddShoppingList,\n}: {\n\tcloseModal: () => void;\n\tshoppingLists: ShoppingList[];\n\trecipeName: string;\n\thandleAddShoppingList: (params: AddShoppingListParams) => Promise<void>;\n}) => {\n\tconst [isCreateMode, setIsCreateMode] = useState<boolean>(false);\n\tconst [name, setName] = useState<string>(\"\");\n\tconsole.log(\"ショッピングリストデータ\", shoppingLists);\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t{isCreateMode ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\tonClick={() => handleAddShoppingList({ name })}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t作成して追加\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">買い物リストを選択</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{recipeName}の食材を全て追加する買い物リストを選択してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t\t{shoppingLists.map((list) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={list.id}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline justify-between h-15 border-base-300\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thandleAddShoppingList({ shoppingListId: list.id })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdisabled={list.already_added}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-left flex flex-start items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t{list.already_added ? (\n\t\t\t\t\t\t\t\t\t\t\t<Check size={15} />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div>{list.name}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t\t\t{list.checked_count}/{list.items_count}完了\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t最終更新：{list.updated}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-dash btn-primary h-15\"\n\t\t\t\t\t\t\t\tonClick={() => setIsCreateMode((prev) => !prev)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t新しいリストを作成\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddLItemFromRecipe;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useKeyWithClickEvents",
			"severity": "error",
			"description": "Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.",
			"message": [
				{ "elements": [], "content": "Enforce to have the " },
				{ "elements": ["Emphasis"], "content": "onClick" },
				{ "elements": [], "content": " mouse event with the " },
				{ "elements": ["Emphasis"], "content": "onKeyUp" },
				{ "elements": [], "content": ", the " },
				{ "elements": ["Emphasis"], "content": "onKeyDown" },
				{ "elements": [], "content": ", or the " },
				{ "elements": ["Emphasis"], "content": "onKeyPress" },
				{ "elements": [], "content": " keyboard event." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."
								}
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/FoodStatus.tsx" },
				"span": [809, 1090],
				"sourceCode": "import type { FoodStatusProps } from \"../types/apiResponse\";\n\nconst FoodStatus = ({\n\tfoodSelectedStatus,\n\tsetFoodSelectedStatus,\n\tstatus,\n\titems,\n}: FoodStatusProps) => {\n\tconst initialStatus = {\n\t\texpired: 0,\n\t\turgent: 0,\n\t\twarning: 0,\n\t\tsafe: 0,\n\t};\n\n\tconst foodStatusCount = items.reduce(\n\t\t(acc, item) => {\n\t\t\tconst status = item.attributes.expire_status;\n\t\t\tacc[status] += 1;\n\t\t\treturn acc;\n\t\t},\n\t\t{ ...initialStatus },\n\t);\n\n\tconst statusMap = {\n\t\texpired: { color: \"bg-error\", label: \"期限切れ\" },\n\t\turgent: { color: \"bg-accent\", label: \"期限間近\" },\n\t\twarning: { color: \"bg-warning\", label: \"注意\" },\n\t\tsafe: { color: \"bg-info\", label: \"安全\" },\n\t\tdefault: { color: \"bg-base-200\", label: \"総食材数\" },\n\t};\n\n\tconst { color, label } = statusMap[status] ?? statusMap.default;\n\n\treturn (\n\t\t<div\n\t\t\tclassName={`flex flex-col  items-center min-w-0 flex-1 border border-base-300 p-4 rounded-lg cursor-pointer transition transform hover:scale-105  hover:${color} hover:shadow-lg ${foodSelectedStatus === status && color}`}\n\t\t\tonClick={() => setFoodSelectedStatus(status)}\n\t\t>\n\t\t\t<p className=\"text-2xl\">{foodStatusCount[status] ?? items.length}</p>\n\t\t\t<span className=\"text-neutral-500 whitespace-nowrap text-xs\">\n\t\t\t\t{label}\n\t\t\t</span>\n\t\t</div>\n\t);\n};\n\nexport default FoodStatus;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/Card.tsx" },
				"span": [1796, 1861],
				"sourceCode": "import { TrendingDown, TrendingUp } from \"lucide-react\";\nimport { Link, useNavigate } from \"react-router\";\nimport type { CardProps } from \"../types/apiResponse\";\nimport OptimizedImage from \"./OptimizedImage\";\n\nconst Card = ({\n\tid,\n\tname,\n\timage,\n\tdescription,\n\tseason,\n\tprice,\n\trate,\n}: CardProps) => {\n\tconst navigation = useNavigate();\n\n\tconst handleClick = () => {\n\t\tnavigation(`/vegelist/${id}`);\n\t};\n\n\treturn (\n\t\t<Link to={`/vegelist/${id}`} className=\"container mx-auto px-2 block w-fit\">\n\t\t\t<div className=\"indicator card shadow-sm transition duration-200 ease-in-out transform hover:-translate-y-1 hover:shadow-lg\">\n\t\t\t\t{season && (\n\t\t\t\t\t<span className=\"indicator-item indicator-center sm:indicator-end  badge badge-accent transition animate-bounce\">\n\t\t\t\t\t\t旬の野菜\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t\t<div className=\"card bg-base-100 w-90 \">\n\t\t\t\t\t<figure>\n\t\t\t\t\t\t<OptimizedImage\n\t\t\t\t\t\t\tsrc={image}\n\t\t\t\t\t\t\talt={name}\n\t\t\t\t\t\t\tclassName=\"w-full h-60\"\n\t\t\t\t\t\t\twidth={360}\n\t\t\t\t\t\t\theight={240}\n\t\t\t\t\t\t\tquality={85}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</figure>\n\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t<h2 className=\"card-title\">{name}</h2>\n\t\t\t\t\t\t<div className=\"flex justify-between items-center gap-2\">\n\t\t\t\t\t\t\t<span className=\"text-xl\">{price}円/kg</span>\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-1\">\n\t\t\t\t\t\t\t\t{rate > 0 ? (\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center\">\n\t\t\t\t\t\t\t\t\t\t<TrendingUp className=\"text-red-500\" />\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-red-500\">{rate}%(先週比)</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center\">\n\t\t\t\t\t\t\t\t\t\t<TrendingDown className=\"text-green-500\" />\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-green-500\">{rate}%(先週比)</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p>{description}</p>\n\t\t\t\t\t\t<div className=\"card-actions justify-end\">\n\t\t\t\t\t\t\t<button onClick={handleClick} className=\"btn btn-primary w-full\">\n\t\t\t\t\t\t\t\t詳細を見る\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Link>\n\t);\n};\n\nexport default Card;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/EditFridgeItemForm.tsx" },
				"span": [1900, 2057],
				"sourceCode": "import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { EditFridgeItemFormProps } from \"../types/apiResponse\";\n\nconst EditFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\tid,\n\titem,\n\thandleEdit,\n}: EditFridgeItemFormProps) => {\n\tconst [name, setName] = useState<string | undefined>(item?.name);\n\tconst [amount, setAmount] = useState<string | undefined>(\n\t\titem?.display_amount,\n\t);\n\tconst [category, setCategory] = useState<string | undefined>(item?.category);\n\tconst [date, setDate] = useState<Date | undefined>(\n\t\titem?.expire_date ? new Date(item.expire_date) : undefined,\n\t);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\tconsole.log(item);\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を編集</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"\"\n\t\t\t\t\t\t\tid=\"\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ anchorName: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ positionAnchor: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleEdit({ id, name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t更新\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default EditFridgeItemForm;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/EditFridgeItemForm.tsx" },
				"span": [2564, 2609],
				"sourceCode": "import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { EditFridgeItemFormProps } from \"../types/apiResponse\";\n\nconst EditFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\tid,\n\titem,\n\thandleEdit,\n}: EditFridgeItemFormProps) => {\n\tconst [name, setName] = useState<string | undefined>(item?.name);\n\tconst [amount, setAmount] = useState<string | undefined>(\n\t\titem?.display_amount,\n\t);\n\tconst [category, setCategory] = useState<string | undefined>(item?.category);\n\tconst [date, setDate] = useState<Date | undefined>(\n\t\titem?.expire_date ? new Date(item.expire_date) : undefined,\n\t);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\tconsole.log(item);\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を編集</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"\"\n\t\t\t\t\t\t\tid=\"\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ anchorName: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ positionAnchor: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleEdit({ id, name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t更新\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default EditFridgeItemForm;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/EditFridgeItemForm.tsx" },
				"span": [2655, 2765],
				"sourceCode": "import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { EditFridgeItemFormProps } from \"../types/apiResponse\";\n\nconst EditFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\tid,\n\titem,\n\thandleEdit,\n}: EditFridgeItemFormProps) => {\n\tconst [name, setName] = useState<string | undefined>(item?.name);\n\tconst [amount, setAmount] = useState<string | undefined>(\n\t\titem?.display_amount,\n\t);\n\tconst [category, setCategory] = useState<string | undefined>(item?.category);\n\tconst [date, setDate] = useState<Date | undefined>(\n\t\titem?.expire_date ? new Date(item.expire_date) : undefined,\n\t);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\tconsole.log(item);\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を編集</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"\"\n\t\t\t\t\t\t\tid=\"\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ anchorName: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ positionAnchor: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleEdit({ id, name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t更新\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default EditFridgeItemForm;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/noLabelWithoutControl",
			"severity": "error",
			"description": "A form label must be associated with an input.",
			"message": [
				{
					"elements": [],
					"content": "A form label must be associated with an input."
				}
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "Consider adding an accessible text content to the label element."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element."
								}
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/Label.tsx" },
				"span": [210, 356],
				"sourceCode": "import type { LabelHTMLAttributes } from \"react\";\n\ntype LabelProps = {\n\tclassName?: string;\n} & LabelHTMLAttributes<HTMLLabelElement>;\n\nconst Label = ({ className = \"\", ...props }: LabelProps) => {\n\treturn (\n\t\t<label\n\t\t\t{...props}\n\t\t\tclassName={`text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`}\n\t\t/>\n\t);\n};\n\nexport default Label;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/ShoppingCard.tsx" },
				"span": [1681, 1815],
				"sourceCode": "import axios from \"axios\";\nimport { SquarePen, Trash2 } from \"lucide-react\";\nimport toast from \"react-hot-toast\";\nimport { Link } from \"react-router\";\nimport type { ShoppingCardProps } from \"../types/apiResponse\";\nimport { api } from \"../utils/axios\";\n\nconst ShoppingCard = ({\n\tid,\n\ttitle,\n\ttime,\n\titems,\n\tsetLists,\n}: ShoppingCardProps) => {\n\tconst check = items.filter((item) => item.checked);\n\n\tconst handleDestroy = async (\n\t\te: React.MouseEvent<HTMLButtonElement>,\n\t\tid: number,\n\t) => {\n\t\te.stopPropagation();\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tawait api.delete<{ status: string; message: string }>(\n\t\t\t\t`/shopping_lists/${id}`,\n\t\t\t);\n\t\t\tsetLists((prevList) => prevList.filter((list) => list.id !== id));\n\t\t\ttoast.success(\"買い物リストを削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\ttoast.error(\"買い物リストの削除に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<Link to={`/shoppinglist/${id}`}>\n\t\t\t<div className=\"card w-90 shadow-sm transition transform hover:-translate-y-1 hover:shadow-lg\">\n\t\t\t\t<div className=\"card-body space-y-2\">\n\t\t\t\t\t<h2 className=\"card-title line-clamp-1\">{title}</h2>\n\t\t\t\t\t<p className=\"text-sm text-neutral-500\">作成日: {time}</p>\n\t\t\t\t\t<div className=\"flex justify-between text-sm\">\n\t\t\t\t\t\t<span>合計アイテム: {items.length}</span>\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-primary badge-outline\"}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<progress\n\t\t\t\t\t\tclassName=\"progress progress-primary w-full\"\n\t\t\t\t\t\tvalue={check.length}\n\t\t\t\t\t\tmax={items.length}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<div className=\"flex justify-end\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={(e) => handleDestroy(e, id)}\n\t\t\t\t\t\t\tclassName=\"mt-2 btn btn-outline btn-error flex items-center gap-2\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Trash2 />\n\t\t\t\t\t\t\t<span>削除する</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Link>\n\t);\n};\n\nexport default ShoppingCard;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/noSvgWithoutTitle",
			"severity": "error",
			"description": "Alternative text title element cannot be empty",
			"message": [
				{ "elements": [], "content": "Alternative text " },
				{ "elements": ["Emphasis"], "content": "title" },
				{ "elements": [], "content": " element cannot be empty" }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "For accessibility purposes, " },
								{ "elements": ["Emphasis"], "content": "SVGs" },
								{
									"elements": [],
									"content": " should have an alternative text, provided via "
								},
								{ "elements": ["Emphasis"], "content": "title" },
								{
									"elements": [],
									"content": " element. If the svg element has role=\"img\", you should add the "
								},
								{ "elements": ["Emphasis"], "content": "aria-label" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "aria-labelledby" },
								{ "elements": [], "content": " attribute." }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/GoogleLoginButton.tsx" },
				"span": [1130, 1264],
				"sourceCode": "import { useGoogleLogin } from \"@react-oauth/google\";\nimport { use } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport type { googleLoginResponse } from \"../types/apiResponse\";\nimport { api } from \"../utils/axios\";\n\nconst GoogleLoginButton = ({ text }: { text: string }) => {\n\tconst navigate = useNavigate();\n\tconst { setUser } = use(UserContext);\n\tconst login = useGoogleLogin({\n\t\tflow: \"auth-code\",\n\t\tredirect_uri: import.meta.env.VITE_GOOGLE_REDIRECT_URL,\n\t\tonSuccess: async (codeResponse) => {\n\t\t\tconst authCode = codeResponse.code;\n\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<googleLoginResponse>(\n\t\t\t\t\t\"/auth/google_login\",\n\t\t\t\t\t{\n\t\t\t\t\t\tcode: authCode,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tconsole.log(\"ログイン成功\", response.data);\n\t\t\t\tsetUser(response.data);\n\t\t\t\tnavigate(\"/vegelist\");\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(\"ログイン失敗\", err);\n\t\t\t}\n\t\t},\n\t\tonError: () => {\n\t\t\tconsole.error(\"ログインに失敗しました\");\n\t\t},\n\t});\n\treturn (\n\t\t<button\n\t\t\tclassName=\"btn bg-white text-black border-[#e5e5e5] w-full\"\n\t\t\tonClick={() => login()}\n\t\t>\n\t\t\t<svg\n\t\t\t\taria-label=\"Google logo\"\n\t\t\t\twidth=\"16\"\n\t\t\t\theight=\"16\"\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t>\n\t\t\t\t<g>\n\t\t\t\t\t<path d=\"m0 0H512V512H0\" fill=\"#fff\" />\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#34a853\"\n\t\t\t\t\t\td=\"M153 292c30 82 118 95 171 60h62v48A192 192 0 0190 341\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#4285f4\"\n\t\t\t\t\t\td=\"m386 400a140 175 0 0053-179H260v74h102q-7 37-38 57\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#fbbc02\"\n\t\t\t\t\t\td=\"m90 341a208 200 0 010-171l63 49q-12 37 0 73\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#ea4335\"\n\t\t\t\t\t\td=\"m153 219c22-69 116-109 179-50l55-54c-78-75-230-72-297 55\"\n\t\t\t\t\t/>\n\t\t\t\t</g>\n\t\t\t</svg>\n\t\t\t{text}\n\t\t</button>\n\t);\n};\n\nexport default GoogleLoginButton;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/GoogleLoginButton.tsx" },
				"span": [1025, 1126],
				"sourceCode": "import { useGoogleLogin } from \"@react-oauth/google\";\nimport { use } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport type { googleLoginResponse } from \"../types/apiResponse\";\nimport { api } from \"../utils/axios\";\n\nconst GoogleLoginButton = ({ text }: { text: string }) => {\n\tconst navigate = useNavigate();\n\tconst { setUser } = use(UserContext);\n\tconst login = useGoogleLogin({\n\t\tflow: \"auth-code\",\n\t\tredirect_uri: import.meta.env.VITE_GOOGLE_REDIRECT_URL,\n\t\tonSuccess: async (codeResponse) => {\n\t\t\tconst authCode = codeResponse.code;\n\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<googleLoginResponse>(\n\t\t\t\t\t\"/auth/google_login\",\n\t\t\t\t\t{\n\t\t\t\t\t\tcode: authCode,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tconsole.log(\"ログイン成功\", response.data);\n\t\t\t\tsetUser(response.data);\n\t\t\t\tnavigate(\"/vegelist\");\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(\"ログイン失敗\", err);\n\t\t\t}\n\t\t},\n\t\tonError: () => {\n\t\t\tconsole.error(\"ログインに失敗しました\");\n\t\t},\n\t});\n\treturn (\n\t\t<button\n\t\t\tclassName=\"btn bg-white text-black border-[#e5e5e5] w-full\"\n\t\t\tonClick={() => login()}\n\t\t>\n\t\t\t<svg\n\t\t\t\taria-label=\"Google logo\"\n\t\t\t\twidth=\"16\"\n\t\t\t\theight=\"16\"\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t>\n\t\t\t\t<g>\n\t\t\t\t\t<path d=\"m0 0H512V512H0\" fill=\"#fff\" />\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#34a853\"\n\t\t\t\t\t\td=\"M153 292c30 82 118 95 171 60h62v48A192 192 0 0190 341\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#4285f4\"\n\t\t\t\t\t\td=\"m386 400a140 175 0 0053-179H260v74h102q-7 37-38 57\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#fbbc02\"\n\t\t\t\t\t\td=\"m90 341a208 200 0 010-171l63 49q-12 37 0 73\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#ea4335\"\n\t\t\t\t\t\td=\"m153 219c22-69 116-109 179-50l55-54c-78-75-230-72-297 55\"\n\t\t\t\t\t/>\n\t\t\t\t</g>\n\t\t\t</svg>\n\t\t\t{text}\n\t\t</button>\n\t);\n};\n\nexport default GoogleLoginButton;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/suspicious/noArrayIndexKey",
			"severity": "error",
			"description": "Avoid using the index of an array as key property in an element.",
			"message": [
				{
					"elements": [],
					"content": "Avoid using the index of an array as key property in an element."
				}
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "This is the source of the key value."
								}
							]
						]
					},
					{
						"frame": {
							"path": null,
							"span": [2097, 2102],
							"sourceCode": "import type { RecipeImage, RecipeResponse } from \"../types/apiResponse\";\n\nconst GenerateRecipeArea = ({\n\trecipe,\n\trecipeImage,\n\tisSaving,\n\tisPending,\n\thandleClickSave,\n}: {\n\trecipe: RecipeResponse | null;\n\trecipeImage: RecipeImage | null;\n\tisSaving: boolean;\n\tisPending: boolean;\n\thandleClickSave: () => void;\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{recipe && (\n\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row lg:items-center\">\n\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-64 md:h-80 lg:h-140 mb-4 lg:mb-0\">\n\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full rounded-lg bg-base-200\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={handleClickSave}\n\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default GenerateRecipeArea;\n"
						}
					},
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "The order of the items may change, and this also affects performances and component state."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Check the " },
								{
									"elements": [
										{
											"Hyperlink": {
												"href": "https://reactjs.org/docs/lists-and-keys.html#keys"
											}
										}
									],
									"content": "React documentation"
								},
								{ "elements": [], "content": ". " }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/GenerateRecipeArea.tsx" },
				"span": [2139, 2144],
				"sourceCode": "import type { RecipeImage, RecipeResponse } from \"../types/apiResponse\";\n\nconst GenerateRecipeArea = ({\n\trecipe,\n\trecipeImage,\n\tisSaving,\n\tisPending,\n\thandleClickSave,\n}: {\n\trecipe: RecipeResponse | null;\n\trecipeImage: RecipeImage | null;\n\tisSaving: boolean;\n\tisPending: boolean;\n\thandleClickSave: () => void;\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{recipe && (\n\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row lg:items-center\">\n\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-64 md:h-80 lg:h-140 mb-4 lg:mb-0\">\n\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full rounded-lg bg-base-200\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={handleClickSave}\n\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default GenerateRecipeArea;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/suspicious/noArrayIndexKey",
			"severity": "error",
			"description": "Avoid using the index of an array as key property in an element.",
			"message": [
				{
					"elements": [],
					"content": "Avoid using the index of an array as key property in an element."
				}
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "This is the source of the key value."
								}
							]
						]
					},
					{
						"frame": {
							"path": null,
							"span": [2697, 2702],
							"sourceCode": "import type { RecipeImage, RecipeResponse } from \"../types/apiResponse\";\n\nconst GenerateRecipeArea = ({\n\trecipe,\n\trecipeImage,\n\tisSaving,\n\tisPending,\n\thandleClickSave,\n}: {\n\trecipe: RecipeResponse | null;\n\trecipeImage: RecipeImage | null;\n\tisSaving: boolean;\n\tisPending: boolean;\n\thandleClickSave: () => void;\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{recipe && (\n\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row lg:items-center\">\n\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-64 md:h-80 lg:h-140 mb-4 lg:mb-0\">\n\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full rounded-lg bg-base-200\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={handleClickSave}\n\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default GenerateRecipeArea;\n"
						}
					},
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "The order of the items may change, and this also affects performances and component state."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Check the " },
								{
									"elements": [
										{
											"Hyperlink": {
												"href": "https://reactjs.org/docs/lists-and-keys.html#keys"
											}
										}
									],
									"content": "React documentation"
								},
								{ "elements": [], "content": ". " }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/GenerateRecipeArea.tsx" },
				"span": [2727, 2732],
				"sourceCode": "import type { RecipeImage, RecipeResponse } from \"../types/apiResponse\";\n\nconst GenerateRecipeArea = ({\n\trecipe,\n\trecipeImage,\n\tisSaving,\n\tisPending,\n\thandleClickSave,\n}: {\n\trecipe: RecipeResponse | null;\n\trecipeImage: RecipeImage | null;\n\tisSaving: boolean;\n\tisPending: boolean;\n\thandleClickSave: () => void;\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{recipe && (\n\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row lg:items-center\">\n\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-64 md:h-80 lg:h-140 mb-4 lg:mb-0\">\n\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full rounded-lg bg-base-200\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={handleClickSave}\n\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default GenerateRecipeArea;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/GenerateRecipeArea.tsx" },
				"span": [2971, 3083],
				"sourceCode": "import type { RecipeImage, RecipeResponse } from \"../types/apiResponse\";\n\nconst GenerateRecipeArea = ({\n\trecipe,\n\trecipeImage,\n\tisSaving,\n\tisPending,\n\thandleClickSave,\n}: {\n\trecipe: RecipeResponse | null;\n\trecipeImage: RecipeImage | null;\n\tisSaving: boolean;\n\tisPending: boolean;\n\thandleClickSave: () => void;\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{recipe && (\n\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row lg:items-center\">\n\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-64 md:h-80 lg:h-140 mb-4 lg:mb-0\">\n\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full rounded-lg bg-base-200\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={handleClickSave}\n\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default GenerateRecipeArea;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/EmailChangeSuccess.tsx" },
				"span": [1683, 1745],
				"sourceCode": "import { CircleCheckBig, Mail } from \"lucide-react\";\n\nconst EmailChangeSuccess = ({\n\temail,\n\tcloseModal,\n}: { email: string; closeModal: () => void }) => {\n\treturn (\n\t\t<section className=\"bg-base-100 p-6 rounded-lg min-w-lg shadow-lg\">\n\t\t\t<div className=\"flex justify-center flex-col items-center space-y-4\">\n\t\t\t\t<div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-emerald-200\">\n\t\t\t\t\t<CircleCheckBig className=\"text-primary\" />\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col space-y-2 justify-center items-center\">\n\t\t\t\t\t<h2 className=\"text-2xl font-bold\">\n\t\t\t\t\t\tメールアドレスの変更が完了しました\n\t\t\t\t\t</h2>\n\t\t\t\t\t<p className=\"text-neutral-500\">\n\t\t\t\t\t\t新しいメールアドレスでの認証が正常が完了しました\n\t\t\t\t\t</p>\n\n\t\t\t\t\t<div className=\"bg-info rounded-lg flex items-center p-4 space-x-4 w-full mt-4\">\n\t\t\t\t\t\t<Mail />\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p className=\"text-sm\">新しいメールアドレス</p>\n\t\t\t\t\t\t\t<p className=\"text-sm\">{email}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"w-full mt-4\">\n\t\t\t\t\t\t<p className=\"font-semibold\">次のステップ</p>\n\t\t\t\t\t\t<ul className=\"mt-2 list-disc list-inside space-y-2\">\n\t\t\t\t\t\t\t<li className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t今後のログインには新しいメールアドレスを使用してください\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t重要な通知は新しいメールアドレスに送信されます\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\tセキュリティ設定の確認を勧めます\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"border-t-1 border-base-300 w-full mt-4\" />\n\n\t\t\t\t\t<button className=\"btn btn-neutral mt-4\" onClick={closeModal}>\n\t\t\t\t\t\t閉じる\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</section>\n\t);\n};\n\nexport default EmailChangeSuccess;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/PaginationButtons.tsx" },
				"span": [554, 702],
				"sourceCode": "import { useSearchParams } from \"react-router\";\n\nconst PaginationButtons = ({\n\ttotalPages,\n\tcurrentPage,\n}: { totalPages: number; currentPage: number }) => {\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\n\tconst handleMove = (newPage: number) => {\n\t\tsetSearchParams((prev) => {\n\t\t\tconst newParams = new URLSearchParams(prev);\n\t\t\tnewParams.set(\"page\", newPage.toString());\n\t\t\treturn newParams;\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"flex justify-center join my-8\">\n\t\t\t{Array.from({ length: totalPages }, (v, i) => i + 1).map((page) => (\n\t\t\t\t<button\n\t\t\t\t\tkey={page}\n\t\t\t\t\tclassName={`join-item btn ${currentPage + 1 === page ? \"btn-active\" : \"\"}`}\n\t\t\t\t\tonClick={() => handleMove(page)}\n\t\t\t\t>\n\t\t\t\t\t{page}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default PaginationButtons;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/noSvgWithoutTitle",
			"severity": "error",
			"description": "Alternative text title element cannot be empty",
			"message": [
				{ "elements": [], "content": "Alternative text " },
				{ "elements": ["Emphasis"], "content": "title" },
				{ "elements": [], "content": " element cannot be empty" }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "For accessibility purposes, " },
								{ "elements": ["Emphasis"], "content": "SVGs" },
								{
									"elements": [],
									"content": " should have an alternative text, provided via "
								},
								{ "elements": ["Emphasis"], "content": "title" },
								{
									"elements": [],
									"content": " element. If the svg element has role=\"img\", you should add the "
								},
								{ "elements": ["Emphasis"], "content": "aria-label" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "aria-labelledby" },
								{ "elements": [], "content": " attribute." }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/Navibar.tsx" },
				"span": [3314, 3429],
				"sourceCode": "import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useKeyWithClickEvents",
			"severity": "error",
			"description": "Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.",
			"message": [
				{ "elements": [], "content": "Enforce to have the " },
				{ "elements": ["Emphasis"], "content": "onClick" },
				{ "elements": [], "content": " mouse event with the " },
				{ "elements": ["Emphasis"], "content": "onKeyUp" },
				{ "elements": [], "content": ", the " },
				{ "elements": ["Emphasis"], "content": "onKeyDown" },
				{ "elements": [], "content": ", or the " },
				{ "elements": ["Emphasis"], "content": "onKeyPress" },
				{ "elements": [], "content": " keyboard event." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."
								}
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/Navibar.tsx" },
				"span": [5135, 5281],
				"sourceCode": "import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/style/noCommaOperator",
			"severity": "error",
			"description": "The comma operator is disallowed.",
			"message": [
				{ "elements": [], "content": "The comma operator is disallowed." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "Its use is often confusing and obscures side effects."
								}
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/Navibar.tsx" },
				"span": [5238, 5239],
				"sourceCode": "import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/style/noCommaOperator",
			"severity": "error",
			"description": "The comma operator is disallowed.",
			"message": [
				{ "elements": [], "content": "The comma operator is disallowed." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "Its use is often confusing and obscures side effects."
								}
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/Navibar.tsx" },
				"span": [5450, 5451],
				"sourceCode": "import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useKeyWithClickEvents",
			"severity": "error",
			"description": "Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.",
			"message": [
				{ "elements": [], "content": "Enforce to have the " },
				{ "elements": ["Emphasis"], "content": "onClick" },
				{ "elements": [], "content": " mouse event with the " },
				{ "elements": ["Emphasis"], "content": "onKeyUp" },
				{ "elements": [], "content": ", the " },
				{ "elements": ["Emphasis"], "content": "onKeyDown" },
				{ "elements": [], "content": ", or the " },
				{ "elements": ["Emphasis"], "content": "onKeyPress" },
				{ "elements": [], "content": " keyboard event." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."
								}
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/Navibar.tsx" },
				"span": [7794, 7858],
				"sourceCode": "import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/Navibar.tsx" },
				"span": [2788, 2848],
				"sourceCode": "import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/Navibar.tsx" },
				"span": [3083, 3308],
				"sourceCode": "import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/Navibar.tsx" },
				"span": [5390, 5626],
				"sourceCode": "import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/Navibar.tsx" },
				"span": [7961, 8141],
				"sourceCode": "import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/RecipeGenerator.tsx" },
				"span": [1041, 1099],
				"sourceCode": "import { ChefHat } from \"lucide-react\";\nimport { useContext } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\n\ntype Props = {\n\tvegetableName: string;\n\tid: number;\n};\n\nconst RecipeGenerator = ({ vegetableName, id }: Props) => {\n\tconst navigate = useNavigate();\n\tconst { user } = useContext(UserContext);\n\n\tconst handleClick = (): void => {\n\t\tif (!user) {\n\t\t\ttoast.error(\"レシピ機能をご利用いただくにはログインが必要です\");\n\t\t\tnavigate(\"/login\");\n\t\t\treturn;\n\t\t}\n\n\t\tnavigate(\"/recipe-generator\", { state: { selectedVegetableId: id } });\n\t};\n\n\treturn (\n\t\t<div className=\"p-6 mt-4 rounded-2xl shadow-lg space-y-4\">\n\t\t\t<h2 className=\"text-xl font-semibold text-primary flex items-center gap-2\">\n\t\t\t\t<ChefHat className=\"w-5 h-5 text-primary\" />\n\t\t\t\t{vegetableName}を使ったレシピ\n\t\t\t</h2>\n\t\t\t<p>AIが{vegetableName}を使ったおすすめレシピを提案します。</p>\n\t\t\t<div className=\"text-center mt-10\">\n\t\t\t\t<button onClick={handleClick} className=\"btn btn-neutral\">\n\t\t\t\t\t{vegetableName}のレシピ提案を見る\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default RecipeGenerator;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useKeyWithClickEvents",
			"severity": "error",
			"description": "Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.",
			"message": [
				{ "elements": [], "content": "Enforce to have the " },
				{ "elements": ["Emphasis"], "content": "onClick" },
				{ "elements": [], "content": " mouse event with the " },
				{ "elements": ["Emphasis"], "content": "onKeyUp" },
				{ "elements": [], "content": ", the " },
				{ "elements": ["Emphasis"], "content": "onKeyDown" },
				{ "elements": [], "content": ", or the " },
				{ "elements": ["Emphasis"], "content": "onKeyPress" },
				{ "elements": [], "content": " keyboard event." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{
									"elements": [],
									"content": "Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."
								}
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/RecipeCard.tsx" },
				"span": [865, 918],
				"sourceCode": "import { Clock, Trash2, User } from \"lucide-react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useNavigate } from \"react-router\";\nimport type { RecipeCardProps } from \"../types/apiResponse\";\nimport { api } from \"../utils/axios\";\n\nconst RecipeCard = ({\n\tid,\n\ttitle,\n\tinstructions,\n\tcookingTime,\n\tservings,\n\tsetRecipes,\n\timage,\n\tcategory,\n}: RecipeCardProps) => {\n\tconst handleClickDelete = async (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\te.stopPropagation();\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tawait api.delete<{ message: string }>(`/recipes/${id}`);\n\t\t\tsetRecipes((prevRecipes) =>\n\t\t\t\tprevRecipes.filter((recipe) => recipe.id !== id),\n\t\t\t);\n\t\t\ttoast.success(\"レシピを削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"レシピの削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst navigate = useNavigate();\n\n\treturn (\n\t\t<div onClick={() => navigate(`/recipe-lists/${id}`)}>\n\t\t\t<div className=\"cursor-pointer w-90 card shadow-sm transition-transform duration-200 ease-in-out transform hover:-translate-y-1 hover:shadow-lg\">\n\t\t\t\t<figure>\n\t\t\t\t\t<img src={image} alt=\"料理画像\" className=\"aspect-square w-full\" />\n\t\t\t\t</figure>\n\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t<h2 className=\"card-title line-clamp-1\">{title}</h2>\n\t\t\t\t\t<div className=\"flex gap-1 flex-nowrap\">\n\t\t\t\t\t\t<span className=\"badge badge-secondary line-clamp-1\">\n\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"badge badge-secondary flex items-center line-clamp-1\">\n\t\t\t\t\t\t\t<Clock size={15} />\n\t\t\t\t\t\t\t{cookingTime}分\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"badge badge-secondary flex items-center line-clamp-1\">\n\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t{servings}人分\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<p className=\"text-neutral-500 line-clamp-2\">{instructions}</p>\n\t\t\t\t\t<div className=\"card-actions items-center justify-end\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={handleClickDelete}\n\t\t\t\t\t\t\tclassName=\"btn btn-error flex items-center gap-1\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Trash2 size={20} />\n\t\t\t\t\t\t\t<span>削除する</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default RecipeCard;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/a11y/useButtonType",
			"severity": "error",
			"description": "Provide an explicit type prop for the button element.",
			"message": [
				{ "elements": [], "content": "Provide an explicit " },
				{ "elements": ["Emphasis"], "content": "type" },
				{ "elements": [], "content": " prop for the " },
				{ "elements": ["Emphasis"], "content": "button" },
				{ "elements": [], "content": " element." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "The default " },
								{ "elements": ["Emphasis"], "content": "type" },
								{ "elements": [], "content": " of a button is " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{
									"elements": [],
									"content": ", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."
								}
							]
						]
					},
					{
						"log": [
							"info",
							[
								{ "elements": [], "content": "Allowed button types are: " },
								{ "elements": ["Emphasis"], "content": "submit" },
								{ "elements": [], "content": ", " },
								{ "elements": ["Emphasis"], "content": "button" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "reset" },
								{ "elements": [], "content": "" }
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/RecipeCard.tsx" },
				"span": [1834, 1941],
				"sourceCode": "import { Clock, Trash2, User } from \"lucide-react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useNavigate } from \"react-router\";\nimport type { RecipeCardProps } from \"../types/apiResponse\";\nimport { api } from \"../utils/axios\";\n\nconst RecipeCard = ({\n\tid,\n\ttitle,\n\tinstructions,\n\tcookingTime,\n\tservings,\n\tsetRecipes,\n\timage,\n\tcategory,\n}: RecipeCardProps) => {\n\tconst handleClickDelete = async (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\te.stopPropagation();\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tawait api.delete<{ message: string }>(`/recipes/${id}`);\n\t\t\tsetRecipes((prevRecipes) =>\n\t\t\t\tprevRecipes.filter((recipe) => recipe.id !== id),\n\t\t\t);\n\t\t\ttoast.success(\"レシピを削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"レシピの削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst navigate = useNavigate();\n\n\treturn (\n\t\t<div onClick={() => navigate(`/recipe-lists/${id}`)}>\n\t\t\t<div className=\"cursor-pointer w-90 card shadow-sm transition-transform duration-200 ease-in-out transform hover:-translate-y-1 hover:shadow-lg\">\n\t\t\t\t<figure>\n\t\t\t\t\t<img src={image} alt=\"料理画像\" className=\"aspect-square w-full\" />\n\t\t\t\t</figure>\n\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t<h2 className=\"card-title line-clamp-1\">{title}</h2>\n\t\t\t\t\t<div className=\"flex gap-1 flex-nowrap\">\n\t\t\t\t\t\t<span className=\"badge badge-secondary line-clamp-1\">\n\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"badge badge-secondary flex items-center line-clamp-1\">\n\t\t\t\t\t\t\t<Clock size={15} />\n\t\t\t\t\t\t\t{cookingTime}分\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"badge badge-secondary flex items-center line-clamp-1\">\n\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t{servings}人分\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<p className=\"text-neutral-500 line-clamp-2\">{instructions}</p>\n\t\t\t\t\t<div className=\"card-actions items-center justify-end\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={handleClickDelete}\n\t\t\t\t\t\t\tclassName=\"btn btn-error flex items-center gap-1\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Trash2 size={20} />\n\t\t\t\t\t\t\t<span>削除する</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default RecipeCard;\n"
			},
			"tags": [],
			"source": null
		},
		{
			"category": "lint/complexity/noForEach",
			"severity": "error",
			"description": "Prefer for...of instead of forEach.",
			"message": [
				{ "elements": [], "content": "Prefer " },
				{ "elements": ["Emphasis"], "content": "for...of" },
				{ "elements": [], "content": " instead of " },
				{ "elements": ["Emphasis"], "content": "forEach" },
				{ "elements": [], "content": "." }
			],
			"advices": {
				"advices": [
					{
						"log": [
							"info",
							[
								{ "elements": ["Emphasis"], "content": "forEach" },
								{
									"elements": [],
									"content": " may lead to performance issues when working with large arrays. When combined with functions like "
								},
								{ "elements": ["Emphasis"], "content": "filter" },
								{ "elements": [], "content": " or " },
								{ "elements": ["Emphasis"], "content": "map" },
								{
									"elements": [],
									"content": ", this causes multiple iterations over the same type."
								}
							]
						]
					}
				]
			},
			"verboseAdvices": { "advices": [] },
			"location": {
				"path": { "file": "src/components/PriceChart.tsx" },
				"span": [635, 827],
				"sourceCode": "import { format, parseISO } from \"date-fns\";\nimport ja from \"date-fns/locale/ja\";\nimport { Activity, ArchiveIcon, ChartColumnIncreasing } from \"lucide-react\";\nimport {\n\tCartesianGrid,\n\tLine,\n\tLineChart,\n\tResponsiveContainer,\n\tTooltip,\n\tXAxis,\n\tYAxis,\n} from \"recharts\";\n\ntype Price = {\n\tmonth: string;\n\taverage_price: number;\n};\n\ntype PriceChartProps = {\n\tprices: Price[];\n};\n\n//インデックスシグネチャ\ntype YearlyPrice = {\n\tmonth: string;\n\t[year: string]: number | string;\n};\n\nconst PriceChart = ({ prices }: PriceChartProps) => {\n\tconsole.log(\"price\", prices);\n\n\tconst groupedData: { [month: string]: YearlyPrice } = {};\n\n\tprices.forEach(({ month, average_price }) => {\n\t\tconst [year, mon] = month.split(\"-\");\n\t\tif (!groupedData[mon]) groupedData[mon] = { month: mon };\n\t\tgroupedData[mon][year] = average_price;\n\t});\n\tconsole.log(\"group:\", groupedData);\n\n\tconst chartData: YearlyPrice[] = Object.values(groupedData).sort(\n\t\t(a, b) => Number.parseInt(a.month) - Number.parseInt(b.month),\n\t);\n\tconsole.log(\"chart:\", chartData);\n\n\treturn (\n\t\t<main className=\"md:p-6 mt-4 rounded-2xl shadow-md overflow-x-auto\">\n\t\t\t<h1 className=\"text-xl mb-4 text-primary font-semibold flex gap-2 items-center\">\n\t\t\t\t<Activity className=\"w-5 h-5 text-primary\" />\n\t\t\t\t年度別価格推移\n\t\t\t</h1>\n\t\t\t<div className=\"min-w-lg\">\n\t\t\t\t<ResponsiveContainer width=\"100%\" height={300}>\n\t\t\t\t\t<LineChart data={chartData}>\n\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t\t<XAxis\n\t\t\t\t\t\t\tdataKey=\"month\"\n\t\t\t\t\t\t\ttickFormatter={(monthStr) => `${Number.parseInt(monthStr)}月`}\n\t\t\t\t\t\t\ttick={{ fontSize: 12 }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<YAxis\n\t\t\t\t\t\t\tdomain={[\"dataMin - 10\", \"dataMax + 10\"]}\n\t\t\t\t\t\t\ttick={{ fontSize: 12 }}\n\t\t\t\t\t\t\ttickLine={false}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\tformatter={(value, name) => [`${value}円`, `${name}年`]}\n\t\t\t\t\t\t\tlabelFormatter={(label) => `${Number.parseInt(label)}月`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Line\n\t\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\t\tdataKey=\"2024\"\n\t\t\t\t\t\t\tstroke=\"oklch(55.6% 0 0)\"\n\t\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\t\tname=\"2024\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Line\n\t\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\t\tdataKey=\"2025\"\n\t\t\t\t\t\t\tstroke=\"oklch(0.5892 0.199 134.6)\"\n\t\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\t\tname=\"2025\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</LineChart>\n\t\t\t\t</ResponsiveContainer>\n\t\t\t</div>\n\t\t</main>\n\t);\n};\n\nexport default PriceChart;\n"
			},
			"tags": [],
			"source": null
		}
	],
	"command": "lint"
}

