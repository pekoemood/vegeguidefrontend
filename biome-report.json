{"summary":{"changed":0,"unchanged":94,"matches":0,"duration":{"secs":0,"nanos":45988000},"errors":108,"warnings":0,"skipped":0,"suggestedFixesSkipped":0,"diagnosticsNotPrinted":0},"diagnostics":[{"category":"parse","severity":"error","description":"Expected an array, an object, or a literal but instead found the end of the file.","message":[{"elements":[],"content":"Expected an array, an object, or a literal but instead found the end of the file."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Expected an array, an object, or a literal here."}]]},{"frame":{"path":null,"span":[0,0],"sourceCode":""}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/biome-report.json"},"span":[0,0],"sourceCode":""},"tags":[],"source":null},{"category":"parse","severity":"error","description":"Expected an array, an object, or a literal but instead found the end of the file.","message":[{"elements":[],"content":"Expected an array, an object, or a literal but instead found the end of the file."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Expected an array, an object, or a literal here."}]]},{"frame":{"path":null,"span":[0,0],"sourceCode":""}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/biome-report.json"},"span":[0,0],"sourceCode":""},"tags":[],"source":null},{"category":"format","severity":"error","description":"Code formatting aborted due to parsing errors. To format code with errors, enable the 'formatter.formatWithErrors' option.","message":[{"elements":[],"content":"Code formatting aborted due to parsing errors. To format code with errors, enable the 'formatter.formatWithErrors' option."}],"advices":{"advices":[]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/biome-report.json"},"span":null,"sourceCode":null},"tags":[],"source":null},{"category":"lint/correctness/noUnknownProperty","severity":"error","description":"Unknown property is not allowed.","message":[{"elements":[],"content":"Unknown property is not allowed."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"See "},{"elements":[{"Hyperlink":{"href":"https://stylelint.io/user-guide/rules/property-no-unknown/"}}],"content":"CSS Specifications and browser specific properties"},{"elements":[],"content":" for more details."}]]},{"log":["info",[{"elements":[],"content":"To resolve this issue, replace the unknown property with a valid CSS property."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/index.css"},"span":[44,50],"sourceCode":"@import \"tailwindcss\";\n@plugin \"daisyui\" {\n\tthemes: lemonade --default;\n}\n\nhtml {\n\tscroll-behavior: smooth;\n}\n\n@keyframes fade-up {\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(20px);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n}\n\n.animate-fade-up {\n\tanimation: fade-up 0.6s ease-out forwards;\n\topacity: 0;\n}\n\n/* スクロールアニメーション */\n.scroll-animation-target {\n\topacity: 0;\n\ttransform: translateY(20px);\n}\n\n.scroll-animation-target.animate-fade-up {\n\tanimation: fade-up 0.8s ease-in-out forwards;\n}\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AccountSetting.tsx"},"span":[778,817],"sourceCode":"import { useState } from \"react\";\nimport MailTab from \"./MailTab\";\nimport PasswordTab from \"./PasswordTab\";\nimport ProfileTab from \"./ProfileTab\";\n\nconst AccountSetting = ({\n\tname,\n\temail,\n\tgoogle_account,\n}: { name: string; email: string; google_account: boolean }) => {\n\tconst [activeTab, setActiveTab] = useState<string>(\"profile\");\n\n\treturn (\n\t\t<main className=\"bg-base-100 p-6 rounded-lg max-w-lg lg:w-lg shadow-lg\">\n\t\t\t<h2 className=\"text-xl font-bold\">アカウント設定</h2>\n\t\t\t<p className=\"text-neutral-500 text-sm\">\n\t\t\t\tアカウント情報の確認と変更ができます。\n\t\t\t</p>\n\n\t\t\t<div role=\"tablist\" className=\"tabs tabs-box mt-6\">\n\t\t\t\t<a\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"profile\" && \"tab-active\"}`}\n\t\t\t\t\tonClick={() => setActiveTab(\"profile\")}\n\t\t\t\t>\n\t\t\t\t\tプロフィール\n\t\t\t\t</a>\n\t\t\t\t{!google_account && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"password\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"password\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tパスワード\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"mail\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"mail\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tメール\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-6 p-6 border border-base-300 rounded-lg\">\n\t\t\t\t{activeTab === \"profile\" && (\n\t\t\t\t\t<ProfileTab name={name} email={email} googleUser={google_account} />\n\t\t\t\t)}\n\t\t\t\t{activeTab === \"password\" && <PasswordTab />}\n\t\t\t\t{activeTab === \"mail\" && <MailTab email={email} />}\n\t\t\t</div>\n\t\t</main>\n\t);\n};\n\nexport default AccountSetting;\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AccountSetting.tsx"},"span":[1022,1062],"sourceCode":"import { useState } from \"react\";\nimport MailTab from \"./MailTab\";\nimport PasswordTab from \"./PasswordTab\";\nimport ProfileTab from \"./ProfileTab\";\n\nconst AccountSetting = ({\n\tname,\n\temail,\n\tgoogle_account,\n}: { name: string; email: string; google_account: boolean }) => {\n\tconst [activeTab, setActiveTab] = useState<string>(\"profile\");\n\n\treturn (\n\t\t<main className=\"bg-base-100 p-6 rounded-lg max-w-lg lg:w-lg shadow-lg\">\n\t\t\t<h2 className=\"text-xl font-bold\">アカウント設定</h2>\n\t\t\t<p className=\"text-neutral-500 text-sm\">\n\t\t\t\tアカウント情報の確認と変更ができます。\n\t\t\t</p>\n\n\t\t\t<div role=\"tablist\" className=\"tabs tabs-box mt-6\">\n\t\t\t\t<a\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"profile\" && \"tab-active\"}`}\n\t\t\t\t\tonClick={() => setActiveTab(\"profile\")}\n\t\t\t\t>\n\t\t\t\t\tプロフィール\n\t\t\t\t</a>\n\t\t\t\t{!google_account && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"password\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"password\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tパスワード\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"mail\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"mail\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tメール\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-6 p-6 border border-base-300 rounded-lg\">\n\t\t\t\t{activeTab === \"profile\" && (\n\t\t\t\t\t<ProfileTab name={name} email={email} googleUser={google_account} />\n\t\t\t\t)}\n\t\t\t\t{activeTab === \"password\" && <PasswordTab />}\n\t\t\t\t{activeTab === \"mail\" && <MailTab email={email} />}\n\t\t\t</div>\n\t\t</main>\n\t);\n};\n\nexport default AccountSetting;\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AccountSetting.tsx"},"span":[1232,1268],"sourceCode":"import { useState } from \"react\";\nimport MailTab from \"./MailTab\";\nimport PasswordTab from \"./PasswordTab\";\nimport ProfileTab from \"./ProfileTab\";\n\nconst AccountSetting = ({\n\tname,\n\temail,\n\tgoogle_account,\n}: { name: string; email: string; google_account: boolean }) => {\n\tconst [activeTab, setActiveTab] = useState<string>(\"profile\");\n\n\treturn (\n\t\t<main className=\"bg-base-100 p-6 rounded-lg max-w-lg lg:w-lg shadow-lg\">\n\t\t\t<h2 className=\"text-xl font-bold\">アカウント設定</h2>\n\t\t\t<p className=\"text-neutral-500 text-sm\">\n\t\t\t\tアカウント情報の確認と変更ができます。\n\t\t\t</p>\n\n\t\t\t<div role=\"tablist\" className=\"tabs tabs-box mt-6\">\n\t\t\t\t<a\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"profile\" && \"tab-active\"}`}\n\t\t\t\t\tonClick={() => setActiveTab(\"profile\")}\n\t\t\t\t>\n\t\t\t\t\tプロフィール\n\t\t\t\t</a>\n\t\t\t\t{!google_account && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"password\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"password\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tパスワード\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"mail\" && \"tab-active\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"mail\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tメール\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-6 p-6 border border-base-300 rounded-lg\">\n\t\t\t\t{activeTab === \"profile\" && (\n\t\t\t\t\t<ProfileTab name={name} email={email} googleUser={google_account} />\n\t\t\t\t)}\n\t\t\t\t{activeTab === \"password\" && <PasswordTab />}\n\t\t\t\t{activeTab === \"mail\" && <MailTab email={email} />}\n\t\t\t</div>\n\t\t</main>\n\t);\n};\n\nexport default AccountSetting;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddItemForm.tsx"},"span":[1680,1725],"sourceCode":"import { useState } from \"react\";\n\nconst AddItemForm = ({\n\tcategories,\n\tcloseModal,\n\thandleAddItem,\n}: {\n\tcategories: string[];\n\tcloseModal: () => void;\n\thandleAddItem: (item: {\n\t\tname: string;\n\t\tdisplay_amount: string;\n\t\tcategory: string;\n\t}) => void;\n}) => {\n\tconst [name, setName] = useState(\"\");\n\tconst [amount, setAmount] = useState(\"\");\n\tconst [category, setCategory] = useState(\"\");\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい食材を追加</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t買い物リストに追加する食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"grid grid-cols-3 gap-4 mb-4\">\n\t\t\t\t\t<div className=\"col-span-2\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-span-1\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t<select\n\t\t\t\t\t\tname=\"\"\n\t\t\t\t\t\tid=\"\"\n\t\t\t\t\t\tclassName=\"select\"\n\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\" className=\"text-neutral-500\">\n\t\t\t\t\t\t\tカテゴリーを選択\n\t\t\t\t\t\t</option>\n\t\t\t\t\t\t{categories.map((cate) => (\n\t\t\t\t\t\t\t<option key={cate} value={cate}>\n\t\t\t\t\t\t\t\t{cate}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex justify-center gap-2 mt-4\">\n\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\tキャンセル\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\thandleAddItem({ name, display_amount: amount, category })\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddItemForm;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddItemForm.tsx"},"span":[1768,1898],"sourceCode":"import { useState } from \"react\";\n\nconst AddItemForm = ({\n\tcategories,\n\tcloseModal,\n\thandleAddItem,\n}: {\n\tcategories: string[];\n\tcloseModal: () => void;\n\thandleAddItem: (item: {\n\t\tname: string;\n\t\tdisplay_amount: string;\n\t\tcategory: string;\n\t}) => void;\n}) => {\n\tconst [name, setName] = useState(\"\");\n\tconst [amount, setAmount] = useState(\"\");\n\tconst [category, setCategory] = useState(\"\");\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい食材を追加</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t買い物リストに追加する食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"grid grid-cols-3 gap-4 mb-4\">\n\t\t\t\t\t<div className=\"col-span-2\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-span-1\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t<select\n\t\t\t\t\t\tname=\"\"\n\t\t\t\t\t\tid=\"\"\n\t\t\t\t\t\tclassName=\"select\"\n\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\" className=\"text-neutral-500\">\n\t\t\t\t\t\t\tカテゴリーを選択\n\t\t\t\t\t\t</option>\n\t\t\t\t\t\t{categories.map((cate) => (\n\t\t\t\t\t\t\t<option key={cate} value={cate}>\n\t\t\t\t\t\t\t\t{cate}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex justify-center gap-2 mt-4\">\n\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\tキャンセル\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\thandleAddItem({ name, display_amount: amount, category })\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddItemForm;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddListForm.tsx"},"span":[826,871],"sourceCode":"import { useState } from \"react\";\n\nconst AddListForm = ({\n\tcloseModal,\n\thandleAddList,\n}: {\n\tcloseModal: () => void;\n\thandleAddList: (name: string) => Promise<void>;\n}) => {\n\tconst [name, setName] = useState<string>(\"\");\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg shadow-lg min-w-sm md:min-w-md lg:min-w-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\tキャンセル\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn\" onClick={() => handleAddList(name)}>\n\t\t\t\t\t\t追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddListForm;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddListForm.tsx"},"span":[914,974],"sourceCode":"import { useState } from \"react\";\n\nconst AddListForm = ({\n\tcloseModal,\n\thandleAddList,\n}: {\n\tcloseModal: () => void;\n\thandleAddList: (name: string) => Promise<void>;\n}) => {\n\tconst [name, setName] = useState<string>(\"\");\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg shadow-lg min-w-sm md:min-w-md lg:min-w-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\tキャンセル\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn\" onClick={() => handleAddList(name)}>\n\t\t\t\t\t\t追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddListForm;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddFridgeItemForm.tsx"},"span":[1978,2161],"sourceCode":"import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { FridgeAddItem } from \"../types/apiResponse\";\n\nconst AddFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\thandleAdd,\n}: {\n\tcloseModal: () => void;\n\tcategories: { name: string; icon: string }[];\n\thandleAdd: (props: FridgeAddItem) => void;\n}) => {\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [amount, setAmount] = useState<string>(\"\");\n\tconst [category, setCategory] = useState<string>(\"\");\n\tconst [date, setDate] = useState<Date | undefined>(undefined);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を追加</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"category-select\"\n\t\t\t\t\t\t\tid=\"category\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t\taria-label=\"カテゴリ選択\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value=\"\" disabled>\n\t\t\t\t\t\t\t\tカテゴリを選択してください\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ [\"anchorName\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t\tdata-testid=\"selected-date\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ [\"positionAnchor\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleAdd({ name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t追加\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddFridgeItemForm;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddFridgeItemForm.tsx"},"span":[2659,2704],"sourceCode":"import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { FridgeAddItem } from \"../types/apiResponse\";\n\nconst AddFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\thandleAdd,\n}: {\n\tcloseModal: () => void;\n\tcategories: { name: string; icon: string }[];\n\thandleAdd: (props: FridgeAddItem) => void;\n}) => {\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [amount, setAmount] = useState<string>(\"\");\n\tconst [category, setCategory] = useState<string>(\"\");\n\tconst [date, setDate] = useState<Date | undefined>(undefined);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を追加</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"category-select\"\n\t\t\t\t\t\t\tid=\"category\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t\taria-label=\"カテゴリ選択\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value=\"\" disabled>\n\t\t\t\t\t\t\t\tカテゴリを選択してください\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ [\"anchorName\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t\tdata-testid=\"selected-date\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ [\"positionAnchor\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleAdd({ name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t追加\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddFridgeItemForm;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddFridgeItemForm.tsx"},"span":[2750,2855],"sourceCode":"import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { FridgeAddItem } from \"../types/apiResponse\";\n\nconst AddFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\thandleAdd,\n}: {\n\tcloseModal: () => void;\n\tcategories: { name: string; icon: string }[];\n\thandleAdd: (props: FridgeAddItem) => void;\n}) => {\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [amount, setAmount] = useState<string>(\"\");\n\tconst [category, setCategory] = useState<string>(\"\");\n\tconst [date, setDate] = useState<Date | undefined>(undefined);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を追加</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"category-select\"\n\t\t\t\t\t\t\tid=\"category\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t\taria-label=\"カテゴリ選択\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value=\"\" disabled>\n\t\t\t\t\t\t\t\tカテゴリを選択してください\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ [\"anchorName\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t\tdata-testid=\"selected-date\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ [\"positionAnchor\" as string]: \"--rdp\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleAdd({ name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t追加\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddFridgeItemForm;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddItemFromRecipe.tsx"},"span":[1272,1317],"sourceCode":"import { Check, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { AddShoppingListParams, ShoppingList } from \"../types/apiResponse\";\n\nconst AddLItemFromRecipe = ({\n\tcloseModal,\n\tshoppingLists,\n\trecipeName,\n\thandleAddShoppingList,\n}: {\n\tcloseModal: () => void;\n\tshoppingLists: ShoppingList[];\n\trecipeName: string;\n\thandleAddShoppingList: (params: AddShoppingListParams) => Promise<void>;\n}) => {\n\tconst [isCreateMode, setIsCreateMode] = useState<boolean>(false);\n\tconst [name, setName] = useState<string>(\"\");\n\tconsole.log(\"ショッピングリストデータ\", shoppingLists);\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t{isCreateMode ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\tonClick={() => handleAddShoppingList({ name })}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t作成して追加\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">買い物リストを選択</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{recipeName}の食材を全て追加する買い物リストを選択してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t\t{shoppingLists.map((list) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={list.id}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline justify-between h-15 border-base-300\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thandleAddShoppingList({ shoppingListId: list.id })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdisabled={list.already_added}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-left flex flex-start items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t{list.already_added ? (\n\t\t\t\t\t\t\t\t\t\t\t<Check size={15} />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div>{list.name}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t\t\t{list.checked_count}/{list.items_count}完了\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t最終更新：{list.updated}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-dash btn-primary h-15\"\n\t\t\t\t\t\t\t\tonClick={() => setIsCreateMode((prev) => !prev)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t新しいリストを作成\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddLItemFromRecipe;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddItemFromRecipe.tsx"},"span":[1366,1462],"sourceCode":"import { Check, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { AddShoppingListParams, ShoppingList } from \"../types/apiResponse\";\n\nconst AddLItemFromRecipe = ({\n\tcloseModal,\n\tshoppingLists,\n\trecipeName,\n\thandleAddShoppingList,\n}: {\n\tcloseModal: () => void;\n\tshoppingLists: ShoppingList[];\n\trecipeName: string;\n\thandleAddShoppingList: (params: AddShoppingListParams) => Promise<void>;\n}) => {\n\tconst [isCreateMode, setIsCreateMode] = useState<boolean>(false);\n\tconst [name, setName] = useState<string>(\"\");\n\tconsole.log(\"ショッピングリストデータ\", shoppingLists);\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t{isCreateMode ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\tonClick={() => handleAddShoppingList({ name })}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t作成して追加\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">買い物リストを選択</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{recipeName}の食材を全て追加する買い物リストを選択してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t\t{shoppingLists.map((list) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={list.id}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline justify-between h-15 border-base-300\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thandleAddShoppingList({ shoppingListId: list.id })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdisabled={list.already_added}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-left flex flex-start items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t{list.already_added ? (\n\t\t\t\t\t\t\t\t\t\t\t<Check size={15} />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div>{list.name}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t\t\t{list.checked_count}/{list.items_count}完了\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t最終更新：{list.updated}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-dash btn-primary h-15\"\n\t\t\t\t\t\t\t\tonClick={() => setIsCreateMode((prev) => !prev)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t新しいリストを作成\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddLItemFromRecipe;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddItemFromRecipe.tsx"},"span":[1878,2127],"sourceCode":"import { Check, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { AddShoppingListParams, ShoppingList } from \"../types/apiResponse\";\n\nconst AddLItemFromRecipe = ({\n\tcloseModal,\n\tshoppingLists,\n\trecipeName,\n\thandleAddShoppingList,\n}: {\n\tcloseModal: () => void;\n\tshoppingLists: ShoppingList[];\n\trecipeName: string;\n\thandleAddShoppingList: (params: AddShoppingListParams) => Promise<void>;\n}) => {\n\tconst [isCreateMode, setIsCreateMode] = useState<boolean>(false);\n\tconst [name, setName] = useState<string>(\"\");\n\tconsole.log(\"ショッピングリストデータ\", shoppingLists);\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t{isCreateMode ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\tonClick={() => handleAddShoppingList({ name })}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t作成して追加\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">買い物リストを選択</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{recipeName}の食材を全て追加する買い物リストを選択してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t\t{shoppingLists.map((list) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={list.id}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline justify-between h-15 border-base-300\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thandleAddShoppingList({ shoppingListId: list.id })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdisabled={list.already_added}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-left flex flex-start items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t{list.already_added ? (\n\t\t\t\t\t\t\t\t\t\t\t<Check size={15} />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div>{list.name}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t\t\t{list.checked_count}/{list.items_count}完了\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t最終更新：{list.updated}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-dash btn-primary h-15\"\n\t\t\t\t\t\t\t\tonClick={() => setIsCreateMode((prev) => !prev)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t新しいリストを作成\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddLItemFromRecipe;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddItemFromRecipe.tsx"},"span":[2669,2792],"sourceCode":"import { Check, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { AddShoppingListParams, ShoppingList } from \"../types/apiResponse\";\n\nconst AddLItemFromRecipe = ({\n\tcloseModal,\n\tshoppingLists,\n\trecipeName,\n\thandleAddShoppingList,\n}: {\n\tcloseModal: () => void;\n\tshoppingLists: ShoppingList[];\n\trecipeName: string;\n\thandleAddShoppingList: (params: AddShoppingListParams) => Promise<void>;\n}) => {\n\tconst [isCreateMode, setIsCreateMode] = useState<boolean>(false);\n\tconst [name, setName] = useState<string>(\"\");\n\tconsole.log(\"ショッピングリストデータ\", shoppingLists);\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t{isCreateMode ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\tonClick={() => handleAddShoppingList({ name })}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t作成して追加\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">買い物リストを選択</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{recipeName}の食材を全て追加する買い物リストを選択してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t\t{shoppingLists.map((list) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={list.id}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline justify-between h-15 border-base-300\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thandleAddShoppingList({ shoppingListId: list.id })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdisabled={list.already_added}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-left flex flex-start items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t{list.already_added ? (\n\t\t\t\t\t\t\t\t\t\t\t<Check size={15} />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div>{list.name}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t\t\t{list.checked_count}/{list.items_count}完了\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t最終更新：{list.updated}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-dash btn-primary h-15\"\n\t\t\t\t\t\t\t\tonClick={() => setIsCreateMode((prev) => !prev)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t新しいリストを作成\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddLItemFromRecipe;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/AddItemFromRecipe.tsx"},"span":[2946,2991],"sourceCode":"import { Check, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { AddShoppingListParams, ShoppingList } from \"../types/apiResponse\";\n\nconst AddLItemFromRecipe = ({\n\tcloseModal,\n\tshoppingLists,\n\trecipeName,\n\thandleAddShoppingList,\n}: {\n\tcloseModal: () => void;\n\tshoppingLists: ShoppingList[];\n\trecipeName: string;\n\thandleAddShoppingList: (params: AddShoppingListParams) => Promise<void>;\n}) => {\n\tconst [isCreateMode, setIsCreateMode] = useState<boolean>(false);\n\tconst [name, setName] = useState<string>(\"\");\n\tconsole.log(\"ショッピングリストデータ\", shoppingLists);\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t{isCreateMode ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">新しい買い物リスト</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t買い物リストの名前を入力してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"買い物リスト名\"\n\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\tonClick={() => handleAddShoppingList({ name })}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t作成して追加\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">買い物リストを選択</h2>\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{recipeName}の食材を全て追加する買い物リストを選択してください\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t\t{shoppingLists.map((list) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={list.id}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline justify-between h-15 border-base-300\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thandleAddShoppingList({ shoppingListId: list.id })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdisabled={list.already_added}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-left flex flex-start items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t{list.already_added ? (\n\t\t\t\t\t\t\t\t\t\t\t<Check size={15} />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div>{list.name}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t\t\t{list.checked_count}/{list.items_count}完了\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t最終更新：{list.updated}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-dash btn-primary h-15\"\n\t\t\t\t\t\t\t\tonClick={() => setIsCreateMode((prev) => !prev)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Plus size={15} />\n\t\t\t\t\t\t\t\t新しいリストを作成\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-2 mt-4\">\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddLItemFromRecipe;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/EmailChangeSuccess.tsx"},"span":[1683,1745],"sourceCode":"import { CircleCheckBig, Mail } from \"lucide-react\";\n\nconst EmailChangeSuccess = ({\n\temail,\n\tcloseModal,\n}: { email: string; closeModal: () => void }) => {\n\treturn (\n\t\t<section className=\"bg-base-100 p-6 rounded-lg min-w-lg shadow-lg\">\n\t\t\t<div className=\"flex justify-center flex-col items-center space-y-4\">\n\t\t\t\t<div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-emerald-200\">\n\t\t\t\t\t<CircleCheckBig className=\"text-primary\" />\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col space-y-2 justify-center items-center\">\n\t\t\t\t\t<h2 className=\"text-2xl font-bold\">\n\t\t\t\t\t\tメールアドレスの変更が完了しました\n\t\t\t\t\t</h2>\n\t\t\t\t\t<p className=\"text-neutral-500\">\n\t\t\t\t\t\t新しいメールアドレスでの認証が正常が完了しました\n\t\t\t\t\t</p>\n\n\t\t\t\t\t<div className=\"bg-info rounded-lg flex items-center p-4 space-x-4 w-full mt-4\">\n\t\t\t\t\t\t<Mail />\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p className=\"text-sm\">新しいメールアドレス</p>\n\t\t\t\t\t\t\t<p className=\"text-sm\">{email}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"w-full mt-4\">\n\t\t\t\t\t\t<p className=\"font-semibold\">次のステップ</p>\n\t\t\t\t\t\t<ul className=\"mt-2 list-disc list-inside space-y-2\">\n\t\t\t\t\t\t\t<li className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t今後のログインには新しいメールアドレスを使用してください\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t重要な通知は新しいメールアドレスに送信されます\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\tセキュリティ設定の確認を勧めます\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"border-t-1 border-base-300 w-full mt-4\" />\n\n\t\t\t\t\t<button className=\"btn btn-neutral mt-4\" onClick={closeModal}>\n\t\t\t\t\t\t閉じる\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</section>\n\t);\n};\n\nexport default EmailChangeSuccess;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/Card.tsx"},"span":[1796,1861],"sourceCode":"import { TrendingDown, TrendingUp } from \"lucide-react\";\nimport { Link, useNavigate } from \"react-router\";\nimport type { CardProps } from \"../types/apiResponse\";\nimport OptimizedImage from \"./OptimizedImage\";\n\nconst Card = ({\n\tid,\n\tname,\n\timage,\n\tdescription,\n\tseason,\n\tprice,\n\trate,\n}: CardProps) => {\n\tconst navigation = useNavigate();\n\n\tconst handleClick = () => {\n\t\tnavigation(`/vegelist/${id}`);\n\t};\n\n\treturn (\n\t\t<Link to={`/vegelist/${id}`} className=\"container mx-auto px-2 block w-fit\">\n\t\t\t<div className=\"indicator card shadow-sm transition duration-200 ease-in-out transform hover:-translate-y-1 hover:shadow-lg\">\n\t\t\t\t{season && (\n\t\t\t\t\t<span className=\"indicator-item indicator-center sm:indicator-end  badge badge-accent transition animate-bounce\">\n\t\t\t\t\t\t旬の野菜\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t\t<div className=\"card bg-base-100 w-90 \">\n\t\t\t\t\t<figure>\n\t\t\t\t\t\t<OptimizedImage\n\t\t\t\t\t\t\tsrc={image}\n\t\t\t\t\t\t\talt={name}\n\t\t\t\t\t\t\tclassName=\"w-full h-60\"\n\t\t\t\t\t\t\twidth={360}\n\t\t\t\t\t\t\theight={240}\n\t\t\t\t\t\t\tquality={85}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</figure>\n\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t<h2 className=\"card-title\">{name}</h2>\n\t\t\t\t\t\t<div className=\"flex justify-between items-center gap-2\">\n\t\t\t\t\t\t\t<span className=\"text-xl\">{price}円/kg</span>\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-1\">\n\t\t\t\t\t\t\t\t{rate > 0 ? (\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center\">\n\t\t\t\t\t\t\t\t\t\t<TrendingUp className=\"text-red-500\" />\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-red-500\">{rate}%(先週比)</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center\">\n\t\t\t\t\t\t\t\t\t\t<TrendingDown className=\"text-green-500\" />\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-green-500\">{rate}%(先週比)</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p>{description}</p>\n\t\t\t\t\t\t<div className=\"card-actions justify-end\">\n\t\t\t\t\t\t\t<button onClick={handleClick} className=\"btn btn-primary w-full\">\n\t\t\t\t\t\t\t\t詳細を見る\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Link>\n\t);\n};\n\nexport default Card;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/EditFridgeItemForm.tsx"},"span":[1900,2057],"sourceCode":"import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { EditFridgeItemFormProps } from \"../types/apiResponse\";\n\nconst EditFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\tid,\n\titem,\n\thandleEdit,\n}: EditFridgeItemFormProps) => {\n\tconst [name, setName] = useState<string | undefined>(item?.name);\n\tconst [amount, setAmount] = useState<string | undefined>(\n\t\titem?.display_amount,\n\t);\n\tconst [category, setCategory] = useState<string | undefined>(item?.category);\n\tconst [date, setDate] = useState<Date | undefined>(\n\t\titem?.expire_date ? new Date(item.expire_date) : undefined,\n\t);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\tconsole.log(item);\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を編集</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"\"\n\t\t\t\t\t\t\tid=\"\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ anchorName: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ positionAnchor: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleEdit({ id, name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t更新\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default EditFridgeItemForm;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/EditFridgeItemForm.tsx"},"span":[2564,2609],"sourceCode":"import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { EditFridgeItemFormProps } from \"../types/apiResponse\";\n\nconst EditFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\tid,\n\titem,\n\thandleEdit,\n}: EditFridgeItemFormProps) => {\n\tconst [name, setName] = useState<string | undefined>(item?.name);\n\tconst [amount, setAmount] = useState<string | undefined>(\n\t\titem?.display_amount,\n\t);\n\tconst [category, setCategory] = useState<string | undefined>(item?.category);\n\tconst [date, setDate] = useState<Date | undefined>(\n\t\titem?.expire_date ? new Date(item.expire_date) : undefined,\n\t);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\tconsole.log(item);\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を編集</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"\"\n\t\t\t\t\t\t\tid=\"\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ anchorName: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ positionAnchor: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleEdit({ id, name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t更新\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default EditFridgeItemForm;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/EditFridgeItemForm.tsx"},"span":[2655,2765],"sourceCode":"import { ja } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { DayPicker } from \"react-day-picker\";\nimport type { EditFridgeItemFormProps } from \"../types/apiResponse\";\n\nconst EditFridgeItemForm = ({\n\tcloseModal,\n\tcategories,\n\tid,\n\titem,\n\thandleEdit,\n}: EditFridgeItemFormProps) => {\n\tconst [name, setName] = useState<string | undefined>(item?.name);\n\tconst [amount, setAmount] = useState<string | undefined>(\n\t\titem?.display_amount,\n\t);\n\tconst [category, setCategory] = useState<string | undefined>(item?.category);\n\tconst [date, setDate] = useState<Date | undefined>(\n\t\titem?.expire_date ? new Date(item.expire_date) : undefined,\n\t);\n\tconst itemCategories = categories.filter((ct) => ct.name !== \"全て\");\n\n\tconst handleDateChange = (selectedDate: Date) => {\n\t\tsetDate(selectedDate);\n\t};\n\tconsole.log(item);\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bg-base-100 p-6 rounded-lg min-w-sm md:min-w-md lg:min-w-lg shadow-lg\">\n\t\t\t\t<h2 className=\"text-lg font-bold mb-1\">食材を編集</h2>\n\t\t\t\t<p className=\"text-sm text-neutral-500 mb-4\">\n\t\t\t\t\t食材の情報を入力してください\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"flex flex-col space-y-6 mb-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"食材名\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"\"\n\t\t\t\t\t\t\tid=\"\"\n\t\t\t\t\t\t\tclassName=\"select w-full\"\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tonChange={(e) => setCategory(e.target.value)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{itemCategories.map(({ name }) => (\n\t\t\t\t\t\t\t\t<option key={name} value={name}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\t\tplaceholder=\"数量\"\n\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\tonChange={(e) => setAmount(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tpopoverTarget=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"input input-border w-full\"\n\t\t\t\t\t\t\tstyle={{ anchorName: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{date ? date.toLocaleDateString() : \"賞味期限を選択してください\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tpopover=\"auto\"\n\t\t\t\t\t\t\tid=\"rdp-popover\"\n\t\t\t\t\t\t\tclassName=\"dropdown\"\n\t\t\t\t\t\t\tstyle={{ positionAnchor: \"--rdp\" } as React.CSSProperties}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DayPicker\n\t\t\t\t\t\t\t\tclassName=\"react-day-picker\"\n\t\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\tonSelect={handleDateChange}\n\t\t\t\t\t\t\t\tlocale={ja}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"flex justify-end gap-4\">\n\t\t\t\t\t\t<button className=\"btn\" onClick={closeModal}>\n\t\t\t\t\t\t\tキャンセル\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\tonClick={() => handleEdit({ id, name, category, amount, date })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t更新\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default EditFridgeItemForm;\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"error","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/FoodStatus.tsx"},"span":[809,1090],"sourceCode":"import type { FoodStatusProps } from \"../types/apiResponse\";\n\nconst FoodStatus = ({\n\tfoodSelectedStatus,\n\tsetFoodSelectedStatus,\n\tstatus,\n\titems,\n}: FoodStatusProps) => {\n\tconst initialStatus = {\n\t\texpired: 0,\n\t\turgent: 0,\n\t\twarning: 0,\n\t\tsafe: 0,\n\t};\n\n\tconst foodStatusCount = items.reduce(\n\t\t(acc, item) => {\n\t\t\tconst status = item.attributes.expire_status;\n\t\t\tacc[status] += 1;\n\t\t\treturn acc;\n\t\t},\n\t\t{ ...initialStatus },\n\t);\n\n\tconst statusMap = {\n\t\texpired: { color: \"bg-error\", label: \"期限切れ\" },\n\t\turgent: { color: \"bg-accent\", label: \"期限間近\" },\n\t\twarning: { color: \"bg-warning\", label: \"注意\" },\n\t\tsafe: { color: \"bg-info\", label: \"安全\" },\n\t\tdefault: { color: \"bg-base-200\", label: \"総食材数\" },\n\t};\n\n\tconst { color, label } = statusMap[status] ?? statusMap.default;\n\n\treturn (\n\t\t<div\n\t\t\tclassName={`flex flex-col  items-center min-w-0 flex-1 border border-base-300 p-4 rounded-lg cursor-pointer transition transform hover:scale-105  hover:${color} hover:shadow-lg ${foodSelectedStatus === status && color}`}\n\t\t\tonClick={() => setFoodSelectedStatus(status)}\n\t\t>\n\t\t\t<p className=\"text-2xl\">{foodStatusCount[status] ?? items.length}</p>\n\t\t\t<span className=\"text-neutral-500 whitespace-nowrap text-xs\">\n\t\t\t\t{label}\n\t\t\t</span>\n\t\t</div>\n\t);\n};\n\nexport default FoodStatus;\n"},"tags":[],"source":null},{"category":"lint/a11y/noLabelWithoutControl","severity":"error","description":"A form label must be associated with an input.","message":[{"elements":[],"content":"A form label must be associated with an input."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider adding an accessible text content to the label element."}]]},{"log":["info",[{"elements":[],"content":"Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/Label.tsx"},"span":[210,356],"sourceCode":"import type { LabelHTMLAttributes } from \"react\";\n\ntype LabelProps = {\n\tclassName?: string;\n} & LabelHTMLAttributes<HTMLLabelElement>;\n\nconst Label = ({ className = \"\", ...props }: LabelProps) => {\n\treturn (\n\t\t<label\n\t\t\t{...props}\n\t\t\tclassName={`text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`}\n\t\t/>\n\t);\n};\n\nexport default Label;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"error","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[2097,2102],"sourceCode":"import type { RecipeImage, RecipeResponse } from \"../types/apiResponse\";\n\nconst GenerateRecipeArea = ({\n\trecipe,\n\trecipeImage,\n\tisSaving,\n\tisPending,\n\thandleClickSave,\n}: {\n\trecipe: RecipeResponse | null;\n\trecipeImage: RecipeImage | null;\n\tisSaving: boolean;\n\tisPending: boolean;\n\thandleClickSave: () => void;\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{recipe && (\n\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row lg:items-center\">\n\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-64 md:h-80 lg:h-140 mb-4 lg:mb-0\">\n\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full rounded-lg bg-base-200\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={handleClickSave}\n\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default GenerateRecipeArea;\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/GenerateRecipeArea.tsx"},"span":[2139,2144],"sourceCode":"import type { RecipeImage, RecipeResponse } from \"../types/apiResponse\";\n\nconst GenerateRecipeArea = ({\n\trecipe,\n\trecipeImage,\n\tisSaving,\n\tisPending,\n\thandleClickSave,\n}: {\n\trecipe: RecipeResponse | null;\n\trecipeImage: RecipeImage | null;\n\tisSaving: boolean;\n\tisPending: boolean;\n\thandleClickSave: () => void;\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{recipe && (\n\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row lg:items-center\">\n\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-64 md:h-80 lg:h-140 mb-4 lg:mb-0\">\n\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full rounded-lg bg-base-200\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={handleClickSave}\n\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default GenerateRecipeArea;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"error","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[2697,2702],"sourceCode":"import type { RecipeImage, RecipeResponse } from \"../types/apiResponse\";\n\nconst GenerateRecipeArea = ({\n\trecipe,\n\trecipeImage,\n\tisSaving,\n\tisPending,\n\thandleClickSave,\n}: {\n\trecipe: RecipeResponse | null;\n\trecipeImage: RecipeImage | null;\n\tisSaving: boolean;\n\tisPending: boolean;\n\thandleClickSave: () => void;\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{recipe && (\n\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row lg:items-center\">\n\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-64 md:h-80 lg:h-140 mb-4 lg:mb-0\">\n\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full rounded-lg bg-base-200\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={handleClickSave}\n\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default GenerateRecipeArea;\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/GenerateRecipeArea.tsx"},"span":[2727,2732],"sourceCode":"import type { RecipeImage, RecipeResponse } from \"../types/apiResponse\";\n\nconst GenerateRecipeArea = ({\n\trecipe,\n\trecipeImage,\n\tisSaving,\n\tisPending,\n\thandleClickSave,\n}: {\n\trecipe: RecipeResponse | null;\n\trecipeImage: RecipeImage | null;\n\tisSaving: boolean;\n\tisPending: boolean;\n\thandleClickSave: () => void;\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{recipe && (\n\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row lg:items-center\">\n\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-64 md:h-80 lg:h-140 mb-4 lg:mb-0\">\n\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full rounded-lg bg-base-200\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={handleClickSave}\n\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default GenerateRecipeArea;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/GenerateRecipeArea.tsx"},"span":[2971,3083],"sourceCode":"import type { RecipeImage, RecipeResponse } from \"../types/apiResponse\";\n\nconst GenerateRecipeArea = ({\n\trecipe,\n\trecipeImage,\n\tisSaving,\n\tisPending,\n\thandleClickSave,\n}: {\n\trecipe: RecipeResponse | null;\n\trecipeImage: RecipeImage | null;\n\tisSaving: boolean;\n\tisPending: boolean;\n\thandleClickSave: () => void;\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{recipe && (\n\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row lg:items-center\">\n\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-64 md:h-80 lg:h-140 mb-4 lg:mb-0\">\n\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full rounded-lg bg-base-200\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={handleClickSave}\n\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default GenerateRecipeArea;\n"},"tags":[],"source":null},{"category":"lint/a11y/noSvgWithoutTitle","severity":"error","description":"Alternative text title element cannot be empty","message":[{"elements":[],"content":"Alternative text "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element cannot be empty"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"For accessibility purposes, "},{"elements":["Emphasis"],"content":"SVGs"},{"elements":[],"content":" should have an alternative text, provided via "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element. If the svg element has role=\"img\", you should add the "},{"elements":["Emphasis"],"content":"aria-label"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"aria-labelledby"},{"elements":[],"content":" attribute."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/GoogleLoginButton.tsx"},"span":[1130,1264],"sourceCode":"import { useGoogleLogin } from \"@react-oauth/google\";\nimport { use } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport type { googleLoginResponse } from \"../types/apiResponse\";\nimport { api } from \"../utils/axios\";\n\nconst GoogleLoginButton = ({ text }: { text: string }) => {\n\tconst navigate = useNavigate();\n\tconst { setUser } = use(UserContext);\n\tconst login = useGoogleLogin({\n\t\tflow: \"auth-code\",\n\t\tredirect_uri: import.meta.env.VITE_GOOGLE_REDIRECT_URL,\n\t\tonSuccess: async (codeResponse) => {\n\t\t\tconst authCode = codeResponse.code;\n\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<googleLoginResponse>(\n\t\t\t\t\t\"/auth/google_login\",\n\t\t\t\t\t{\n\t\t\t\t\t\tcode: authCode,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tconsole.log(\"ログイン成功\", response.data);\n\t\t\t\tsetUser(response.data);\n\t\t\t\tnavigate(\"/vegelist\");\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(\"ログイン失敗\", err);\n\t\t\t}\n\t\t},\n\t\tonError: () => {\n\t\t\tconsole.error(\"ログインに失敗しました\");\n\t\t},\n\t});\n\treturn (\n\t\t<button\n\t\t\tclassName=\"btn bg-white text-black border-[#e5e5e5] w-full\"\n\t\t\tonClick={() => login()}\n\t\t>\n\t\t\t<svg\n\t\t\t\taria-label=\"Google logo\"\n\t\t\t\twidth=\"16\"\n\t\t\t\theight=\"16\"\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t>\n\t\t\t\t<g>\n\t\t\t\t\t<path d=\"m0 0H512V512H0\" fill=\"#fff\" />\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#34a853\"\n\t\t\t\t\t\td=\"M153 292c30 82 118 95 171 60h62v48A192 192 0 0190 341\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#4285f4\"\n\t\t\t\t\t\td=\"m386 400a140 175 0 0053-179H260v74h102q-7 37-38 57\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#fbbc02\"\n\t\t\t\t\t\td=\"m90 341a208 200 0 010-171l63 49q-12 37 0 73\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#ea4335\"\n\t\t\t\t\t\td=\"m153 219c22-69 116-109 179-50l55-54c-78-75-230-72-297 55\"\n\t\t\t\t\t/>\n\t\t\t\t</g>\n\t\t\t</svg>\n\t\t\t{text}\n\t\t</button>\n\t);\n};\n\nexport default GoogleLoginButton;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/GoogleLoginButton.tsx"},"span":[1025,1126],"sourceCode":"import { useGoogleLogin } from \"@react-oauth/google\";\nimport { use } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport type { googleLoginResponse } from \"../types/apiResponse\";\nimport { api } from \"../utils/axios\";\n\nconst GoogleLoginButton = ({ text }: { text: string }) => {\n\tconst navigate = useNavigate();\n\tconst { setUser } = use(UserContext);\n\tconst login = useGoogleLogin({\n\t\tflow: \"auth-code\",\n\t\tredirect_uri: import.meta.env.VITE_GOOGLE_REDIRECT_URL,\n\t\tonSuccess: async (codeResponse) => {\n\t\t\tconst authCode = codeResponse.code;\n\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<googleLoginResponse>(\n\t\t\t\t\t\"/auth/google_login\",\n\t\t\t\t\t{\n\t\t\t\t\t\tcode: authCode,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tconsole.log(\"ログイン成功\", response.data);\n\t\t\t\tsetUser(response.data);\n\t\t\t\tnavigate(\"/vegelist\");\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(\"ログイン失敗\", err);\n\t\t\t}\n\t\t},\n\t\tonError: () => {\n\t\t\tconsole.error(\"ログインに失敗しました\");\n\t\t},\n\t});\n\treturn (\n\t\t<button\n\t\t\tclassName=\"btn bg-white text-black border-[#e5e5e5] w-full\"\n\t\t\tonClick={() => login()}\n\t\t>\n\t\t\t<svg\n\t\t\t\taria-label=\"Google logo\"\n\t\t\t\twidth=\"16\"\n\t\t\t\theight=\"16\"\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t>\n\t\t\t\t<g>\n\t\t\t\t\t<path d=\"m0 0H512V512H0\" fill=\"#fff\" />\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#34a853\"\n\t\t\t\t\t\td=\"M153 292c30 82 118 95 171 60h62v48A192 192 0 0190 341\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#4285f4\"\n\t\t\t\t\t\td=\"m386 400a140 175 0 0053-179H260v74h102q-7 37-38 57\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#fbbc02\"\n\t\t\t\t\t\td=\"m90 341a208 200 0 010-171l63 49q-12 37 0 73\"\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"#ea4335\"\n\t\t\t\t\t\td=\"m153 219c22-69 116-109 179-50l55-54c-78-75-230-72-297 55\"\n\t\t\t\t\t/>\n\t\t\t\t</g>\n\t\t\t</svg>\n\t\t\t{text}\n\t\t</button>\n\t);\n};\n\nexport default GoogleLoginButton;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/PaginationButtons.tsx"},"span":[554,702],"sourceCode":"import { useSearchParams } from \"react-router\";\n\nconst PaginationButtons = ({\n\ttotalPages,\n\tcurrentPage,\n}: { totalPages: number; currentPage: number }) => {\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\n\tconst handleMove = (newPage: number) => {\n\t\tsetSearchParams((prev) => {\n\t\t\tconst newParams = new URLSearchParams(prev);\n\t\t\tnewParams.set(\"page\", newPage.toString());\n\t\t\treturn newParams;\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"flex justify-center join my-8\">\n\t\t\t{Array.from({ length: totalPages }, (v, i) => i + 1).map((page) => (\n\t\t\t\t<button\n\t\t\t\t\tkey={page}\n\t\t\t\t\tclassName={`join-item btn ${currentPage + 1 === page ? \"btn-active\" : \"\"}`}\n\t\t\t\t\tonClick={() => handleMove(page)}\n\t\t\t\t>\n\t\t\t\t\t{page}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default PaginationButtons;\n"},"tags":[],"source":null},{"category":"lint/complexity/noForEach","severity":"error","description":"Prefer for...of instead of forEach.","message":[{"elements":[],"content":"Prefer "},{"elements":["Emphasis"],"content":"for...of"},{"elements":[],"content":" instead of "},{"elements":["Emphasis"],"content":"forEach"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"forEach"},{"elements":[],"content":" may lead to performance issues when working with large arrays. When combined with functions like "},{"elements":["Emphasis"],"content":"filter"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"map"},{"elements":[],"content":", this causes multiple iterations over the same type."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/PriceChart.tsx"},"span":[635,827],"sourceCode":"import { format, parseISO } from \"date-fns\";\nimport ja from \"date-fns/locale/ja\";\nimport { Activity, ArchiveIcon, ChartColumnIncreasing } from \"lucide-react\";\nimport {\n\tCartesianGrid,\n\tLine,\n\tLineChart,\n\tResponsiveContainer,\n\tTooltip,\n\tXAxis,\n\tYAxis,\n} from \"recharts\";\n\ntype Price = {\n\tmonth: string;\n\taverage_price: number;\n};\n\ntype PriceChartProps = {\n\tprices: Price[];\n};\n\n//インデックスシグネチャ\ntype YearlyPrice = {\n\tmonth: string;\n\t[year: string]: number | string;\n};\n\nconst PriceChart = ({ prices }: PriceChartProps) => {\n\tconsole.log(\"price\", prices);\n\n\tconst groupedData: { [month: string]: YearlyPrice } = {};\n\n\tprices.forEach(({ month, average_price }) => {\n\t\tconst [year, mon] = month.split(\"-\");\n\t\tif (!groupedData[mon]) groupedData[mon] = { month: mon };\n\t\tgroupedData[mon][year] = average_price;\n\t});\n\tconsole.log(\"group:\", groupedData);\n\n\tconst chartData: YearlyPrice[] = Object.values(groupedData).sort(\n\t\t(a, b) => Number.parseInt(a.month) - Number.parseInt(b.month),\n\t);\n\tconsole.log(\"chart:\", chartData);\n\n\treturn (\n\t\t<main className=\"md:p-6 mt-4 rounded-2xl shadow-md overflow-x-auto\">\n\t\t\t<h1 className=\"text-xl mb-4 text-primary font-semibold flex gap-2 items-center\">\n\t\t\t\t<Activity className=\"w-5 h-5 text-primary\" />\n\t\t\t\t年度別価格推移\n\t\t\t</h1>\n\t\t\t<div className=\"min-w-lg\">\n\t\t\t\t<ResponsiveContainer width=\"100%\" height={300}>\n\t\t\t\t\t<LineChart data={chartData}>\n\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t\t<XAxis\n\t\t\t\t\t\t\tdataKey=\"month\"\n\t\t\t\t\t\t\ttickFormatter={(monthStr) => `${Number.parseInt(monthStr)}月`}\n\t\t\t\t\t\t\ttick={{ fontSize: 12 }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<YAxis\n\t\t\t\t\t\t\tdomain={[\"dataMin - 10\", \"dataMax + 10\"]}\n\t\t\t\t\t\t\ttick={{ fontSize: 12 }}\n\t\t\t\t\t\t\ttickLine={false}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\tformatter={(value, name) => [`${value}円`, `${name}年`]}\n\t\t\t\t\t\t\tlabelFormatter={(label) => `${Number.parseInt(label)}月`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Line\n\t\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\t\tdataKey=\"2024\"\n\t\t\t\t\t\t\tstroke=\"oklch(55.6% 0 0)\"\n\t\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\t\tname=\"2024\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Line\n\t\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\t\tdataKey=\"2025\"\n\t\t\t\t\t\t\tstroke=\"oklch(0.5892 0.199 134.6)\"\n\t\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\t\tname=\"2025\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</LineChart>\n\t\t\t\t</ResponsiveContainer>\n\t\t\t</div>\n\t\t</main>\n\t);\n};\n\nexport default PriceChart;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/RecipeGenerator.tsx"},"span":[1041,1099],"sourceCode":"import { ChefHat } from \"lucide-react\";\nimport { useContext } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\n\ntype Props = {\n\tvegetableName: string;\n\tid: number;\n};\n\nconst RecipeGenerator = ({ vegetableName, id }: Props) => {\n\tconst navigate = useNavigate();\n\tconst { user } = useContext(UserContext);\n\n\tconst handleClick = (): void => {\n\t\tif (!user) {\n\t\t\ttoast.error(\"レシピ機能をご利用いただくにはログインが必要です\");\n\t\t\tnavigate(\"/login\");\n\t\t\treturn;\n\t\t}\n\n\t\tnavigate(\"/recipe-generator\", { state: { selectedVegetableId: id } });\n\t};\n\n\treturn (\n\t\t<div className=\"p-6 mt-4 rounded-2xl shadow-lg space-y-4\">\n\t\t\t<h2 className=\"text-xl font-semibold text-primary flex items-center gap-2\">\n\t\t\t\t<ChefHat className=\"w-5 h-5 text-primary\" />\n\t\t\t\t{vegetableName}を使ったレシピ\n\t\t\t</h2>\n\t\t\t<p>AIが{vegetableName}を使ったおすすめレシピを提案します。</p>\n\t\t\t<div className=\"text-center mt-10\">\n\t\t\t\t<button onClick={handleClick} className=\"btn btn-neutral\">\n\t\t\t\t\t{vegetableName}のレシピ提案を見る\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default RecipeGenerator;\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"error","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/RecipeCard.tsx"},"span":[865,918],"sourceCode":"import { Clock, Trash2, User } from \"lucide-react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useNavigate } from \"react-router\";\nimport type { RecipeCardProps } from \"../types/apiResponse\";\nimport { api } from \"../utils/axios\";\n\nconst RecipeCard = ({\n\tid,\n\ttitle,\n\tinstructions,\n\tcookingTime,\n\tservings,\n\tsetRecipes,\n\timage,\n\tcategory,\n}: RecipeCardProps) => {\n\tconst handleClickDelete = async (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\te.stopPropagation();\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tawait api.delete<{ message: string }>(`/recipes/${id}`);\n\t\t\tsetRecipes((prevRecipes) =>\n\t\t\t\tprevRecipes.filter((recipe) => recipe.id !== id),\n\t\t\t);\n\t\t\ttoast.success(\"レシピを削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"レシピの削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst navigate = useNavigate();\n\n\treturn (\n\t\t<div onClick={() => navigate(`/recipe-lists/${id}`)}>\n\t\t\t<div className=\"cursor-pointer w-90 card shadow-sm transition-transform duration-200 ease-in-out transform hover:-translate-y-1 hover:shadow-lg\">\n\t\t\t\t<figure>\n\t\t\t\t\t<img src={image} alt=\"料理画像\" className=\"aspect-square w-full\" />\n\t\t\t\t</figure>\n\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t<h2 className=\"card-title line-clamp-1\">{title}</h2>\n\t\t\t\t\t<div className=\"flex gap-1 flex-nowrap\">\n\t\t\t\t\t\t<span className=\"badge badge-secondary line-clamp-1\">\n\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"badge badge-secondary flex items-center line-clamp-1\">\n\t\t\t\t\t\t\t<Clock size={15} />\n\t\t\t\t\t\t\t{cookingTime}分\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"badge badge-secondary flex items-center line-clamp-1\">\n\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t{servings}人分\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<p className=\"text-neutral-500 line-clamp-2\">{instructions}</p>\n\t\t\t\t\t<div className=\"card-actions items-center justify-end\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={handleClickDelete}\n\t\t\t\t\t\t\tclassName=\"btn btn-error flex items-center gap-1\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Trash2 size={20} />\n\t\t\t\t\t\t\t<span>削除する</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default RecipeCard;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/RecipeCard.tsx"},"span":[1834,1941],"sourceCode":"import { Clock, Trash2, User } from \"lucide-react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useNavigate } from \"react-router\";\nimport type { RecipeCardProps } from \"../types/apiResponse\";\nimport { api } from \"../utils/axios\";\n\nconst RecipeCard = ({\n\tid,\n\ttitle,\n\tinstructions,\n\tcookingTime,\n\tservings,\n\tsetRecipes,\n\timage,\n\tcategory,\n}: RecipeCardProps) => {\n\tconst handleClickDelete = async (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\te.stopPropagation();\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tawait api.delete<{ message: string }>(`/recipes/${id}`);\n\t\t\tsetRecipes((prevRecipes) =>\n\t\t\t\tprevRecipes.filter((recipe) => recipe.id !== id),\n\t\t\t);\n\t\t\ttoast.success(\"レシピを削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"レシピの削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst navigate = useNavigate();\n\n\treturn (\n\t\t<div onClick={() => navigate(`/recipe-lists/${id}`)}>\n\t\t\t<div className=\"cursor-pointer w-90 card shadow-sm transition-transform duration-200 ease-in-out transform hover:-translate-y-1 hover:shadow-lg\">\n\t\t\t\t<figure>\n\t\t\t\t\t<img src={image} alt=\"料理画像\" className=\"aspect-square w-full\" />\n\t\t\t\t</figure>\n\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t<h2 className=\"card-title line-clamp-1\">{title}</h2>\n\t\t\t\t\t<div className=\"flex gap-1 flex-nowrap\">\n\t\t\t\t\t\t<span className=\"badge badge-secondary line-clamp-1\">\n\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"badge badge-secondary flex items-center line-clamp-1\">\n\t\t\t\t\t\t\t<Clock size={15} />\n\t\t\t\t\t\t\t{cookingTime}分\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"badge badge-secondary flex items-center line-clamp-1\">\n\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t{servings}人分\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<p className=\"text-neutral-500 line-clamp-2\">{instructions}</p>\n\t\t\t\t\t<div className=\"card-actions items-center justify-end\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={handleClickDelete}\n\t\t\t\t\t\t\tclassName=\"btn btn-error flex items-center gap-1\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Trash2 size={20} />\n\t\t\t\t\t\t\t<span>削除する</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default RecipeCard;\n"},"tags":[],"source":null},{"category":"lint/a11y/noSvgWithoutTitle","severity":"error","description":"Alternative text title element cannot be empty","message":[{"elements":[],"content":"Alternative text "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element cannot be empty"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"For accessibility purposes, "},{"elements":["Emphasis"],"content":"SVGs"},{"elements":[],"content":" should have an alternative text, provided via "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element. If the svg element has role=\"img\", you should add the "},{"elements":["Emphasis"],"content":"aria-label"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"aria-labelledby"},{"elements":[],"content":" attribute."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/Navibar.tsx"},"span":[3314,3429],"sourceCode":"import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"error","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/Navibar.tsx"},"span":[5135,5281],"sourceCode":"import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"},"tags":[],"source":null},{"category":"lint/style/noCommaOperator","severity":"error","description":"The comma operator is disallowed.","message":[{"elements":[],"content":"The comma operator is disallowed."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Its use is often confusing and obscures side effects."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/Navibar.tsx"},"span":[5238,5239],"sourceCode":"import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"},"tags":[],"source":null},{"category":"lint/style/noCommaOperator","severity":"error","description":"The comma operator is disallowed.","message":[{"elements":[],"content":"The comma operator is disallowed."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Its use is often confusing and obscures side effects."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/Navibar.tsx"},"span":[5450,5451],"sourceCode":"import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"error","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/Navibar.tsx"},"span":[7794,7858],"sourceCode":"import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/Navibar.tsx"},"span":[2788,2848],"sourceCode":"import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/Navibar.tsx"},"span":[3083,3308],"sourceCode":"import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/Navibar.tsx"},"span":[5390,5626],"sourceCode":"import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/Navibar.tsx"},"span":[7961,8141],"sourceCode":"import axios from \"axios\";\nimport {\n\tBookOpen,\n\tChefHat,\n\tLeaf,\n\tLogIn,\n\tLogOut,\n\tRefrigerator,\n\tShoppingCart,\n\tUser,\n\tUserPlus,\n} from \"lucide-react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLocation, useNavigate } from \"react-router\";\nimport { UserContext } from \"../context/UserContext\";\nimport useModal from \"../hooks/useModal\";\nimport { api } from \"../utils/axios\";\nimport AccountSetting from \"./AccountSetting\";\nimport Spinner from \"./Spinner\";\n\nconst Navibar = () => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isLoggingOut, setIsLoggingOut] = useState(false);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst menuRef = useRef<HTMLUListElement>(null);\n\n\tconst { user, setUser, loading } = useContext(UserContext);\n\n\t// 現在のページがアクティブかどうかを判定\n\tconst isActivePage = (path: string) => location.pathname === path;\n\n\t// アクティブページのスタイルを生成（モバイル用）\n\tconst getActivePageStyle = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\";\n\t\tconst activeStyle = \"bg-primary/20 text-primary-content font-semibold\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// PC画面用のアクティブページスタイル（より目立つデザイン）\n\tconst getActivePageStylePC = (path: string) => {\n\t\tconst baseStyle =\n\t\t\t\"flex items-center gap-x-1 hover:bg-primary-focus/20 transition-all duration-200 px-4 py-2 rounded-lg\";\n\t\tconst activeStyle =\n\t\t\t\"bg-base-100 text-base-content font-bold shadow-lg border-2 border-base-300\";\n\t\treturn `${baseStyle} ${isActivePage(path) ? activeStyle : \"\"}`;\n\t};\n\n\t// 外側クリックでメニューを閉じる\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\n\t\tif (isOpen) {\n\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, [isOpen]);\n\n\tconst handleLogout = async () => {\n\t\tif (isLoggingOut) return;\n\n\t\tsetIsLoggingOut(true);\n\t\ttry {\n\t\t\tawait api.post(\"/logout\");\n\t\t\tsetUser(null);\n\t\t\tnavigate(\"/\");\n\t\t\ttoast.success(\"ログアウトしました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ログアウトエラー:\", error);\n\t\t\ttoast.error(\"ログアウトに失敗しました\");\n\t\t} finally {\n\t\t\tsetIsLoggingOut(false);\n\t\t}\n\t};\n\n\tif (loading) return <Spinner />;\n\n\treturn (\n\t\t<div className=\"navbar bg-primary text-primary-content\">\n\t\t\t<div className=\"navbar-start\">\n\t\t\t\t<button className=\"btn btn-ghost text-xl flex items-center\">\n\t\t\t\t\t<img className=\"block w-8 h-8 \" src=\"/vegege.png\" alt=\"\" />\n\t\t\t\t\t<Link to=\"/\">VegeGuide</Link>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{/* モバイル用　：　ハンバーガー */}\n\t\t\t<div className=\"navbar-end lg:hidden relative\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn btn-ghost\"\n\t\t\t\t\tonClick={() => setIsOpen(!isOpen)}\n\t\t\t\t\taria-label={isOpen ? \"メニューを閉じる\" : \"メニューを開く\"}\n\t\t\t\t\taria-expanded={isOpen}\n\t\t\t\t\taria-controls=\"mobile-menu\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\tviewBox=\"0 0 512 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<ul\n\t\t\t\t\t\tref={menuRef}\n\t\t\t\t\t\tid=\"mobile-menu\"\n\t\t\t\t\t\tclassName={`menu absolute right-0 top-full mt-2 z-[50] p-2 shadow bg-base-100 rounded-box w-40 transition-all transform ${isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/vegelist\"\n\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/vegelist\")}\n\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\topenModal(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleLogout(), setIsOpen(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!user && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/signup\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\t\t\t\t\tclassName={getActivePageStyle(\"/login\")}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* PC画面用 */}\n\t\t\t<div className=\"navbar-center hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/vegelist\" className={getActivePageStylePC(\"/vegelist\")}>\n\t\t\t\t\t\t\t<Leaf size={15} />\n\t\t\t\t\t\t\t野菜一覧\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{user?.name && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-generator\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-generator\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChefHat size={15} />\n\t\t\t\t\t\t\t\t\tレシピ提案\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/recipe-lists\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/recipe-lists\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<BookOpen size={15} />\n\t\t\t\t\t\t\t\t\tレシピ一覧\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/shoppinglist\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/shoppinglist\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ShoppingCart size={15} />\n\t\t\t\t\t\t\t\t\t買い物リスト\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto=\"/fridge-items\"\n\t\t\t\t\t\t\t\t\tclassName={getActivePageStylePC(\"/fridge-items\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Refrigerator size={15} />\n\t\t\t\t\t\t\t\t\t冷蔵庫\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className=\"navbar-end hidden lg:flex\">\n\t\t\t\t<ul className=\"menu menu-horizontal\">\n\t\t\t\t\t{user?.name ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<span className=\"flex items-center gap-x-1\" onClick={openModal}>\n\t\t\t\t\t\t\t\t\t<User size={15} />\n\t\t\t\t\t\t\t\t\tマイページ\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-x-1 hover:bg-primary/10 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoggingOut}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"loading loading-spinner loading-xs\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<LogOut size={15} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{isLoggingOut ? \"ログアウト中...\" : \"ログアウト\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup\" className={getActivePageStylePC(\"/signup\")}>\n\t\t\t\t\t\t\t\t\t<UserPlus size={15} />\n\t\t\t\t\t\t\t\t\t新規登録\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\" className={getActivePageStylePC(\"/login\")}>\n\t\t\t\t\t\t\t\t\t<LogIn size={15} />\n\t\t\t\t\t\t\t\t\tログイン\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Modal>\n\t\t\t\t<AccountSetting\n\t\t\t\t\tname={user?.name}\n\t\t\t\t\temail={user?.email}\n\t\t\t\t\tgoogle_account={user?.google_account}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default Navibar;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/components/ShoppingCard.tsx"},"span":[1681,1815],"sourceCode":"import axios from \"axios\";\nimport { SquarePen, Trash2 } from \"lucide-react\";\nimport toast from \"react-hot-toast\";\nimport { Link } from \"react-router\";\nimport type { ShoppingCardProps } from \"../types/apiResponse\";\nimport { api } from \"../utils/axios\";\n\nconst ShoppingCard = ({\n\tid,\n\ttitle,\n\ttime,\n\titems,\n\tsetLists,\n}: ShoppingCardProps) => {\n\tconst check = items.filter((item) => item.checked);\n\n\tconst handleDestroy = async (\n\t\te: React.MouseEvent<HTMLButtonElement>,\n\t\tid: number,\n\t) => {\n\t\te.stopPropagation();\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tawait api.delete<{ status: string; message: string }>(\n\t\t\t\t`/shopping_lists/${id}`,\n\t\t\t);\n\t\t\tsetLists((prevList) => prevList.filter((list) => list.id !== id));\n\t\t\ttoast.success(\"買い物リストを削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\ttoast.error(\"買い物リストの削除に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<Link to={`/shoppinglist/${id}`}>\n\t\t\t<div className=\"card w-90 shadow-sm transition transform hover:-translate-y-1 hover:shadow-lg\">\n\t\t\t\t<div className=\"card-body space-y-2\">\n\t\t\t\t\t<h2 className=\"card-title line-clamp-1\">{title}</h2>\n\t\t\t\t\t<p className=\"text-sm text-neutral-500\">作成日: {time}</p>\n\t\t\t\t\t<div className=\"flex justify-between text-sm\">\n\t\t\t\t\t\t<span>合計アイテム: {items.length}</span>\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-primary badge-outline\"}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<progress\n\t\t\t\t\t\tclassName=\"progress progress-primary w-full\"\n\t\t\t\t\t\tvalue={check.length}\n\t\t\t\t\t\tmax={items.length}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<div className=\"flex justify-end\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={(e) => handleDestroy(e, id)}\n\t\t\t\t\t\t\tclassName=\"mt-2 btn btn-outline btn-error flex items-center gap-2\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Trash2 />\n\t\t\t\t\t\t\t<span>削除する</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Link>\n\t);\n};\n\nexport default ShoppingCard;\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"error","description":"This hook does not specify all of its dependencies: location.pathname","message":[{"elements":[],"content":"This hook does not specify all of its dependencies: location.pathname"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This dependency is not specified in the hook dependency list."}]]},{"frame":{"path":null,"span":[952,969],"sourceCode":"import { AxiosError } from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router\";\nimport { api } from \"../utils/axios\";\n\ninterface EmailChangeResponse {\n\tmessage: string;\n\temail: string;\n}\n\ninterface UseEmailChangeConfirmationReturn {\n\temail: string;\n}\n\nexport const useEmailChangeConfirmation = (\n\topenModal: () => void,\n): UseEmailChangeConfirmationReturn => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [email, setEmail] = useState<string>(\"\");\n\n\tuseEffect(() => {\n\t\tconst confirmEmailChange = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tconst params = new URLSearchParams(location.search);\n\t\t\t\tconst token = params.get(\"token\");\n\n\t\t\t\tif (token) {\n\t\t\t\t\tconst response = await api.get<EmailChangeResponse>(\n\t\t\t\t\t\t\"/email_change_requests/confirm\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparams: { token },\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tsetEmail(response.data.email);\n\t\t\t\t\topenModal();\n\t\t\t\t\tnavigate(location.pathname, { replace: true });\n\t\t\t\t}\n\t\t\t} catch (err: unknown) {\n\t\t\t\tif (err instanceof AxiosError) {\n\t\t\t\t\tconsole.error(err.message);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconfirmEmailChange();\n\t}, [location.search, navigate, openModal]);\n\n\treturn { email };\n};\n"}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/hooks/useEmailChangeConfirmation.ts"},"span":[536,545],"sourceCode":"import { AxiosError } from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router\";\nimport { api } from \"../utils/axios\";\n\ninterface EmailChangeResponse {\n\tmessage: string;\n\temail: string;\n}\n\ninterface UseEmailChangeConfirmationReturn {\n\temail: string;\n}\n\nexport const useEmailChangeConfirmation = (\n\topenModal: () => void,\n): UseEmailChangeConfirmationReturn => {\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\tconst [email, setEmail] = useState<string>(\"\");\n\n\tuseEffect(() => {\n\t\tconst confirmEmailChange = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tconst params = new URLSearchParams(location.search);\n\t\t\t\tconst token = params.get(\"token\");\n\n\t\t\t\tif (token) {\n\t\t\t\t\tconst response = await api.get<EmailChangeResponse>(\n\t\t\t\t\t\t\"/email_change_requests/confirm\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparams: { token },\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tsetEmail(response.data.email);\n\t\t\t\t\topenModal();\n\t\t\t\t\tnavigate(location.pathname, { replace: true });\n\t\t\t\t}\n\t\t\t} catch (err: unknown) {\n\t\t\t\tif (err instanceof AxiosError) {\n\t\t\t\t\tconsole.error(err.message);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconfirmEmailChange();\n\t}, [location.search, navigate, openModal]);\n\n\treturn { email };\n};\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"error","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/hooks/useModal.tsx"},"span":[694,788],"sourceCode":"import { type ReactNode, useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst useModal = () => {\n\tconst [show, setShow] = useState<boolean>(false);\n\n\tconst openModal = () => setShow(true);\n\tconst closeModal = () => setShow(false);\n\n\tuseEffect(() => {\n\t\tif (show) {\n\t\t\tdocument.body.classList.add(\"overflow-hidden\");\n\t\t} else {\n\t\t\tdocument.body.classList.remove(\"overflow-hidden\");\n\t\t}\n\n\t\treturn () => {\n\t\t\tdocument.body.classList.remove(\"overflow-hidden\");\n\t\t};\n\t}, [show]);\n\n\tconst Modal = ({ children }: { children: ReactNode }) => {\n\t\tif (!show) return null;\n\t\treturn createPortal(\n\t\t\t<div className=\"fixed inset-0 flex justify-center items-center z-50\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"fixed inset-0 bg-neutral-700 opacity-50\"\n\t\t\t\t\tonClick={closeModal}\n\t\t\t\t/>\n\t\t\t\t<div className=\"relative z-10\">{children}</div>\n\t\t\t</div>,\n\t\t\tdocument.getElementById(\"root\"),\n\t\t);\n\t};\n\n\treturn { Modal, openModal, closeModal };\n};\n\nexport default useModal;\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"error","description":"This hook does not specify all of its dependencies: fetchUser","message":[{"elements":[],"content":"This hook does not specify all of its dependencies: fetchUser"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This dependency is not specified in the hook dependency list."}]]},{"frame":{"path":null,"span":[1037,1046],"sourceCode":"import type React from \"react\";\nimport { createContext, useEffect, useState } from \"react\";\nimport { api } from \"../utils/axios\";\n\ninterface UserProps {\n\tlogged_in?: boolean;\n\tname: string;\n\temail: string;\n\tgoogle_account?: boolean;\n\tstatus?: string;\n}\n\ninterface UserContextType {\n\tuser: UserProps | null;\n\tsetUser: React.Dispatch<React.SetStateAction<UserProps | null>>;\n\tloading: boolean;\n\tfetchUser: () => Promise<void>;\n}\n\nexport const UserContext = createContext<UserContextType | undefined>(\n\tundefined,\n);\n\nexport const UserProvider = ({ children }: { children: React.ReactNode }) => {\n\tconst [user, setUser] = useState<UserProps | null>(null);\n\tconst [loading, setLoading] = useState<boolean>(true);\n\n\tconst fetchUser = async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.get<UserProps>(\"/check_login_status\");\n\t\t\tif (response.data.logged_in) {\n\t\t\t\tsetUser(response.data);\n\t\t\t} else {\n\t\t\t\tsetUser(null);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tsetUser(null);\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tfetchUser();\n\t}, []);\n\n\treturn (\n\t\t<UserContext value={{ user, setUser, loading, fetchUser }}>\n\t\t\t{children}\n\t\t</UserContext>\n\t);\n};\n"}},{"log":["info",[{"elements":[],"content":"Either include it or remove the dependency array"}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/context/UserContext.tsx"},"span":[1017,1026],"sourceCode":"import type React from \"react\";\nimport { createContext, useEffect, useState } from \"react\";\nimport { api } from \"../utils/axios\";\n\ninterface UserProps {\n\tlogged_in?: boolean;\n\tname: string;\n\temail: string;\n\tgoogle_account?: boolean;\n\tstatus?: string;\n}\n\ninterface UserContextType {\n\tuser: UserProps | null;\n\tsetUser: React.Dispatch<React.SetStateAction<UserProps | null>>;\n\tloading: boolean;\n\tfetchUser: () => Promise<void>;\n}\n\nexport const UserContext = createContext<UserContextType | undefined>(\n\tundefined,\n);\n\nexport const UserProvider = ({ children }: { children: React.ReactNode }) => {\n\tconst [user, setUser] = useState<UserProps | null>(null);\n\tconst [loading, setLoading] = useState<boolean>(true);\n\n\tconst fetchUser = async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.get<UserProps>(\"/check_login_status\");\n\t\t\tif (response.data.logged_in) {\n\t\t\t\tsetUser(response.data);\n\t\t\t} else {\n\t\t\t\tsetUser(null);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tsetUser(null);\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tfetchUser();\n\t}, []);\n\n\treturn (\n\t\t<UserContext value={{ user, setUser, loading, fetchUser }}>\n\t\t\t{children}\n\t\t</UserContext>\n\t);\n};\n"},"tags":[],"source":null},{"category":"lint/complexity/noForEach","severity":"error","description":"Prefer for...of instead of forEach.","message":[{"elements":[],"content":"Prefer "},{"elements":["Emphasis"],"content":"for...of"},{"elements":[],"content":" instead of "},{"elements":["Emphasis"],"content":"forEach"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"forEach"},{"elements":[],"content":" may lead to performance issues when working with large arrays. When combined with functions like "},{"elements":["Emphasis"],"content":"filter"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"map"},{"elements":[],"content":", this causes multiple iterations over the same type."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/hooks/useScrollAnimation.ts"},"span":[176,345],"sourceCode":"import { useEffect } from \"react\";\n\nexport const useScrollAnimation = (options = {}) => {\n\tuseEffect(() => {\n\t\tconst observer = new IntersectionObserver(\n\t\t\t(entries) => {\n\t\t\t\tentries.forEach((entry) => {\n\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tentry.target.classList.add(\"animate-fade-up\");\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t{\n\t\t\t\tthreshold: 0.15,\n\t\t\t\trootMargin: \"-40px 0px\",\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\n\t\tconst targets = document.querySelectorAll(\".scroll-animation-target\");\n\t\ttargets.forEach((target) => observer.observe(target));\n\n\t\treturn () => {\n\t\t\ttargets.forEach((target) => observer.unobserve(target));\n\t\t\tobserver.disconnect();\n\t\t};\n\t}, []);\n};\n"},"tags":[],"source":null},{"category":"lint/complexity/noForEach","severity":"error","description":"Prefer for...of instead of forEach.","message":[{"elements":[],"content":"Prefer "},{"elements":["Emphasis"],"content":"for...of"},{"elements":[],"content":" instead of "},{"elements":["Emphasis"],"content":"forEach"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"forEach"},{"elements":[],"content":" may lead to performance issues when working with large arrays. When combined with functions like "},{"elements":["Emphasis"],"content":"filter"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"map"},{"elements":[],"content":", this causes multiple iterations over the same type."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/hooks/useScrollAnimation.ts"},"span":[511,564],"sourceCode":"import { useEffect } from \"react\";\n\nexport const useScrollAnimation = (options = {}) => {\n\tuseEffect(() => {\n\t\tconst observer = new IntersectionObserver(\n\t\t\t(entries) => {\n\t\t\t\tentries.forEach((entry) => {\n\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tentry.target.classList.add(\"animate-fade-up\");\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t{\n\t\t\t\tthreshold: 0.15,\n\t\t\t\trootMargin: \"-40px 0px\",\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\n\t\tconst targets = document.querySelectorAll(\".scroll-animation-target\");\n\t\ttargets.forEach((target) => observer.observe(target));\n\n\t\treturn () => {\n\t\t\ttargets.forEach((target) => observer.unobserve(target));\n\t\t\tobserver.disconnect();\n\t\t};\n\t}, []);\n};\n"},"tags":[],"source":null},{"category":"lint/complexity/noForEach","severity":"error","description":"Prefer for...of instead of forEach.","message":[{"elements":[],"content":"Prefer "},{"elements":["Emphasis"],"content":"for...of"},{"elements":[],"content":" instead of "},{"elements":["Emphasis"],"content":"forEach"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"forEach"},{"elements":[],"content":" may lead to performance issues when working with large arrays. When combined with functions like "},{"elements":["Emphasis"],"content":"filter"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"map"},{"elements":[],"content":", this causes multiple iterations over the same type."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/hooks/useScrollAnimation.ts"},"span":[587,642],"sourceCode":"import { useEffect } from \"react\";\n\nexport const useScrollAnimation = (options = {}) => {\n\tuseEffect(() => {\n\t\tconst observer = new IntersectionObserver(\n\t\t\t(entries) => {\n\t\t\t\tentries.forEach((entry) => {\n\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tentry.target.classList.add(\"animate-fade-up\");\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t{\n\t\t\t\tthreshold: 0.15,\n\t\t\t\trootMargin: \"-40px 0px\",\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\n\t\tconst targets = document.querySelectorAll(\".scroll-animation-target\");\n\t\ttargets.forEach((target) => observer.observe(target));\n\n\t\treturn () => {\n\t\t\ttargets.forEach((target) => observer.unobserve(target));\n\t\t\tobserver.disconnect();\n\t\t};\n\t}, []);\n};\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"error","description":"This hook does not specify all of its dependencies: options","message":[{"elements":[],"content":"This hook does not specify all of its dependencies: options"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This dependency is not specified in the hook dependency list."}]]},{"frame":{"path":null,"span":[415,422],"sourceCode":"import { useEffect } from \"react\";\n\nexport const useScrollAnimation = (options = {}) => {\n\tuseEffect(() => {\n\t\tconst observer = new IntersectionObserver(\n\t\t\t(entries) => {\n\t\t\t\tentries.forEach((entry) => {\n\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tentry.target.classList.add(\"animate-fade-up\");\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t{\n\t\t\t\tthreshold: 0.15,\n\t\t\t\trootMargin: \"-40px 0px\",\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\n\t\tconst targets = document.querySelectorAll(\".scroll-animation-target\");\n\t\ttargets.forEach((target) => observer.observe(target));\n\n\t\treturn () => {\n\t\t\ttargets.forEach((target) => observer.unobserve(target));\n\t\t\tobserver.disconnect();\n\t\t};\n\t}, []);\n};\n"}},{"log":["info",[{"elements":[],"content":"Either include it or remove the dependency array"}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/hooks/useScrollAnimation.ts"},"span":[91,100],"sourceCode":"import { useEffect } from \"react\";\n\nexport const useScrollAnimation = (options = {}) => {\n\tuseEffect(() => {\n\t\tconst observer = new IntersectionObserver(\n\t\t\t(entries) => {\n\t\t\t\tentries.forEach((entry) => {\n\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tentry.target.classList.add(\"animate-fade-up\");\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t{\n\t\t\t\tthreshold: 0.15,\n\t\t\t\trootMargin: \"-40px 0px\",\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\n\t\tconst targets = document.querySelectorAll(\".scroll-animation-target\");\n\t\ttargets.forEach((target) => observer.observe(target));\n\n\t\treturn () => {\n\t\t\ttargets.forEach((target) => observer.unobserve(target));\n\t\t\tobserver.disconnect();\n\t\t};\n\t}, []);\n};\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/NotFoundPage/NotFoundPage.tsx"},"span":[714,775],"sourceCode":"import { House } from \"lucide-react\";\nimport { useNavigate } from \"react-router\";\n\nconst NotFoundPage = () => {\n\tconst navigate = useNavigate();\n\treturn (\n\t\t<main className=\"min-h-screen flex items-center justify-around p-4\">\n\t\t\t<div className=\"max-w-lg w-full text-center space-y-8\">\n\t\t\t\t<div className=\"space-y-4\">\n\t\t\t\t\t<h1 className=\"text-9xl font-bold text-primary select-none\">404</h1>\n\t\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t\t<h2 className=\"text-3xl font-semibold\">ページが見つかりません</h2>\n\t\t\t\t\t\t<p className=\"leading-relaxed \">\n\t\t\t\t\t\t\tお探しのページは存在しないか、移動された可能性があります。\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"space-y-3\">\n\t\t\t\t\t<button className=\"btn w-full\" onClick={() => navigate(\"/\")}>\n\t\t\t\t\t\t<House className=\"w-4 h-4\" />\n\t\t\t\t\t\tホームに戻る\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</main>\n\t);\n};\n\nexport default NotFoundPage;\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"error","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipeGenerator/VegetableCard.tsx"},"span":[78,400],"sourceCode":"const VegetableCard = ({ id, name, img, onClick, selected }) => {\n\treturn (\n\t\t<div\n\t\t\tonClick={onClick}\n\t\t\tclassName={`\n\t\t\t\tcard w-32 flex-shrink-0 cursor-pointer transition-all duration-200 relative\n\t\t\t\t${\n\t\t\t\t\tselected\n\t\t\t\t\t\t? \"bg-primary text-primary-content shadow-lg ring-2 ring-primary transform scale-105\"\n\t\t\t\t\t\t: \"bg-base-100 hover:shadow-md hover:scale-105 hover:bg-base-200\"\n\t\t\t\t}\n\t\t\t`}\n\t\t>\n\t\t\t{selected && (\n\t\t\t\t<div className=\"absolute top-2 right-2 z-10\">\n\t\t\t\t\t<div className=\"bg-primary-content text-primary rounded-full w-5 h-5 flex items-center justify-center\">\n\t\t\t\t\t\t<svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\t\t\t\t\td=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n\t\t\t\t\t\t\t\tclipRule=\"evenodd\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<figure className=\"px-6 pt-6\">\n\t\t\t\t<img\n\t\t\t\t\tsrc={img}\n\t\t\t\t\talt={`${name}の画像`}\n\t\t\t\t\tclassName=\"rounded-xl h-16 w-16 object-cover\"\n\t\t\t\t/>\n\t\t\t</figure>\n\t\t\t<div className=\"card-body items-center text-center p-3\">\n\t\t\t\t<h2\n\t\t\t\t\tclassName={`text-sm font-medium ${selected ? \"text-primary-content\" : \"text-base-content\"}`}\n\t\t\t\t>\n\t\t\t\t\t{name}\n\t\t\t\t</h2>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default VegetableCard;\n"},"tags":[],"source":null},{"category":"lint/a11y/noSvgWithoutTitle","severity":"error","description":"Alternative text title element cannot be empty","message":[{"elements":[],"content":"Alternative text "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element cannot be empty"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"For accessibility purposes, "},{"elements":["Emphasis"],"content":"SVGs"},{"elements":[],"content":" should have an alternative text, provided via "},{"elements":["Emphasis"],"content":"title"},{"elements":[],"content":" element. If the svg element has role=\"img\", you should add the "},{"elements":["Emphasis"],"content":"aria-label"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"aria-labelledby"},{"elements":[],"content":" attribute."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipeGenerator/VegetableCard.tsx"},"span":[584,649],"sourceCode":"const VegetableCard = ({ id, name, img, onClick, selected }) => {\n\treturn (\n\t\t<div\n\t\t\tonClick={onClick}\n\t\t\tclassName={`\n\t\t\t\tcard w-32 flex-shrink-0 cursor-pointer transition-all duration-200 relative\n\t\t\t\t${\n\t\t\t\t\tselected\n\t\t\t\t\t\t? \"bg-primary text-primary-content shadow-lg ring-2 ring-primary transform scale-105\"\n\t\t\t\t\t\t: \"bg-base-100 hover:shadow-md hover:scale-105 hover:bg-base-200\"\n\t\t\t\t}\n\t\t\t`}\n\t\t>\n\t\t\t{selected && (\n\t\t\t\t<div className=\"absolute top-2 right-2 z-10\">\n\t\t\t\t\t<div className=\"bg-primary-content text-primary rounded-full w-5 h-5 flex items-center justify-center\">\n\t\t\t\t\t\t<svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\t\t\t\t\td=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n\t\t\t\t\t\t\t\tclipRule=\"evenodd\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<figure className=\"px-6 pt-6\">\n\t\t\t\t<img\n\t\t\t\t\tsrc={img}\n\t\t\t\t\talt={`${name}の画像`}\n\t\t\t\t\tclassName=\"rounded-xl h-16 w-16 object-cover\"\n\t\t\t\t/>\n\t\t\t</figure>\n\t\t\t<div className=\"card-body items-center text-center p-3\">\n\t\t\t\t<h2\n\t\t\t\t\tclassName={`text-sm font-medium ${selected ? \"text-primary-content\" : \"text-base-content\"}`}\n\t\t\t\t>\n\t\t\t\t\t{name}\n\t\t\t\t</h2>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default VegetableCard;\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipesListDetail/RecipeListDetail.tsx"},"span":[3644,3680],"sourceCode":"import { Clock, Grid3x3, ShoppingCart, Target, User } from \"lucide-react\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddLItemFromRecipe from \"../../components/AddItemFromRecipe\";\nimport Ingredients from \"../../components/Ingredients\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSteps from \"../../components/RecipeSteps\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tAddShoppingListParams,\n\tRecipeResponse,\n\tRecipes,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst RecipeListDetail = () => {\n\tconst data = useLoaderData<Recipes>();\n\tconsole.log(data);\n\tconst [shoppingList, setShoppingLists] = useState<RecipeResponse>(\n\t\tdata.attributes,\n\t);\n\tconst navigate = useNavigate();\n\tconst [activeTab, setActiveTab] = useState<string>(\"tab1\");\n\tconst { Modal, openModal, closeModal } = useModal();\n\n\tconst handleAddShoppingList = async (\n\t\tparams: AddShoppingListParams,\n\t): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ data: Recipes }>(\n\t\t\t\t\"/shopping_lists/from_recipe\",\n\t\t\t\t{\n\t\t\t\t\trecipe_id: data.id,\n\t\t\t\t\tshopping_list_id:\n\t\t\t\t\t\t\"shoppingListId\" in params ? params.shoppingListId : undefined,\n\t\t\t\t\tname: \"name\" in params ? params.name : undefined,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetShoppingLists(response.data.data.attributes);\n\t\t\ttoast.success(\"買い物リストに追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"買い物リストの追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"レシピ詳細\"\n\t\t\t\tdescription=\"簡単＆おいしい野菜レシピを食事別に一覧表示。手順や所要時間も明確にご紹介。\"\n\t\t\t/>\n\t\t\t<main className=\"container max-w-screen-lg mx-auto px-8 py-6\">\n\t\t\t\t<div className=\"mb-6\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/recipe-lists\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<section className=\"flex flex-col md:flex-row items-center gap-2\">\n\t\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={data.attributes.image_url}\n\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\tclassName=\"aspect-square w-sm rounded-lg\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t\t<h1 className=\"text-2xl font-bold\">{data.attributes.name}</h1>\n\t\t\t\t\t\t<p className=\"mt-4 text-neutral-500 text-xs md:text-base\">\n\t\t\t\t\t\t\t{data.attributes.instructions}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div className=\"mt-4 flex flex-col md:flex-row flex-wrap gap-2\">\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Clock size={20} />\n\t\t\t\t\t\t\t\t<span>調理時間 : {shoppingList.cooking_time}分</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Grid3x3 size={20} />\n\t\t\t\t\t\t\t\t<span>カテゴリ : {shoppingList.recipe_category}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Target size={20} />\n\t\t\t\t\t\t\t\t<span>目的 : {shoppingList.purpose}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<User size={20} />\n\t\t\t\t\t\t\t\t<span className=\"\">食材 : {shoppingList.servings}人分</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<div className=\"mt-10\">\n\t\t\t\t\t<button onClick={openModal} className=\"btn btn-primary\">\n\t\t\t\t\t\t<ShoppingCart />\n\t\t\t\t\t\t買い物リストに追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"w-full mt-10\">\n\t\t\t\t\t<div role=\"tablist\" className=\"tabs tabs-box flex justify-between\">\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${activeTab === \"tab1\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab1\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${activeTab === \"tab2\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab2\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t作り方\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{activeTab === \"tab1\" && (\n\t\t\t\t\t\t\t<Ingredients\n\t\t\t\t\t\t\t\tservings={shoppingList.servings}\n\t\t\t\t\t\t\t\tingredients={shoppingList.ingredients}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab2\" && (\n\t\t\t\t\t\t\t<RecipeSteps steps={shoppingList.recipe_steps} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddLItemFromRecipe\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tshoppingLists={shoppingList.shopping_lists}\n\t\t\t\t\t\trecipeName={data.attributes.name}\n\t\t\t\t\t\thandleAddShoppingList={handleAddShoppingList}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default RecipeListDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipesListDetail/RecipeListDetail.tsx"},"span":[3824,3860],"sourceCode":"import { Clock, Grid3x3, ShoppingCart, Target, User } from \"lucide-react\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddLItemFromRecipe from \"../../components/AddItemFromRecipe\";\nimport Ingredients from \"../../components/Ingredients\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSteps from \"../../components/RecipeSteps\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tAddShoppingListParams,\n\tRecipeResponse,\n\tRecipes,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst RecipeListDetail = () => {\n\tconst data = useLoaderData<Recipes>();\n\tconsole.log(data);\n\tconst [shoppingList, setShoppingLists] = useState<RecipeResponse>(\n\t\tdata.attributes,\n\t);\n\tconst navigate = useNavigate();\n\tconst [activeTab, setActiveTab] = useState<string>(\"tab1\");\n\tconst { Modal, openModal, closeModal } = useModal();\n\n\tconst handleAddShoppingList = async (\n\t\tparams: AddShoppingListParams,\n\t): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ data: Recipes }>(\n\t\t\t\t\"/shopping_lists/from_recipe\",\n\t\t\t\t{\n\t\t\t\t\trecipe_id: data.id,\n\t\t\t\t\tshopping_list_id:\n\t\t\t\t\t\t\"shoppingListId\" in params ? params.shoppingListId : undefined,\n\t\t\t\t\tname: \"name\" in params ? params.name : undefined,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetShoppingLists(response.data.data.attributes);\n\t\t\ttoast.success(\"買い物リストに追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"買い物リストの追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"レシピ詳細\"\n\t\t\t\tdescription=\"簡単＆おいしい野菜レシピを食事別に一覧表示。手順や所要時間も明確にご紹介。\"\n\t\t\t/>\n\t\t\t<main className=\"container max-w-screen-lg mx-auto px-8 py-6\">\n\t\t\t\t<div className=\"mb-6\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/recipe-lists\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<section className=\"flex flex-col md:flex-row items-center gap-2\">\n\t\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={data.attributes.image_url}\n\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\tclassName=\"aspect-square w-sm rounded-lg\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t\t<h1 className=\"text-2xl font-bold\">{data.attributes.name}</h1>\n\t\t\t\t\t\t<p className=\"mt-4 text-neutral-500 text-xs md:text-base\">\n\t\t\t\t\t\t\t{data.attributes.instructions}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div className=\"mt-4 flex flex-col md:flex-row flex-wrap gap-2\">\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Clock size={20} />\n\t\t\t\t\t\t\t\t<span>調理時間 : {shoppingList.cooking_time}分</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Grid3x3 size={20} />\n\t\t\t\t\t\t\t\t<span>カテゴリ : {shoppingList.recipe_category}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Target size={20} />\n\t\t\t\t\t\t\t\t<span>目的 : {shoppingList.purpose}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<User size={20} />\n\t\t\t\t\t\t\t\t<span className=\"\">食材 : {shoppingList.servings}人分</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<div className=\"mt-10\">\n\t\t\t\t\t<button onClick={openModal} className=\"btn btn-primary\">\n\t\t\t\t\t\t<ShoppingCart />\n\t\t\t\t\t\t買い物リストに追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"w-full mt-10\">\n\t\t\t\t\t<div role=\"tablist\" className=\"tabs tabs-box flex justify-between\">\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${activeTab === \"tab1\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab1\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${activeTab === \"tab2\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab2\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t作り方\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{activeTab === \"tab1\" && (\n\t\t\t\t\t\t\t<Ingredients\n\t\t\t\t\t\t\t\tservings={shoppingList.servings}\n\t\t\t\t\t\t\t\tingredients={shoppingList.ingredients}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab2\" && (\n\t\t\t\t\t\t\t<RecipeSteps steps={shoppingList.recipe_steps} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddLItemFromRecipe\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tshoppingLists={shoppingList.shopping_lists}\n\t\t\t\t\t\trecipeName={data.attributes.name}\n\t\t\t\t\t\thandleAddShoppingList={handleAddShoppingList}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default RecipeListDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipesListDetail/RecipeListDetail.tsx"},"span":[1853,1949],"sourceCode":"import { Clock, Grid3x3, ShoppingCart, Target, User } from \"lucide-react\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddLItemFromRecipe from \"../../components/AddItemFromRecipe\";\nimport Ingredients from \"../../components/Ingredients\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSteps from \"../../components/RecipeSteps\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tAddShoppingListParams,\n\tRecipeResponse,\n\tRecipes,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst RecipeListDetail = () => {\n\tconst data = useLoaderData<Recipes>();\n\tconsole.log(data);\n\tconst [shoppingList, setShoppingLists] = useState<RecipeResponse>(\n\t\tdata.attributes,\n\t);\n\tconst navigate = useNavigate();\n\tconst [activeTab, setActiveTab] = useState<string>(\"tab1\");\n\tconst { Modal, openModal, closeModal } = useModal();\n\n\tconst handleAddShoppingList = async (\n\t\tparams: AddShoppingListParams,\n\t): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ data: Recipes }>(\n\t\t\t\t\"/shopping_lists/from_recipe\",\n\t\t\t\t{\n\t\t\t\t\trecipe_id: data.id,\n\t\t\t\t\tshopping_list_id:\n\t\t\t\t\t\t\"shoppingListId\" in params ? params.shoppingListId : undefined,\n\t\t\t\t\tname: \"name\" in params ? params.name : undefined,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetShoppingLists(response.data.data.attributes);\n\t\t\ttoast.success(\"買い物リストに追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"買い物リストの追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"レシピ詳細\"\n\t\t\t\tdescription=\"簡単＆おいしい野菜レシピを食事別に一覧表示。手順や所要時間も明確にご紹介。\"\n\t\t\t/>\n\t\t\t<main className=\"container max-w-screen-lg mx-auto px-8 py-6\">\n\t\t\t\t<div className=\"mb-6\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/recipe-lists\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<section className=\"flex flex-col md:flex-row items-center gap-2\">\n\t\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={data.attributes.image_url}\n\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\tclassName=\"aspect-square w-sm rounded-lg\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t\t<h1 className=\"text-2xl font-bold\">{data.attributes.name}</h1>\n\t\t\t\t\t\t<p className=\"mt-4 text-neutral-500 text-xs md:text-base\">\n\t\t\t\t\t\t\t{data.attributes.instructions}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div className=\"mt-4 flex flex-col md:flex-row flex-wrap gap-2\">\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Clock size={20} />\n\t\t\t\t\t\t\t\t<span>調理時間 : {shoppingList.cooking_time}分</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Grid3x3 size={20} />\n\t\t\t\t\t\t\t\t<span>カテゴリ : {shoppingList.recipe_category}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Target size={20} />\n\t\t\t\t\t\t\t\t<span>目的 : {shoppingList.purpose}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<User size={20} />\n\t\t\t\t\t\t\t\t<span className=\"\">食材 : {shoppingList.servings}人分</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<div className=\"mt-10\">\n\t\t\t\t\t<button onClick={openModal} className=\"btn btn-primary\">\n\t\t\t\t\t\t<ShoppingCart />\n\t\t\t\t\t\t買い物リストに追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"w-full mt-10\">\n\t\t\t\t\t<div role=\"tablist\" className=\"tabs tabs-box flex justify-between\">\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${activeTab === \"tab1\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab1\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${activeTab === \"tab2\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab2\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t作り方\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{activeTab === \"tab1\" && (\n\t\t\t\t\t\t\t<Ingredients\n\t\t\t\t\t\t\t\tservings={shoppingList.servings}\n\t\t\t\t\t\t\t\tingredients={shoppingList.ingredients}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab2\" && (\n\t\t\t\t\t\t\t<RecipeSteps steps={shoppingList.recipe_steps} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddLItemFromRecipe\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tshoppingLists={shoppingList.shopping_lists}\n\t\t\t\t\t\trecipeName={data.attributes.name}\n\t\t\t\t\t\thandleAddShoppingList={handleAddShoppingList}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default RecipeListDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipesListDetail/RecipeListDetail.tsx"},"span":[3285,3341],"sourceCode":"import { Clock, Grid3x3, ShoppingCart, Target, User } from \"lucide-react\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddLItemFromRecipe from \"../../components/AddItemFromRecipe\";\nimport Ingredients from \"../../components/Ingredients\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSteps from \"../../components/RecipeSteps\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tAddShoppingListParams,\n\tRecipeResponse,\n\tRecipes,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst RecipeListDetail = () => {\n\tconst data = useLoaderData<Recipes>();\n\tconsole.log(data);\n\tconst [shoppingList, setShoppingLists] = useState<RecipeResponse>(\n\t\tdata.attributes,\n\t);\n\tconst navigate = useNavigate();\n\tconst [activeTab, setActiveTab] = useState<string>(\"tab1\");\n\tconst { Modal, openModal, closeModal } = useModal();\n\n\tconst handleAddShoppingList = async (\n\t\tparams: AddShoppingListParams,\n\t): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ data: Recipes }>(\n\t\t\t\t\"/shopping_lists/from_recipe\",\n\t\t\t\t{\n\t\t\t\t\trecipe_id: data.id,\n\t\t\t\t\tshopping_list_id:\n\t\t\t\t\t\t\"shoppingListId\" in params ? params.shoppingListId : undefined,\n\t\t\t\t\tname: \"name\" in params ? params.name : undefined,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetShoppingLists(response.data.data.attributes);\n\t\t\ttoast.success(\"買い物リストに追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"買い物リストの追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"レシピ詳細\"\n\t\t\t\tdescription=\"簡単＆おいしい野菜レシピを食事別に一覧表示。手順や所要時間も明確にご紹介。\"\n\t\t\t/>\n\t\t\t<main className=\"container max-w-screen-lg mx-auto px-8 py-6\">\n\t\t\t\t<div className=\"mb-6\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/recipe-lists\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<section className=\"flex flex-col md:flex-row items-center gap-2\">\n\t\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={data.attributes.image_url}\n\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\tclassName=\"aspect-square w-sm rounded-lg\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t\t<h1 className=\"text-2xl font-bold\">{data.attributes.name}</h1>\n\t\t\t\t\t\t<p className=\"mt-4 text-neutral-500 text-xs md:text-base\">\n\t\t\t\t\t\t\t{data.attributes.instructions}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div className=\"mt-4 flex flex-col md:flex-row flex-wrap gap-2\">\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Clock size={20} />\n\t\t\t\t\t\t\t\t<span>調理時間 : {shoppingList.cooking_time}分</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Grid3x3 size={20} />\n\t\t\t\t\t\t\t\t<span>カテゴリ : {shoppingList.recipe_category}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<Target size={20} />\n\t\t\t\t\t\t\t\t<span>目的 : {shoppingList.purpose}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t<User size={20} />\n\t\t\t\t\t\t\t\t<span className=\"\">食材 : {shoppingList.servings}人分</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<div className=\"mt-10\">\n\t\t\t\t\t<button onClick={openModal} className=\"btn btn-primary\">\n\t\t\t\t\t\t<ShoppingCart />\n\t\t\t\t\t\t買い物リストに追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"w-full mt-10\">\n\t\t\t\t\t<div role=\"tablist\" className=\"tabs tabs-box flex justify-between\">\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${activeTab === \"tab1\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab1\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${activeTab === \"tab2\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab2\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t作り方\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{activeTab === \"tab1\" && (\n\t\t\t\t\t\t\t<Ingredients\n\t\t\t\t\t\t\t\tservings={shoppingList.servings}\n\t\t\t\t\t\t\t\tingredients={shoppingList.ingredients}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab2\" && (\n\t\t\t\t\t\t\t<RecipeSteps steps={shoppingList.recipe_steps} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddLItemFromRecipe\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tshoppingLists={shoppingList.shopping_lists}\n\t\t\t\t\t\trecipeName={data.attributes.name}\n\t\t\t\t\t\thandleAddShoppingList={handleAddShoppingList}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default RecipeListDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[8429,8470],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[8954,8995],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"error","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[15254,15351],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"error","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[15544,15644],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"error","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[15810,15912],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/a11y/useKeyWithClickEvents","severity":"error","description":"Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.","message":[{"elements":[],"content":"Enforce to have the "},{"elements":["Emphasis"],"content":"onClick"},{"elements":[],"content":" mouse event with the "},{"elements":["Emphasis"],"content":"onKeyUp"},{"elements":[],"content":", the "},{"elements":["Emphasis"],"content":"onKeyDown"},{"elements":[],"content":", or the "},{"elements":["Emphasis"],"content":"onKeyPress"},{"elements":[],"content":" keyboard event."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[16072,16172],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noRedeclare","severity":"error","description":"Shouldn't redeclare 'FridgeItems'. Consider to delete it or rename it.","message":[{"elements":[],"content":"Shouldn't redeclare 'FridgeItems'. Consider to delete it or rename it."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"'FridgeItems' is defined here:"}]]},{"frame":{"path":null,"span":[595,606],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[1204,1215],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[7955,8074],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[11108,11249],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"error","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[13348,13353],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[13394,13399],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"error","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[13984,13989],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[14016,14021],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[14278,14399],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/FridgeItems/FridgeItems.tsx"},"span":[14673,14817],"sourceCode":"import {\n\tArrowDownUp,\n\tBean,\n\tBeef,\n\tBox,\n\tCarrot,\n\tEgg,\n\tFish,\n\tLayers,\n\tPackage,\n\tSoup,\n\tSquarePen,\n\tTrash2,\n\tWheat,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport FoodStatus from \"../../components/FoodStatus\";\nimport FridgeItemForm from \"../../components/FridgeItemForm\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tFridgeAddItem,\n\tFridgeItems,\n\tFridgeItemsRes,\n\tFridgeItemsResponse,\n\tRecipeImage,\n\tRecipeResponse,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst categories = [\n\t{ name: \"野菜\", icon: Carrot },\n\t{ name: \"肉類\", icon: Beef },\n\t{ name: \"魚介類\", icon: Fish },\n\t{ name: \"卵・乳製品\", icon: Egg },\n\t{ name: \"豆・豆製品\", icon: Bean },\n\t{ name: \"穀類・パン\", icon: Wheat },\n\t{ name: \"調味料\", icon: Soup },\n\t{ name: \"加工食品\", icon: Package },\n\t{ name: \"その他\", icon: Box },\n];\n\nconst initialStatus = {\n\texpired: 0,\n\turgent: 0,\n\twarning: 0,\n\tsafe: 0,\n};\n\nconst FridgeItems = () => {\n\tconst navigation = useNavigate();\n\tconst data = useLoaderData<FridgeItemsResponse>();\n\tconst [items, setItems] = useState(data.data);\n\tconst [name, setName] = useState<string>(\"\");\n\tconst [selectedItem, setSelectedItem] = useState<string[]>([]);\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [editingItemId, setEditingItemId] = useState<number | undefined>(\n\t\tundefined,\n\t);\n\tconst editItem = items.filter((item) => item.id === editingItemId);\n\tconst [sortKey, setSortKey] = useState<\n\t\t| \"category\"\n\t\t| \"expire_date\"\n\t\t| \"expire_status\"\n\t\t| \"created_day\"\n\t\t| \"created_at\"\n\t\t| null\n\t>(null);\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | null>(null);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst [foodSelectedStatus, setFoodSelectedStatus] = useState<string | null>(\n\t\tnull,\n\t);\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [isSaving, startSaving] = useTransition();\n\n\tconst foodStatus = (status: string) => {\n\t\tswitch (status) {\n\t\t\tcase \"expired\":\n\t\t\t\treturn <span className=\"text-red-500\">期限切れ</span>;\n\n\t\t\tcase \"urgent\":\n\t\t\t\treturn <span className=\"text-accent\">期限間近</span>;\n\n\t\t\tcase \"warning\":\n\t\t\t\treturn <span className=\"text-warning\">注意</span>;\n\n\t\t\tcase \"safe\":\n\t\t\t\treturn <span className=\"text-info\">安全</span>;\n\n\t\t\tcase \"unset\":\n\t\t\t\treturn <span>不明</span>;\n\t\t\tdefault:\n\t\t\t\treturn <span>不明</span>;\n\t\t}\n\t};\n\n\tlet filterItems = items;\n\tfilterItems = filterItems.filter((item) =>\n\t\titem.attributes.name.includes(name),\n\t);\n\n\tif (selectedCategory) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.category === selectedCategory,\n\t\t);\n\t}\n\n\tif (foodSelectedStatus) {\n\t\tfilterItems = filterItems.filter(\n\t\t\t(item) => item.attributes.expire_status === foodSelectedStatus,\n\t\t);\n\t}\n\n\tconst sortedItems = [...filterItems].sort((a, b) => {\n\t\tif (!sortKey) return 0;\n\n\t\tlet aValue: string | Date = a.attributes[sortKey];\n\t\tlet bValue: string | Date = b.attributes[sortKey];\n\n\t\tif (sortKey === \"expire_date\" || sortKey === \"created_at\") {\n\t\t\taValue = new Date(aValue);\n\t\t\tbValue = new Date(bValue);\n\t\t}\n\n\t\tif (sortKey === \"category\") {\n\t\t\tconst aOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === a.attributes.category,\n\t\t\t);\n\t\t\tconst bOrder = categories.findIndex(\n\t\t\t\t(obj) => obj.name === b.attributes.category,\n\t\t\t);\n\t\t\treturn sortOrder === \"asc\" ? aOrder - bOrder : bOrder - aOrder;\n\t\t}\n\n\t\tif (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n\t\tif (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n\t\treturn 0;\n\t});\n\n\tconst handleSort = (\n\t\tkey: \"category\" | \"expire_date\" | \"expire_status\" | \"created_day\",\n\t) => {\n\t\tif (sortKey === key) {\n\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n\t\t} else {\n\t\t\tsetSortKey(key);\n\t\t\tsetSortOrder(\"asc\");\n\t\t}\n\t};\n\n\tconst categoryIconMap = Object.fromEntries(\n\t\tcategories.map(({ name, icon }) => [name, icon]),\n\t);\n\n\tconst changeIcon = (category: string) => {\n\t\tconst Icon = categoryIconMap[category];\n\t\treturn <Icon />;\n\t};\n\n\tconst handleAdd = async ({ name, category, amount, date }: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.post<FridgeItemsResponse>(\"/fridge_items\", {\n\t\t\t\tfridge: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date ? date.toLocaleDateString() : null,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleEdit = async ({\n\t\tid,\n\t\tname,\n\t\tcategory,\n\t\tamount,\n\t\tdate,\n\t}: FridgeAddItem) => {\n\t\ttry {\n\t\t\tconst response = await api.patch<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t\t{\n\t\t\t\t\tfridge: {\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tcategory: category,\n\t\t\t\t\t\tdisplay_amount: amount,\n\t\t\t\t\t\texpire_date: date?.toLocaleDateString(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\tcloseModal();\n\t\t\ttoast.success(\"食材情報を更新しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材情報の更新に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDelete = async (id: number) => {\n\t\ttry {\n\t\t\tconst response = await api.delete<FridgeItemsResponse>(\n\t\t\t\t`/fridge_items/${id}`,\n\t\t\t);\n\t\t\tsetItems(response.data.data);\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleChecked = (item: FridgeItemsRes) => {\n\t\tsetSelectedItem((prev) => {\n\t\t\tif (prev.includes(item.attributes.name)) {\n\t\t\t\treturn prev.filter((_item) => _item !== item.attributes.name);\n\t\t\t}\n\t\t\treturn [...prev, item.attributes.name];\n\t\t});\n\t};\n\n\tconst handleSuggestRecipe = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tselectedVegetables: selectedItem,\n\t\t\t\t});\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleSaveRecipe = async () => {\n\t\ttry {\n\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t...recipe,\n\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t});\n\t\t\tnavigation(\"/recipe-lists\");\n\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"レシピの保存に失敗しました\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"冷蔵庫\"\n\t\t\t\tdescription=\"冷蔵庫の食材をスマートに管理。不足・賞味期限も通知で安心。食材をムダなく使えます。\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto py-6 px-2 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">冷蔵庫</h1>\n\t\t\t\t\t<p className=\"mt-4 text-neutral-500\">\n\t\t\t\t\t\t冷蔵庫に登録された食材を確認ができます。また、食材からレシピの提案も可能です\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex space-x-4 mt-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input w-full\"\n\t\t\t\t\t\tplaceholder=\"食材を検索...\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetEditingItemId(null);\n\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t食材を追加\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\trole=\"tablist\"\n\t\t\t\t\tclassName=\"tabs tabs-box mt-4 overflow-x-auto flex-nowrap animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === null && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.35s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t<Layers className=\"h-5\" />\n\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\tすべて\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t{categories.map(({ name, icon: Icon }, index) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`tab flex-1 ${selectedCategory === name && \"tab-active\"} animate-fade-up`}\n\t\t\t\t\t\t\tonClick={() => setSelectedCategory(name)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${0.4 + index * 0.05}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-center\">\n\t\t\t\t\t\t\t\t<Icon className=\"h-5\" />{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-xs lg:text-base whitespace-nowrap\">\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-4 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.7s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={null}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"expired\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"urgent\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"warning\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<FoodStatus\n\t\t\t\t\t\tfoodSelectedStatus={foodSelectedStatus}\n\t\t\t\t\t\tsetFoodSelectedStatus={setFoodSelectedStatus}\n\t\t\t\t\t\tstatus={\"safe\"}\n\t\t\t\t\t\titems={items}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex flex-col gap-2 md:flex-row md:justify-between mt-6 border border-base-300 p-4 rounded-lg md:items-center mb-14\">\n\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">AIレシピ提案</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t{selectedItem.length > 0 && (\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t\t\t\t選択中のアイテム\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t{selectedItem.map((item) => (\n\t\t\t\t\t\t\t\t\t\t<span key={item} className=\"badge\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\tonClick={handleSuggestRecipe}\n\t\t\t\t\t\t\tdisabled={isPending || selectedItem.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={isPending ? \"invisible\" : \"\"}>レシピを提案</span>\n\t\t\t\t\t\t\t{isPending && (\n\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{isPending && <RecipeSkeleton />}\n\n\t\t\t\t\t{recipe && (\n\t\t\t\t\t\t<div className=\"container mx-auto px-4 flex flex-col lg:flex-row items-center\">\n\t\t\t\t\t\t\t<div className=\"w-full lg:w-1/2 h-80 lg:h-140\">\n\t\t\t\t\t\t\t\t{recipeImage ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={recipeImage.image_url}\n\t\t\t\t\t\t\t\t\t\talt=\"料理画像\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-lg w-full h-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"skeleton h-full w-full\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-2 md:p-6 lg:w-1/2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-between items-start space-y-2 mb-4\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"text-start text-xl font-semibold\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.name}\n\t\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs md:text-base text-neutral-500 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.instructions}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t料理カテゴリ: {recipe.recipe_category}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\tカロリー: {recipe.calorie}kcal\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t調理時間: {recipe.cooking_time}分\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center badge badge-secondary\">\n\t\t\t\t\t\t\t\t\t\t\t目的・シーン: {recipe.purpose}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-2\">\n\t\t\t\t\t\t\t\t\t\t食材\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-sm font-normal ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t({recipe.servings}人分)\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-md p-4\">\n\t\t\t\t\t\t\t\t\t\t<ul className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{recipe.ingredients?.map((ingredient, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex items-center gap-1 text-xs md:text-base\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"badge badge-neutral badge-xs\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ingredient.name} {ingredient?.display_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<hr className=\"border-t border-base-300 my-6\" />\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t<h3 className=\"font-semibold text-lg flex items-center mb-4\">\n\t\t\t\t\t\t\t\t\t\t調理手順\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ul className=\"steps steps-vertical\">\n\t\t\t\t\t\t\t\t\t\t{(recipe?.step ?? []).map((st, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<li key={index} className=\"step flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-left text-xs md:text-base\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{st?.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-3 mt-6\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveRecipe}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn relative\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className={isSaving ? \"invisible\" : \"\"}>\n\t\t\t\t\t\t\t\t\t\t\tレシピを保存\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{isSaving && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"absolute left-1/2 -translate-x-1/2 loading loading-spinner loading-md\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRecipe(null);\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedItem([]);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t閉じる\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100 mt-6 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.1s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>選択</th>\n\t\t\t\t\t\t\t\t<th>アイコン</th>\n\t\t\t\t\t\t\t\t<th>食材名</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"category\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>カテゴリー</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_date\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>賞味期限</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"expire_status\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>状態</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\tonClick={() => handleSort(\"created_day\")}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t\t\t<span>追加日</span>\n\t\t\t\t\t\t\t\t\t\t<ArrowDownUp size={15} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th>操作</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sortedItems.map((item) => (\n\t\t\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tchecked={selectedItem.includes(item.attributes.name)}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleChecked(item)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{changeIcon(item.attributes.category)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.name}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span className=\"badge\">{item.attributes.category}</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes?.display_amount}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.expire_date}</td>\n\t\t\t\t\t\t\t\t\t<td>{foodStatus(item.attributes.expire_status)}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.attributes.created_day}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t<SquarePen\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetEditingItemId(item.id);\n\t\t\t\t\t\t\t\t\t\t\t\topenModal();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(item.id)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<Modal>\n\t\t\t\t\t<FridgeItemForm\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\tcategories={categories}\n\t\t\t\t\t\tid={editingItemId}\n\t\t\t\t\t\titem={editItem[0]?.attributes || undefined}\n\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\thandleAdd={handleAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default FridgeItems;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/ShoppingList/ShoppingList.tsx"},"span":[1583,1673],"sourceCode":"import { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link, useLoaderData } from \"react-router\";\nimport AddListForm from \"../../components/AddListForm\";\nimport Meta from \"../../components/Meta\";\nimport ShoppingCard from \"../../components/ShoppingCard\";\nimport useModal from \"../../hooks/useModal\";\nimport {\n\tShoppingListEntry,\n\ttype ShoppingListResponse,\n\ttype ShoppingListsLoader,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst ShoppingList = () => {\n\tconst shoppingLists = useLoaderData<ShoppingListsLoader>();\n\tconst [lists, setLists] = useState(shoppingLists);\n\tconst { Modal, openModal, closeModal } = useModal();\n\n\tconst handleAddList = async (name: string) => {\n\t\ttry {\n\t\t\tconst response = await api.post<ShoppingListResponse>(\"/shopping_lists\", {\n\t\t\t\tname,\n\t\t\t});\n\t\t\tconsole.log(response);\n\t\t\tsetLists((prev) => [...prev, response.data.data]);\n\t\t\ttoast.success(\"買い物リストを作成しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"買い物リストの作成に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"買い物リスト\"\n\t\t\t\tdescription=\"必要な食材をまとめて管理。買い忘れを防げて、効率的な買い物ができます！\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto px-4 py-8 animate-fade-up\">\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"text-2xl font-bold\">買い物リスト</h1>\n\t\t\t\t\t<p className=\"text-neutral-500 my-4\">\n\t\t\t\t\t\t複数の買い物リストを作成・管理できます\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-4 flex\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn btn-outline w-full sm:w-fit\"\n\t\t\t\t\t\tonClick={openModal}\n\t\t\t\t\t>\n\t\t\t\t\t\t新しいリストの作成\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col items-center  md:grid md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4  gap-4 mt-4\">\n\t\t\t\t\t{lists.map((list, index) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={list.id}\n\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.1}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ShoppingCard\n\t\t\t\t\t\t\t\tid={list.id}\n\t\t\t\t\t\t\t\ttitle={list.attributes.name}\n\t\t\t\t\t\t\t\ttime={list.attributes.created_at_jst}\n\t\t\t\t\t\t\t\titems={list.attributes.shopping_items}\n\t\t\t\t\t\t\t\tsetLists={setLists}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t\t<Modal>\n\t\t\t\t<AddListForm closeModal={closeModal} handleAddList={handleAddList} />\n\t\t\t</Modal>\n\t\t</>\n\t);\n};\n\nexport default ShoppingList;\n"},"tags":[],"source":null},{"category":"lint/a11y/noLabelWithoutControl","severity":"error","description":"A form label must be associated with an input.","message":[{"elements":[],"content":"A form label must be associated with an input."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipeGenerator/RecipeGeneratorPage.tsx"},"span":[9468,9672],"sourceCode":"import axios from \"axios\";\nimport {\n\tBeef,\n\tBox,\n\tCake,\n\tChefHat,\n\tClock,\n\tCoffee,\n\tCookie,\n\tFlame as FireIcon,\n\tFish,\n\tFlame,\n\tHeart,\n\tHome,\n\tLeaf,\n\tMicrowave,\n\tMinus,\n\tPartyPopper,\n\tPizza,\n\tPlus,\n\tSalad,\n\tSearch,\n\tShoppingCart,\n\tSoup,\n\tTarget,\n\tUsers,\n\tUtensils,\n\tWheat,\n\tX,\n\tZap,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useLocation, useNavigate } from \"react-router\";\nimport GenerateRecipeArea from \"../../components/GenerateRecipeArea\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport type { RecipeImage, RecipeResponse } from \"../../types/apiResponse\";\nimport type { VegetableSummary } from \"../../types/vegetable\";\nimport { api } from \"../../utils/axios\";\nimport VegetableCard from \"./VegetableCard\";\n\nconst RecipeGeneratorPage = () => {\n\tconst location = useLocation();\n\tconst data = useLoaderData<VegetableSummary[]>();\n\tconst [vegeName, setVegeName] = useState<string>(\"\");\n\tconst [selectedVegetables, setSelectedVegetables] = useState(() =>\n\t\tlocation.state?.selectedVegetableId\n\t\t\t? [location.state.selectedVegetableId]\n\t\t\t: [],\n\t);\n\tconst [cookingTime, setCookingTime] = useState(\"30分〜1時間\");\n\tconst [calorie, setCalorie] = useState(\"600\");\n\tconst [category, setCategory] = useState(\"主菜\");\n\tconst [purpose, setPurpose] = useState(\"普段使い\");\n\tconst [servings, setServings] = useState(1);\n\tconst [cookingMethod, setCookingMethod] = useState(\"指定なし\");\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst [isSaving, startSaving] = useTransition();\n\tconst navigation = useNavigate();\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [showAllVegetables, setShowAllVegetables] = useState(false);\n\n\tconst filterVegetables = data.filter((vegetable) =>\n\t\tvegetable.name.toLowerCase().includes(vegeName.toLowerCase()),\n\t);\n\n\tconst toggleVegetable = (id: number) => {\n\t\tif (selectedVegetables.includes(id)) {\n\t\t\tsetSelectedVegetables((prev) => prev.filter((vegeId) => vegeId !== id));\n\t\t} else {\n\t\t\tsetSelectedVegetables((prev) => [...prev, id]);\n\t\t}\n\t};\n\n\tconst getCalorieLabel = (calorie: string) => {\n\t\tconst cal = Number(calorie);\n\t\tif (cal <= 400) return \"軽め\";\n\t\tif (cal <= 700) return \"標準\";\n\t\treturn \"しっかり\";\n\t};\n\n\tconst RecipeGenerator = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tsetRecipe(null);\n\t\t\t\tsetRecipeImage(null);\n\t\t\t\tconst selectedVegetableNames = selectedVegetables\n\t\t\t\t\t.map((id) => {\n\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\treturn veg ? veg.name : null;\n\t\t\t\t\t})\n\t\t\t\t\t.filter(Boolean);\n\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tcookingTime,\n\t\t\t\t\tcalorie,\n\t\t\t\t\tcategory,\n\t\t\t\t\tpurpose,\n\t\t\t\t\tservings,\n\t\t\t\t\tcookingMethod,\n\t\t\t\t\tselectedVegetables: selectedVegetableNames,\n\t\t\t\t});\n\t\t\t\tconsole.log(\"レシピのレスポンス:\", response.data);\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleClickSave = (): void => {\n\t\tstartSaving(async () => {\n\t\t\ttry {\n\t\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t\t...recipe,\n\t\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t\t});\n\t\t\t\tnavigation(\"/recipe-lists\");\n\t\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\tif (axios.isAxiosError(err)) {\n\t\t\t\t\tconst message = err.response?.data?.error ?? \"エラーが発生しました\";\n\t\t\t\t\ttoast.error(message);\n\t\t\t\t} else {\n\t\t\t\t\ttoast.error(\"エラーが発生しました\");\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"レシピ提案\"\n\t\t\t\tdescription=\"あなたの冷蔵庫にある食材からぴったりのレシピを提案します。今日の献立に迷ったらこちら！\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto px-4 py-8 animate-fade-up\">\n\t\t\t\t<h1 className=\"text-2xl font-bold\">レシピ提案</h1>\n\n\t\t\t\t<div className=\"space-y-3 mb-6\">\n\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t選択中の野菜\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t<span className=\"badge badge-primary badge-sm\">\n\t\t\t\t\t\t\t\t{selectedVegetables.length}個\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t{selectedVegetables.length > 0 ? (\n\t\t\t\t\t\t\tselectedVegetables.map((id) => {\n\t\t\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\t\t\tif (!veg) return null;\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={veg.id}\n\t\t\t\t\t\t\t\t\t\tclassName=\"badge badge-primary gap-2 py-3 px-3\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-primary-content font-medium\">\n\t\t\t\t\t\t\t\t\t\t\t{veg.name}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-primary-content hover:bg-primary-focus rounded-full w-4 h-4 min-h-0 p-0\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(id)}\n\t\t\t\t\t\t\t\t\t\t\taria-label={`${veg.name}を選択から除外`}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<X size={12} />\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2 text-base-content/60\">\n\t\t\t\t\t\t\t\t<div className=\"w-2 h-2 bg-base-content/30 rounded-full\" />\n\t\t\t\t\t\t\t\t<p>野菜を選択してください</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8 w-full\">\n\t\t\t\t\t<label className=\"input input-primary w-full\" htmlFor=\"name\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"野菜を検索\"\n\t\t\t\t\t\t\tvalue={vegeName}\n\t\t\t\t\t\t\tonChange={(e) => setVegeName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8\">\n\t\t\t\t\t<div className=\"flex items-center justify-between mb-4\">\n\t\t\t\t\t\t<div className=\"flex items-center gap-3\">\n\t\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t\t野菜を選択\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setSelectedVegetables([])}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-base-content/60 hover:text-error\"\n\t\t\t\t\t\t\t\t\t\taria-label=\"全ての野菜選択を解除\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<X size={14} />\n\t\t\t\t\t\t\t\t\t\tすべて解除\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(true)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm md:hidden\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべて表示\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-4 md:hidden\">\n\t\t\t\t\t\t{(showAllVegetables\n\t\t\t\t\t\t\t? filterVegetables\n\t\t\t\t\t\t\t: filterVegetables.slice(0, 12)\n\t\t\t\t\t\t).map((vegetable, index) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"hidden md:block overflow-x-auto\">\n\t\t\t\t\t\t<div className=\"flex gap-4 w-max py-4\">\n\t\t\t\t\t\t\t{filterVegetables.map((vegetable, index) => (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(false)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t表示を減らす\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<p className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t{12}個表示中 / 全{filterVegetables.length}個\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<h2 className=\"text-xl font-semibold mt-8\">レシピ条件設定</h2>\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 調理時間とカロリー設定を上段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Clock size={16} className=\"inline\" /> 調理時間\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-3 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分以内\",\n\t\t\t\t\t\t\t\t\t\ticon: Zap,\n\t\t\t\t\t\t\t\t\t\tlabel: \"時短\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分以内\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t\ticon: Clock,\n\t\t\t\t\t\t\t\t\t\tlabel: \"普通\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"１時間以上\",\n\t\t\t\t\t\t\t\t\t\ticon: Flame,\n\t\t\t\t\t\t\t\t\t\tlabel: \"じっくり\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"1時間以上\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setCookingTime(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-3 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tcookingTime === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xl mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={20} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-xs\">{option.label}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\" htmlFor=\"calorie\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Flame size={16} className=\"inline\" /> カロリー目安:{\" \"}\n\t\t\t\t\t\t\t\t\t<span className=\"font-bold text-primary\">{calorie}kcal</span>\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t({getCalorieLabel(calorie)})\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\t\t\tmin=\"200\"\n\t\t\t\t\t\t\t\t\tmax=\"1000\"\n\t\t\t\t\t\t\t\t\tstep=\"50\"\n\t\t\t\t\t\t\t\t\tvalue={calorie}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setCalorie(e.target.value)}\n\t\t\t\t\t\t\t\t\tclassName=\"range range-primary w-full\"\n\t\t\t\t\t\t\t\t\tid=\"calorie\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"flex justify-between text-xs text-base-content/60 px-2 mt-2\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>200kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">軽め</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>600kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">標準</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>1000kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">しっかり</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 料理カテゴリを全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<Utensils size={16} className=\"inline\" /> 料理カテゴリ\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-2 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"主菜\", icon: Beef },\n\t\t\t\t\t\t\t\t{ value: \"副菜\", icon: Salad },\n\t\t\t\t\t\t\t\t{ value: \"スープ\", icon: Soup },\n\t\t\t\t\t\t\t\t{ value: \"サラダ\", icon: Leaf },\n\t\t\t\t\t\t\t\t{ value: \"ご飯もの\", icon: Wheat },\n\t\t\t\t\t\t\t\t{ value: \"麺類\", icon: Coffee },\n\t\t\t\t\t\t\t\t{ value: \"和食\", icon: Fish },\n\t\t\t\t\t\t\t\t{ value: \"洋食\", icon: Pizza },\n\t\t\t\t\t\t\t\t{ value: \"中華\", icon: Cookie },\n\t\t\t\t\t\t\t\t{ value: \"エスニック\", icon: ChefHat },\n\t\t\t\t\t\t\t\t{ value: \"デザート\", icon: Cake },\n\t\t\t\t\t\t\t].map((cat) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={cat.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCategory(cat.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-3 rounded-lg border-2 transition-all duration-200 hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcategory === cat.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-lg mb-1\">\n\t\t\t\t\t\t\t\t\t\t<cat.icon size={20} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs font-medium\">{cat.value}</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 目的・シーンと分量を下段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Target size={16} className=\"inline\" /> 目的・シーン\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{ value: \"普段使い\", icon: Home, desc: \"日常の食事\" },\n\t\t\t\t\t\t\t\t\t{ value: \"時短・スピード\", icon: Zap, desc: \"手軽に素早く\" },\n\t\t\t\t\t\t\t\t\t{ value: \"作り置き\", icon: Box, desc: \"まとめて調理\" },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"ダイエット・ヘルシー\",\n\t\t\t\t\t\t\t\t\t\ticon: Heart,\n\t\t\t\t\t\t\t\t\t\tdesc: \"健康重視\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"おもてなし\",\n\t\t\t\t\t\t\t\t\t\ticon: PartyPopper,\n\t\t\t\t\t\t\t\t\t\tdesc: \"特別な日に\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setPurpose(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tpurpose === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={24} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.value}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Users size={16} className=\"inline\" /> 分量\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"flex items-center justify-center gap-4 mt-4\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.max(1, servings - 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings <= 1}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Minus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<div className=\"text-center min-w-[100px] px-4 py-2 bg-base-200 rounded-lg\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-3xl font-bold text-primary\">\n\t\t\t\t\t\t\t\t\t\t{servings}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-sm text-base-content/60\">人分</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.min(10, servings + 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings >= 10}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Plus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"text-center text-xs text-base-content/60 mt-3\">\n\t\t\t\t\t\t\t\t1〜10人分まで設定可能\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 調理方法を全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<ChefHat size={16} className=\"inline\" /> 調理方法\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"指定なし\", icon: ShoppingCart, desc: \"おまかせ\" },\n\t\t\t\t\t\t\t\t{ value: \"電子レンジ\", icon: Microwave, desc: \"簡単調理\" },\n\t\t\t\t\t\t\t\t{ value: \"フライパン\", icon: Utensils, desc: \"炒める・焼く\" },\n\t\t\t\t\t\t\t\t{ value: \"鍋\", icon: Soup, desc: \"煮る・茹でる\" },\n\t\t\t\t\t\t\t\t{ value: \"オーブン\", icon: FireIcon, desc: \"焼く・ロースト\" },\n\t\t\t\t\t\t\t].map((method) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={method.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCookingMethod(method.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcookingMethod === method.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t<method.icon size={24} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t{method.value}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t{method.desc}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-8 flex justify-center\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tonClick={RecipeGenerator}\n\t\t\t\t\t\t\tclassName=\"btn btn-primary btn-lg px-8 py-4 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n\t\t\t\t\t\t\tdisabled={isPending || selectedVegetables.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-md mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを生成中...\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Utensils size={20} className=\"mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを提案する\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"mt-8 flex flex-col items-center space-y-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t<RecipeSkeleton />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t!recipe && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<ChefHat className=\"text-primary\" size={40} />\n\t\t\t\t\t\t\t\t<h2 className=\"text-xl font-semibold\">レシピを提案します</h2>\n\t\t\t\t\t\t\t\t<div className=\"text-center text-neutral-500\">\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t上の画面から野菜とレシピ条件設定を選んで、「レシピを提案する」をクリックしてください\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p>AIがあなたの選んだ条件に合わせたレシピを提案します。</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\n\t\t\t\t\t{!isPending && (\n\t\t\t\t\t\t<GenerateRecipeArea\n\t\t\t\t\t\t\trecipe={recipe}\n\t\t\t\t\t\t\trecipeImage={recipeImage}\n\t\t\t\t\t\t\tisSaving={isSaving}\n\t\t\t\t\t\t\tisPending={isPending}\n\t\t\t\t\t\t\thandleClickSave={handleClickSave}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</section>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default RecipeGeneratorPage;\n"},"tags":[],"source":null},{"category":"lint/a11y/noLabelWithoutControl","severity":"error","description":"A form label must be associated with an input.","message":[{"elements":[],"content":"A form label must be associated with an input."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipeGenerator/RecipeGeneratorPage.tsx"},"span":[12499,12708],"sourceCode":"import axios from \"axios\";\nimport {\n\tBeef,\n\tBox,\n\tCake,\n\tChefHat,\n\tClock,\n\tCoffee,\n\tCookie,\n\tFlame as FireIcon,\n\tFish,\n\tFlame,\n\tHeart,\n\tHome,\n\tLeaf,\n\tMicrowave,\n\tMinus,\n\tPartyPopper,\n\tPizza,\n\tPlus,\n\tSalad,\n\tSearch,\n\tShoppingCart,\n\tSoup,\n\tTarget,\n\tUsers,\n\tUtensils,\n\tWheat,\n\tX,\n\tZap,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useLocation, useNavigate } from \"react-router\";\nimport GenerateRecipeArea from \"../../components/GenerateRecipeArea\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport type { RecipeImage, RecipeResponse } from \"../../types/apiResponse\";\nimport type { VegetableSummary } from \"../../types/vegetable\";\nimport { api } from \"../../utils/axios\";\nimport VegetableCard from \"./VegetableCard\";\n\nconst RecipeGeneratorPage = () => {\n\tconst location = useLocation();\n\tconst data = useLoaderData<VegetableSummary[]>();\n\tconst [vegeName, setVegeName] = useState<string>(\"\");\n\tconst [selectedVegetables, setSelectedVegetables] = useState(() =>\n\t\tlocation.state?.selectedVegetableId\n\t\t\t? [location.state.selectedVegetableId]\n\t\t\t: [],\n\t);\n\tconst [cookingTime, setCookingTime] = useState(\"30分〜1時間\");\n\tconst [calorie, setCalorie] = useState(\"600\");\n\tconst [category, setCategory] = useState(\"主菜\");\n\tconst [purpose, setPurpose] = useState(\"普段使い\");\n\tconst [servings, setServings] = useState(1);\n\tconst [cookingMethod, setCookingMethod] = useState(\"指定なし\");\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst [isSaving, startSaving] = useTransition();\n\tconst navigation = useNavigate();\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [showAllVegetables, setShowAllVegetables] = useState(false);\n\n\tconst filterVegetables = data.filter((vegetable) =>\n\t\tvegetable.name.toLowerCase().includes(vegeName.toLowerCase()),\n\t);\n\n\tconst toggleVegetable = (id: number) => {\n\t\tif (selectedVegetables.includes(id)) {\n\t\t\tsetSelectedVegetables((prev) => prev.filter((vegeId) => vegeId !== id));\n\t\t} else {\n\t\t\tsetSelectedVegetables((prev) => [...prev, id]);\n\t\t}\n\t};\n\n\tconst getCalorieLabel = (calorie: string) => {\n\t\tconst cal = Number(calorie);\n\t\tif (cal <= 400) return \"軽め\";\n\t\tif (cal <= 700) return \"標準\";\n\t\treturn \"しっかり\";\n\t};\n\n\tconst RecipeGenerator = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tsetRecipe(null);\n\t\t\t\tsetRecipeImage(null);\n\t\t\t\tconst selectedVegetableNames = selectedVegetables\n\t\t\t\t\t.map((id) => {\n\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\treturn veg ? veg.name : null;\n\t\t\t\t\t})\n\t\t\t\t\t.filter(Boolean);\n\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tcookingTime,\n\t\t\t\t\tcalorie,\n\t\t\t\t\tcategory,\n\t\t\t\t\tpurpose,\n\t\t\t\t\tservings,\n\t\t\t\t\tcookingMethod,\n\t\t\t\t\tselectedVegetables: selectedVegetableNames,\n\t\t\t\t});\n\t\t\t\tconsole.log(\"レシピのレスポンス:\", response.data);\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleClickSave = (): void => {\n\t\tstartSaving(async () => {\n\t\t\ttry {\n\t\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t\t...recipe,\n\t\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t\t});\n\t\t\t\tnavigation(\"/recipe-lists\");\n\t\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\tif (axios.isAxiosError(err)) {\n\t\t\t\t\tconst message = err.response?.data?.error ?? \"エラーが発生しました\";\n\t\t\t\t\ttoast.error(message);\n\t\t\t\t} else {\n\t\t\t\t\ttoast.error(\"エラーが発生しました\");\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"レシピ提案\"\n\t\t\t\tdescription=\"あなたの冷蔵庫にある食材からぴったりのレシピを提案します。今日の献立に迷ったらこちら！\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto px-4 py-8 animate-fade-up\">\n\t\t\t\t<h1 className=\"text-2xl font-bold\">レシピ提案</h1>\n\n\t\t\t\t<div className=\"space-y-3 mb-6\">\n\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t選択中の野菜\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t<span className=\"badge badge-primary badge-sm\">\n\t\t\t\t\t\t\t\t{selectedVegetables.length}個\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t{selectedVegetables.length > 0 ? (\n\t\t\t\t\t\t\tselectedVegetables.map((id) => {\n\t\t\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\t\t\tif (!veg) return null;\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={veg.id}\n\t\t\t\t\t\t\t\t\t\tclassName=\"badge badge-primary gap-2 py-3 px-3\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-primary-content font-medium\">\n\t\t\t\t\t\t\t\t\t\t\t{veg.name}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-primary-content hover:bg-primary-focus rounded-full w-4 h-4 min-h-0 p-0\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(id)}\n\t\t\t\t\t\t\t\t\t\t\taria-label={`${veg.name}を選択から除外`}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<X size={12} />\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2 text-base-content/60\">\n\t\t\t\t\t\t\t\t<div className=\"w-2 h-2 bg-base-content/30 rounded-full\" />\n\t\t\t\t\t\t\t\t<p>野菜を選択してください</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8 w-full\">\n\t\t\t\t\t<label className=\"input input-primary w-full\" htmlFor=\"name\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"野菜を検索\"\n\t\t\t\t\t\t\tvalue={vegeName}\n\t\t\t\t\t\t\tonChange={(e) => setVegeName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8\">\n\t\t\t\t\t<div className=\"flex items-center justify-between mb-4\">\n\t\t\t\t\t\t<div className=\"flex items-center gap-3\">\n\t\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t\t野菜を選択\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setSelectedVegetables([])}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-base-content/60 hover:text-error\"\n\t\t\t\t\t\t\t\t\t\taria-label=\"全ての野菜選択を解除\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<X size={14} />\n\t\t\t\t\t\t\t\t\t\tすべて解除\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(true)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm md:hidden\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべて表示\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-4 md:hidden\">\n\t\t\t\t\t\t{(showAllVegetables\n\t\t\t\t\t\t\t? filterVegetables\n\t\t\t\t\t\t\t: filterVegetables.slice(0, 12)\n\t\t\t\t\t\t).map((vegetable, index) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"hidden md:block overflow-x-auto\">\n\t\t\t\t\t\t<div className=\"flex gap-4 w-max py-4\">\n\t\t\t\t\t\t\t{filterVegetables.map((vegetable, index) => (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(false)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t表示を減らす\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<p className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t{12}個表示中 / 全{filterVegetables.length}個\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<h2 className=\"text-xl font-semibold mt-8\">レシピ条件設定</h2>\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 調理時間とカロリー設定を上段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Clock size={16} className=\"inline\" /> 調理時間\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-3 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分以内\",\n\t\t\t\t\t\t\t\t\t\ticon: Zap,\n\t\t\t\t\t\t\t\t\t\tlabel: \"時短\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分以内\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t\ticon: Clock,\n\t\t\t\t\t\t\t\t\t\tlabel: \"普通\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"１時間以上\",\n\t\t\t\t\t\t\t\t\t\ticon: Flame,\n\t\t\t\t\t\t\t\t\t\tlabel: \"じっくり\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"1時間以上\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setCookingTime(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-3 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tcookingTime === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xl mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={20} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-xs\">{option.label}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\" htmlFor=\"calorie\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Flame size={16} className=\"inline\" /> カロリー目安:{\" \"}\n\t\t\t\t\t\t\t\t\t<span className=\"font-bold text-primary\">{calorie}kcal</span>\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t({getCalorieLabel(calorie)})\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\t\t\tmin=\"200\"\n\t\t\t\t\t\t\t\t\tmax=\"1000\"\n\t\t\t\t\t\t\t\t\tstep=\"50\"\n\t\t\t\t\t\t\t\t\tvalue={calorie}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setCalorie(e.target.value)}\n\t\t\t\t\t\t\t\t\tclassName=\"range range-primary w-full\"\n\t\t\t\t\t\t\t\t\tid=\"calorie\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"flex justify-between text-xs text-base-content/60 px-2 mt-2\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>200kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">軽め</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>600kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">標準</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>1000kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">しっかり</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 料理カテゴリを全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<Utensils size={16} className=\"inline\" /> 料理カテゴリ\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-2 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"主菜\", icon: Beef },\n\t\t\t\t\t\t\t\t{ value: \"副菜\", icon: Salad },\n\t\t\t\t\t\t\t\t{ value: \"スープ\", icon: Soup },\n\t\t\t\t\t\t\t\t{ value: \"サラダ\", icon: Leaf },\n\t\t\t\t\t\t\t\t{ value: \"ご飯もの\", icon: Wheat },\n\t\t\t\t\t\t\t\t{ value: \"麺類\", icon: Coffee },\n\t\t\t\t\t\t\t\t{ value: \"和食\", icon: Fish },\n\t\t\t\t\t\t\t\t{ value: \"洋食\", icon: Pizza },\n\t\t\t\t\t\t\t\t{ value: \"中華\", icon: Cookie },\n\t\t\t\t\t\t\t\t{ value: \"エスニック\", icon: ChefHat },\n\t\t\t\t\t\t\t\t{ value: \"デザート\", icon: Cake },\n\t\t\t\t\t\t\t].map((cat) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={cat.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCategory(cat.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-3 rounded-lg border-2 transition-all duration-200 hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcategory === cat.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-lg mb-1\">\n\t\t\t\t\t\t\t\t\t\t<cat.icon size={20} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs font-medium\">{cat.value}</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 目的・シーンと分量を下段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Target size={16} className=\"inline\" /> 目的・シーン\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{ value: \"普段使い\", icon: Home, desc: \"日常の食事\" },\n\t\t\t\t\t\t\t\t\t{ value: \"時短・スピード\", icon: Zap, desc: \"手軽に素早く\" },\n\t\t\t\t\t\t\t\t\t{ value: \"作り置き\", icon: Box, desc: \"まとめて調理\" },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"ダイエット・ヘルシー\",\n\t\t\t\t\t\t\t\t\t\ticon: Heart,\n\t\t\t\t\t\t\t\t\t\tdesc: \"健康重視\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"おもてなし\",\n\t\t\t\t\t\t\t\t\t\ticon: PartyPopper,\n\t\t\t\t\t\t\t\t\t\tdesc: \"特別な日に\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setPurpose(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tpurpose === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={24} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.value}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Users size={16} className=\"inline\" /> 分量\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"flex items-center justify-center gap-4 mt-4\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.max(1, servings - 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings <= 1}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Minus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<div className=\"text-center min-w-[100px] px-4 py-2 bg-base-200 rounded-lg\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-3xl font-bold text-primary\">\n\t\t\t\t\t\t\t\t\t\t{servings}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-sm text-base-content/60\">人分</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.min(10, servings + 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings >= 10}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Plus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"text-center text-xs text-base-content/60 mt-3\">\n\t\t\t\t\t\t\t\t1〜10人分まで設定可能\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 調理方法を全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<ChefHat size={16} className=\"inline\" /> 調理方法\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"指定なし\", icon: ShoppingCart, desc: \"おまかせ\" },\n\t\t\t\t\t\t\t\t{ value: \"電子レンジ\", icon: Microwave, desc: \"簡単調理\" },\n\t\t\t\t\t\t\t\t{ value: \"フライパン\", icon: Utensils, desc: \"炒める・焼く\" },\n\t\t\t\t\t\t\t\t{ value: \"鍋\", icon: Soup, desc: \"煮る・茹でる\" },\n\t\t\t\t\t\t\t\t{ value: \"オーブン\", icon: FireIcon, desc: \"焼く・ロースト\" },\n\t\t\t\t\t\t\t].map((method) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={method.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCookingMethod(method.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcookingMethod === method.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t<method.icon size={24} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t{method.value}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t{method.desc}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-8 flex justify-center\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tonClick={RecipeGenerator}\n\t\t\t\t\t\t\tclassName=\"btn btn-primary btn-lg px-8 py-4 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n\t\t\t\t\t\t\tdisabled={isPending || selectedVegetables.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-md mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを生成中...\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Utensils size={20} className=\"mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを提案する\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"mt-8 flex flex-col items-center space-y-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t<RecipeSkeleton />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t!recipe && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<ChefHat className=\"text-primary\" size={40} />\n\t\t\t\t\t\t\t\t<h2 className=\"text-xl font-semibold\">レシピを提案します</h2>\n\t\t\t\t\t\t\t\t<div className=\"text-center text-neutral-500\">\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t上の画面から野菜とレシピ条件設定を選んで、「レシピを提案する」をクリックしてください\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p>AIがあなたの選んだ条件に合わせたレシピを提案します。</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\n\t\t\t\t\t{!isPending && (\n\t\t\t\t\t\t<GenerateRecipeArea\n\t\t\t\t\t\t\trecipe={recipe}\n\t\t\t\t\t\t\trecipeImage={recipeImage}\n\t\t\t\t\t\t\tisSaving={isSaving}\n\t\t\t\t\t\t\tisPending={isPending}\n\t\t\t\t\t\t\thandleClickSave={handleClickSave}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</section>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default RecipeGeneratorPage;\n"},"tags":[],"source":null},{"category":"lint/a11y/noLabelWithoutControl","severity":"error","description":"A form label must be associated with an input.","message":[{"elements":[],"content":"A form label must be associated with an input."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipeGenerator/RecipeGeneratorPage.tsx"},"span":[14183,14394],"sourceCode":"import axios from \"axios\";\nimport {\n\tBeef,\n\tBox,\n\tCake,\n\tChefHat,\n\tClock,\n\tCoffee,\n\tCookie,\n\tFlame as FireIcon,\n\tFish,\n\tFlame,\n\tHeart,\n\tHome,\n\tLeaf,\n\tMicrowave,\n\tMinus,\n\tPartyPopper,\n\tPizza,\n\tPlus,\n\tSalad,\n\tSearch,\n\tShoppingCart,\n\tSoup,\n\tTarget,\n\tUsers,\n\tUtensils,\n\tWheat,\n\tX,\n\tZap,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useLocation, useNavigate } from \"react-router\";\nimport GenerateRecipeArea from \"../../components/GenerateRecipeArea\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport type { RecipeImage, RecipeResponse } from \"../../types/apiResponse\";\nimport type { VegetableSummary } from \"../../types/vegetable\";\nimport { api } from \"../../utils/axios\";\nimport VegetableCard from \"./VegetableCard\";\n\nconst RecipeGeneratorPage = () => {\n\tconst location = useLocation();\n\tconst data = useLoaderData<VegetableSummary[]>();\n\tconst [vegeName, setVegeName] = useState<string>(\"\");\n\tconst [selectedVegetables, setSelectedVegetables] = useState(() =>\n\t\tlocation.state?.selectedVegetableId\n\t\t\t? [location.state.selectedVegetableId]\n\t\t\t: [],\n\t);\n\tconst [cookingTime, setCookingTime] = useState(\"30分〜1時間\");\n\tconst [calorie, setCalorie] = useState(\"600\");\n\tconst [category, setCategory] = useState(\"主菜\");\n\tconst [purpose, setPurpose] = useState(\"普段使い\");\n\tconst [servings, setServings] = useState(1);\n\tconst [cookingMethod, setCookingMethod] = useState(\"指定なし\");\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst [isSaving, startSaving] = useTransition();\n\tconst navigation = useNavigate();\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [showAllVegetables, setShowAllVegetables] = useState(false);\n\n\tconst filterVegetables = data.filter((vegetable) =>\n\t\tvegetable.name.toLowerCase().includes(vegeName.toLowerCase()),\n\t);\n\n\tconst toggleVegetable = (id: number) => {\n\t\tif (selectedVegetables.includes(id)) {\n\t\t\tsetSelectedVegetables((prev) => prev.filter((vegeId) => vegeId !== id));\n\t\t} else {\n\t\t\tsetSelectedVegetables((prev) => [...prev, id]);\n\t\t}\n\t};\n\n\tconst getCalorieLabel = (calorie: string) => {\n\t\tconst cal = Number(calorie);\n\t\tif (cal <= 400) return \"軽め\";\n\t\tif (cal <= 700) return \"標準\";\n\t\treturn \"しっかり\";\n\t};\n\n\tconst RecipeGenerator = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tsetRecipe(null);\n\t\t\t\tsetRecipeImage(null);\n\t\t\t\tconst selectedVegetableNames = selectedVegetables\n\t\t\t\t\t.map((id) => {\n\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\treturn veg ? veg.name : null;\n\t\t\t\t\t})\n\t\t\t\t\t.filter(Boolean);\n\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tcookingTime,\n\t\t\t\t\tcalorie,\n\t\t\t\t\tcategory,\n\t\t\t\t\tpurpose,\n\t\t\t\t\tservings,\n\t\t\t\t\tcookingMethod,\n\t\t\t\t\tselectedVegetables: selectedVegetableNames,\n\t\t\t\t});\n\t\t\t\tconsole.log(\"レシピのレスポンス:\", response.data);\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleClickSave = (): void => {\n\t\tstartSaving(async () => {\n\t\t\ttry {\n\t\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t\t...recipe,\n\t\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t\t});\n\t\t\t\tnavigation(\"/recipe-lists\");\n\t\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\tif (axios.isAxiosError(err)) {\n\t\t\t\t\tconst message = err.response?.data?.error ?? \"エラーが発生しました\";\n\t\t\t\t\ttoast.error(message);\n\t\t\t\t} else {\n\t\t\t\t\ttoast.error(\"エラーが発生しました\");\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"レシピ提案\"\n\t\t\t\tdescription=\"あなたの冷蔵庫にある食材からぴったりのレシピを提案します。今日の献立に迷ったらこちら！\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto px-4 py-8 animate-fade-up\">\n\t\t\t\t<h1 className=\"text-2xl font-bold\">レシピ提案</h1>\n\n\t\t\t\t<div className=\"space-y-3 mb-6\">\n\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t選択中の野菜\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t<span className=\"badge badge-primary badge-sm\">\n\t\t\t\t\t\t\t\t{selectedVegetables.length}個\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t{selectedVegetables.length > 0 ? (\n\t\t\t\t\t\t\tselectedVegetables.map((id) => {\n\t\t\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\t\t\tif (!veg) return null;\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={veg.id}\n\t\t\t\t\t\t\t\t\t\tclassName=\"badge badge-primary gap-2 py-3 px-3\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-primary-content font-medium\">\n\t\t\t\t\t\t\t\t\t\t\t{veg.name}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-primary-content hover:bg-primary-focus rounded-full w-4 h-4 min-h-0 p-0\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(id)}\n\t\t\t\t\t\t\t\t\t\t\taria-label={`${veg.name}を選択から除外`}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<X size={12} />\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2 text-base-content/60\">\n\t\t\t\t\t\t\t\t<div className=\"w-2 h-2 bg-base-content/30 rounded-full\" />\n\t\t\t\t\t\t\t\t<p>野菜を選択してください</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8 w-full\">\n\t\t\t\t\t<label className=\"input input-primary w-full\" htmlFor=\"name\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"野菜を検索\"\n\t\t\t\t\t\t\tvalue={vegeName}\n\t\t\t\t\t\t\tonChange={(e) => setVegeName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8\">\n\t\t\t\t\t<div className=\"flex items-center justify-between mb-4\">\n\t\t\t\t\t\t<div className=\"flex items-center gap-3\">\n\t\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t\t野菜を選択\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setSelectedVegetables([])}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-base-content/60 hover:text-error\"\n\t\t\t\t\t\t\t\t\t\taria-label=\"全ての野菜選択を解除\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<X size={14} />\n\t\t\t\t\t\t\t\t\t\tすべて解除\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(true)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm md:hidden\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべて表示\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-4 md:hidden\">\n\t\t\t\t\t\t{(showAllVegetables\n\t\t\t\t\t\t\t? filterVegetables\n\t\t\t\t\t\t\t: filterVegetables.slice(0, 12)\n\t\t\t\t\t\t).map((vegetable, index) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"hidden md:block overflow-x-auto\">\n\t\t\t\t\t\t<div className=\"flex gap-4 w-max py-4\">\n\t\t\t\t\t\t\t{filterVegetables.map((vegetable, index) => (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(false)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t表示を減らす\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<p className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t{12}個表示中 / 全{filterVegetables.length}個\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<h2 className=\"text-xl font-semibold mt-8\">レシピ条件設定</h2>\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 調理時間とカロリー設定を上段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Clock size={16} className=\"inline\" /> 調理時間\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-3 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分以内\",\n\t\t\t\t\t\t\t\t\t\ticon: Zap,\n\t\t\t\t\t\t\t\t\t\tlabel: \"時短\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分以内\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t\ticon: Clock,\n\t\t\t\t\t\t\t\t\t\tlabel: \"普通\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"１時間以上\",\n\t\t\t\t\t\t\t\t\t\ticon: Flame,\n\t\t\t\t\t\t\t\t\t\tlabel: \"じっくり\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"1時間以上\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setCookingTime(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-3 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tcookingTime === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xl mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={20} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-xs\">{option.label}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\" htmlFor=\"calorie\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Flame size={16} className=\"inline\" /> カロリー目安:{\" \"}\n\t\t\t\t\t\t\t\t\t<span className=\"font-bold text-primary\">{calorie}kcal</span>\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t({getCalorieLabel(calorie)})\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\t\t\tmin=\"200\"\n\t\t\t\t\t\t\t\t\tmax=\"1000\"\n\t\t\t\t\t\t\t\t\tstep=\"50\"\n\t\t\t\t\t\t\t\t\tvalue={calorie}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setCalorie(e.target.value)}\n\t\t\t\t\t\t\t\t\tclassName=\"range range-primary w-full\"\n\t\t\t\t\t\t\t\t\tid=\"calorie\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"flex justify-between text-xs text-base-content/60 px-2 mt-2\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>200kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">軽め</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>600kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">標準</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>1000kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">しっかり</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 料理カテゴリを全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<Utensils size={16} className=\"inline\" /> 料理カテゴリ\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-2 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"主菜\", icon: Beef },\n\t\t\t\t\t\t\t\t{ value: \"副菜\", icon: Salad },\n\t\t\t\t\t\t\t\t{ value: \"スープ\", icon: Soup },\n\t\t\t\t\t\t\t\t{ value: \"サラダ\", icon: Leaf },\n\t\t\t\t\t\t\t\t{ value: \"ご飯もの\", icon: Wheat },\n\t\t\t\t\t\t\t\t{ value: \"麺類\", icon: Coffee },\n\t\t\t\t\t\t\t\t{ value: \"和食\", icon: Fish },\n\t\t\t\t\t\t\t\t{ value: \"洋食\", icon: Pizza },\n\t\t\t\t\t\t\t\t{ value: \"中華\", icon: Cookie },\n\t\t\t\t\t\t\t\t{ value: \"エスニック\", icon: ChefHat },\n\t\t\t\t\t\t\t\t{ value: \"デザート\", icon: Cake },\n\t\t\t\t\t\t\t].map((cat) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={cat.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCategory(cat.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-3 rounded-lg border-2 transition-all duration-200 hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcategory === cat.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-lg mb-1\">\n\t\t\t\t\t\t\t\t\t\t<cat.icon size={20} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs font-medium\">{cat.value}</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 目的・シーンと分量を下段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Target size={16} className=\"inline\" /> 目的・シーン\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{ value: \"普段使い\", icon: Home, desc: \"日常の食事\" },\n\t\t\t\t\t\t\t\t\t{ value: \"時短・スピード\", icon: Zap, desc: \"手軽に素早く\" },\n\t\t\t\t\t\t\t\t\t{ value: \"作り置き\", icon: Box, desc: \"まとめて調理\" },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"ダイエット・ヘルシー\",\n\t\t\t\t\t\t\t\t\t\ticon: Heart,\n\t\t\t\t\t\t\t\t\t\tdesc: \"健康重視\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"おもてなし\",\n\t\t\t\t\t\t\t\t\t\ticon: PartyPopper,\n\t\t\t\t\t\t\t\t\t\tdesc: \"特別な日に\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setPurpose(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tpurpose === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={24} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.value}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Users size={16} className=\"inline\" /> 分量\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"flex items-center justify-center gap-4 mt-4\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.max(1, servings - 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings <= 1}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Minus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<div className=\"text-center min-w-[100px] px-4 py-2 bg-base-200 rounded-lg\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-3xl font-bold text-primary\">\n\t\t\t\t\t\t\t\t\t\t{servings}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-sm text-base-content/60\">人分</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.min(10, servings + 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings >= 10}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Plus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"text-center text-xs text-base-content/60 mt-3\">\n\t\t\t\t\t\t\t\t1〜10人分まで設定可能\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 調理方法を全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<ChefHat size={16} className=\"inline\" /> 調理方法\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"指定なし\", icon: ShoppingCart, desc: \"おまかせ\" },\n\t\t\t\t\t\t\t\t{ value: \"電子レンジ\", icon: Microwave, desc: \"簡単調理\" },\n\t\t\t\t\t\t\t\t{ value: \"フライパン\", icon: Utensils, desc: \"炒める・焼く\" },\n\t\t\t\t\t\t\t\t{ value: \"鍋\", icon: Soup, desc: \"煮る・茹でる\" },\n\t\t\t\t\t\t\t\t{ value: \"オーブン\", icon: FireIcon, desc: \"焼く・ロースト\" },\n\t\t\t\t\t\t\t].map((method) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={method.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCookingMethod(method.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcookingMethod === method.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t<method.icon size={24} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t{method.value}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t{method.desc}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-8 flex justify-center\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tonClick={RecipeGenerator}\n\t\t\t\t\t\t\tclassName=\"btn btn-primary btn-lg px-8 py-4 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n\t\t\t\t\t\t\tdisabled={isPending || selectedVegetables.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-md mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを生成中...\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Utensils size={20} className=\"mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを提案する\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"mt-8 flex flex-col items-center space-y-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t<RecipeSkeleton />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t!recipe && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<ChefHat className=\"text-primary\" size={40} />\n\t\t\t\t\t\t\t\t<h2 className=\"text-xl font-semibold\">レシピを提案します</h2>\n\t\t\t\t\t\t\t\t<div className=\"text-center text-neutral-500\">\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t上の画面から野菜とレシピ条件設定を選んで、「レシピを提案する」をクリックしてください\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p>AIがあなたの選んだ条件に合わせたレシピを提案します。</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\n\t\t\t\t\t{!isPending && (\n\t\t\t\t\t\t<GenerateRecipeArea\n\t\t\t\t\t\t\trecipe={recipe}\n\t\t\t\t\t\t\trecipeImage={recipeImage}\n\t\t\t\t\t\t\tisSaving={isSaving}\n\t\t\t\t\t\t\tisPending={isPending}\n\t\t\t\t\t\t\thandleClickSave={handleClickSave}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</section>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default RecipeGeneratorPage;\n"},"tags":[],"source":null},{"category":"lint/a11y/noLabelWithoutControl","severity":"error","description":"A form label must be associated with an input.","message":[{"elements":[],"content":"A form label must be associated with an input."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipeGenerator/RecipeGeneratorPage.tsx"},"span":[15921,16119],"sourceCode":"import axios from \"axios\";\nimport {\n\tBeef,\n\tBox,\n\tCake,\n\tChefHat,\n\tClock,\n\tCoffee,\n\tCookie,\n\tFlame as FireIcon,\n\tFish,\n\tFlame,\n\tHeart,\n\tHome,\n\tLeaf,\n\tMicrowave,\n\tMinus,\n\tPartyPopper,\n\tPizza,\n\tPlus,\n\tSalad,\n\tSearch,\n\tShoppingCart,\n\tSoup,\n\tTarget,\n\tUsers,\n\tUtensils,\n\tWheat,\n\tX,\n\tZap,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useLocation, useNavigate } from \"react-router\";\nimport GenerateRecipeArea from \"../../components/GenerateRecipeArea\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport type { RecipeImage, RecipeResponse } from \"../../types/apiResponse\";\nimport type { VegetableSummary } from \"../../types/vegetable\";\nimport { api } from \"../../utils/axios\";\nimport VegetableCard from \"./VegetableCard\";\n\nconst RecipeGeneratorPage = () => {\n\tconst location = useLocation();\n\tconst data = useLoaderData<VegetableSummary[]>();\n\tconst [vegeName, setVegeName] = useState<string>(\"\");\n\tconst [selectedVegetables, setSelectedVegetables] = useState(() =>\n\t\tlocation.state?.selectedVegetableId\n\t\t\t? [location.state.selectedVegetableId]\n\t\t\t: [],\n\t);\n\tconst [cookingTime, setCookingTime] = useState(\"30分〜1時間\");\n\tconst [calorie, setCalorie] = useState(\"600\");\n\tconst [category, setCategory] = useState(\"主菜\");\n\tconst [purpose, setPurpose] = useState(\"普段使い\");\n\tconst [servings, setServings] = useState(1);\n\tconst [cookingMethod, setCookingMethod] = useState(\"指定なし\");\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst [isSaving, startSaving] = useTransition();\n\tconst navigation = useNavigate();\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [showAllVegetables, setShowAllVegetables] = useState(false);\n\n\tconst filterVegetables = data.filter((vegetable) =>\n\t\tvegetable.name.toLowerCase().includes(vegeName.toLowerCase()),\n\t);\n\n\tconst toggleVegetable = (id: number) => {\n\t\tif (selectedVegetables.includes(id)) {\n\t\t\tsetSelectedVegetables((prev) => prev.filter((vegeId) => vegeId !== id));\n\t\t} else {\n\t\t\tsetSelectedVegetables((prev) => [...prev, id]);\n\t\t}\n\t};\n\n\tconst getCalorieLabel = (calorie: string) => {\n\t\tconst cal = Number(calorie);\n\t\tif (cal <= 400) return \"軽め\";\n\t\tif (cal <= 700) return \"標準\";\n\t\treturn \"しっかり\";\n\t};\n\n\tconst RecipeGenerator = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tsetRecipe(null);\n\t\t\t\tsetRecipeImage(null);\n\t\t\t\tconst selectedVegetableNames = selectedVegetables\n\t\t\t\t\t.map((id) => {\n\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\treturn veg ? veg.name : null;\n\t\t\t\t\t})\n\t\t\t\t\t.filter(Boolean);\n\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tcookingTime,\n\t\t\t\t\tcalorie,\n\t\t\t\t\tcategory,\n\t\t\t\t\tpurpose,\n\t\t\t\t\tservings,\n\t\t\t\t\tcookingMethod,\n\t\t\t\t\tselectedVegetables: selectedVegetableNames,\n\t\t\t\t});\n\t\t\t\tconsole.log(\"レシピのレスポンス:\", response.data);\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleClickSave = (): void => {\n\t\tstartSaving(async () => {\n\t\t\ttry {\n\t\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t\t...recipe,\n\t\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t\t});\n\t\t\t\tnavigation(\"/recipe-lists\");\n\t\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\tif (axios.isAxiosError(err)) {\n\t\t\t\t\tconst message = err.response?.data?.error ?? \"エラーが発生しました\";\n\t\t\t\t\ttoast.error(message);\n\t\t\t\t} else {\n\t\t\t\t\ttoast.error(\"エラーが発生しました\");\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"レシピ提案\"\n\t\t\t\tdescription=\"あなたの冷蔵庫にある食材からぴったりのレシピを提案します。今日の献立に迷ったらこちら！\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto px-4 py-8 animate-fade-up\">\n\t\t\t\t<h1 className=\"text-2xl font-bold\">レシピ提案</h1>\n\n\t\t\t\t<div className=\"space-y-3 mb-6\">\n\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t選択中の野菜\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t<span className=\"badge badge-primary badge-sm\">\n\t\t\t\t\t\t\t\t{selectedVegetables.length}個\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t{selectedVegetables.length > 0 ? (\n\t\t\t\t\t\t\tselectedVegetables.map((id) => {\n\t\t\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\t\t\tif (!veg) return null;\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={veg.id}\n\t\t\t\t\t\t\t\t\t\tclassName=\"badge badge-primary gap-2 py-3 px-3\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-primary-content font-medium\">\n\t\t\t\t\t\t\t\t\t\t\t{veg.name}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-primary-content hover:bg-primary-focus rounded-full w-4 h-4 min-h-0 p-0\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(id)}\n\t\t\t\t\t\t\t\t\t\t\taria-label={`${veg.name}を選択から除外`}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<X size={12} />\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2 text-base-content/60\">\n\t\t\t\t\t\t\t\t<div className=\"w-2 h-2 bg-base-content/30 rounded-full\" />\n\t\t\t\t\t\t\t\t<p>野菜を選択してください</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8 w-full\">\n\t\t\t\t\t<label className=\"input input-primary w-full\" htmlFor=\"name\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"野菜を検索\"\n\t\t\t\t\t\t\tvalue={vegeName}\n\t\t\t\t\t\t\tonChange={(e) => setVegeName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8\">\n\t\t\t\t\t<div className=\"flex items-center justify-between mb-4\">\n\t\t\t\t\t\t<div className=\"flex items-center gap-3\">\n\t\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t\t野菜を選択\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setSelectedVegetables([])}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-base-content/60 hover:text-error\"\n\t\t\t\t\t\t\t\t\t\taria-label=\"全ての野菜選択を解除\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<X size={14} />\n\t\t\t\t\t\t\t\t\t\tすべて解除\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(true)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm md:hidden\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべて表示\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-4 md:hidden\">\n\t\t\t\t\t\t{(showAllVegetables\n\t\t\t\t\t\t\t? filterVegetables\n\t\t\t\t\t\t\t: filterVegetables.slice(0, 12)\n\t\t\t\t\t\t).map((vegetable, index) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"hidden md:block overflow-x-auto\">\n\t\t\t\t\t\t<div className=\"flex gap-4 w-max py-4\">\n\t\t\t\t\t\t\t{filterVegetables.map((vegetable, index) => (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(false)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t表示を減らす\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<p className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t{12}個表示中 / 全{filterVegetables.length}個\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<h2 className=\"text-xl font-semibold mt-8\">レシピ条件設定</h2>\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 調理時間とカロリー設定を上段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Clock size={16} className=\"inline\" /> 調理時間\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-3 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分以内\",\n\t\t\t\t\t\t\t\t\t\ticon: Zap,\n\t\t\t\t\t\t\t\t\t\tlabel: \"時短\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分以内\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t\ticon: Clock,\n\t\t\t\t\t\t\t\t\t\tlabel: \"普通\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"１時間以上\",\n\t\t\t\t\t\t\t\t\t\ticon: Flame,\n\t\t\t\t\t\t\t\t\t\tlabel: \"じっくり\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"1時間以上\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setCookingTime(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-3 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tcookingTime === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xl mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={20} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-xs\">{option.label}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\" htmlFor=\"calorie\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Flame size={16} className=\"inline\" /> カロリー目安:{\" \"}\n\t\t\t\t\t\t\t\t\t<span className=\"font-bold text-primary\">{calorie}kcal</span>\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t({getCalorieLabel(calorie)})\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\t\t\tmin=\"200\"\n\t\t\t\t\t\t\t\t\tmax=\"1000\"\n\t\t\t\t\t\t\t\t\tstep=\"50\"\n\t\t\t\t\t\t\t\t\tvalue={calorie}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setCalorie(e.target.value)}\n\t\t\t\t\t\t\t\t\tclassName=\"range range-primary w-full\"\n\t\t\t\t\t\t\t\t\tid=\"calorie\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"flex justify-between text-xs text-base-content/60 px-2 mt-2\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>200kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">軽め</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>600kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">標準</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>1000kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">しっかり</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 料理カテゴリを全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<Utensils size={16} className=\"inline\" /> 料理カテゴリ\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-2 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"主菜\", icon: Beef },\n\t\t\t\t\t\t\t\t{ value: \"副菜\", icon: Salad },\n\t\t\t\t\t\t\t\t{ value: \"スープ\", icon: Soup },\n\t\t\t\t\t\t\t\t{ value: \"サラダ\", icon: Leaf },\n\t\t\t\t\t\t\t\t{ value: \"ご飯もの\", icon: Wheat },\n\t\t\t\t\t\t\t\t{ value: \"麺類\", icon: Coffee },\n\t\t\t\t\t\t\t\t{ value: \"和食\", icon: Fish },\n\t\t\t\t\t\t\t\t{ value: \"洋食\", icon: Pizza },\n\t\t\t\t\t\t\t\t{ value: \"中華\", icon: Cookie },\n\t\t\t\t\t\t\t\t{ value: \"エスニック\", icon: ChefHat },\n\t\t\t\t\t\t\t\t{ value: \"デザート\", icon: Cake },\n\t\t\t\t\t\t\t].map((cat) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={cat.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCategory(cat.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-3 rounded-lg border-2 transition-all duration-200 hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcategory === cat.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-lg mb-1\">\n\t\t\t\t\t\t\t\t\t\t<cat.icon size={20} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs font-medium\">{cat.value}</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 目的・シーンと分量を下段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Target size={16} className=\"inline\" /> 目的・シーン\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{ value: \"普段使い\", icon: Home, desc: \"日常の食事\" },\n\t\t\t\t\t\t\t\t\t{ value: \"時短・スピード\", icon: Zap, desc: \"手軽に素早く\" },\n\t\t\t\t\t\t\t\t\t{ value: \"作り置き\", icon: Box, desc: \"まとめて調理\" },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"ダイエット・ヘルシー\",\n\t\t\t\t\t\t\t\t\t\ticon: Heart,\n\t\t\t\t\t\t\t\t\t\tdesc: \"健康重視\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"おもてなし\",\n\t\t\t\t\t\t\t\t\t\ticon: PartyPopper,\n\t\t\t\t\t\t\t\t\t\tdesc: \"特別な日に\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setPurpose(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tpurpose === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={24} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.value}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Users size={16} className=\"inline\" /> 分量\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"flex items-center justify-center gap-4 mt-4\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.max(1, servings - 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings <= 1}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Minus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<div className=\"text-center min-w-[100px] px-4 py-2 bg-base-200 rounded-lg\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-3xl font-bold text-primary\">\n\t\t\t\t\t\t\t\t\t\t{servings}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-sm text-base-content/60\">人分</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.min(10, servings + 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings >= 10}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Plus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"text-center text-xs text-base-content/60 mt-3\">\n\t\t\t\t\t\t\t\t1〜10人分まで設定可能\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 調理方法を全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<ChefHat size={16} className=\"inline\" /> 調理方法\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"指定なし\", icon: ShoppingCart, desc: \"おまかせ\" },\n\t\t\t\t\t\t\t\t{ value: \"電子レンジ\", icon: Microwave, desc: \"簡単調理\" },\n\t\t\t\t\t\t\t\t{ value: \"フライパン\", icon: Utensils, desc: \"炒める・焼く\" },\n\t\t\t\t\t\t\t\t{ value: \"鍋\", icon: Soup, desc: \"煮る・茹でる\" },\n\t\t\t\t\t\t\t\t{ value: \"オーブン\", icon: FireIcon, desc: \"焼く・ロースト\" },\n\t\t\t\t\t\t\t].map((method) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={method.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCookingMethod(method.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcookingMethod === method.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t<method.icon size={24} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t{method.value}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t{method.desc}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-8 flex justify-center\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tonClick={RecipeGenerator}\n\t\t\t\t\t\t\tclassName=\"btn btn-primary btn-lg px-8 py-4 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n\t\t\t\t\t\t\tdisabled={isPending || selectedVegetables.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-md mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを生成中...\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Utensils size={20} className=\"mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを提案する\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"mt-8 flex flex-col items-center space-y-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t<RecipeSkeleton />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t!recipe && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<ChefHat className=\"text-primary\" size={40} />\n\t\t\t\t\t\t\t\t<h2 className=\"text-xl font-semibold\">レシピを提案します</h2>\n\t\t\t\t\t\t\t\t<div className=\"text-center text-neutral-500\">\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t上の画面から野菜とレシピ条件設定を選んで、「レシピを提案する」をクリックしてください\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p>AIがあなたの選んだ条件に合わせたレシピを提案します。</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\n\t\t\t\t\t{!isPending && (\n\t\t\t\t\t\t<GenerateRecipeArea\n\t\t\t\t\t\t\trecipe={recipe}\n\t\t\t\t\t\t\trecipeImage={recipeImage}\n\t\t\t\t\t\t\tisSaving={isSaving}\n\t\t\t\t\t\t\tisPending={isPending}\n\t\t\t\t\t\t\thandleClickSave={handleClickSave}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</section>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default RecipeGeneratorPage;\n"},"tags":[],"source":null},{"category":"lint/a11y/noLabelWithoutControl","severity":"error","description":"A form label must be associated with an input.","message":[{"elements":[],"content":"A form label must be associated with an input."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Consider adding a `for` or `htmlFor` attribute to the label element or moving the input element to inside the label element."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipeGenerator/RecipeGeneratorPage.tsx"},"span":[17240,17442],"sourceCode":"import axios from \"axios\";\nimport {\n\tBeef,\n\tBox,\n\tCake,\n\tChefHat,\n\tClock,\n\tCoffee,\n\tCookie,\n\tFlame as FireIcon,\n\tFish,\n\tFlame,\n\tHeart,\n\tHome,\n\tLeaf,\n\tMicrowave,\n\tMinus,\n\tPartyPopper,\n\tPizza,\n\tPlus,\n\tSalad,\n\tSearch,\n\tShoppingCart,\n\tSoup,\n\tTarget,\n\tUsers,\n\tUtensils,\n\tWheat,\n\tX,\n\tZap,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useLocation, useNavigate } from \"react-router\";\nimport GenerateRecipeArea from \"../../components/GenerateRecipeArea\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport type { RecipeImage, RecipeResponse } from \"../../types/apiResponse\";\nimport type { VegetableSummary } from \"../../types/vegetable\";\nimport { api } from \"../../utils/axios\";\nimport VegetableCard from \"./VegetableCard\";\n\nconst RecipeGeneratorPage = () => {\n\tconst location = useLocation();\n\tconst data = useLoaderData<VegetableSummary[]>();\n\tconst [vegeName, setVegeName] = useState<string>(\"\");\n\tconst [selectedVegetables, setSelectedVegetables] = useState(() =>\n\t\tlocation.state?.selectedVegetableId\n\t\t\t? [location.state.selectedVegetableId]\n\t\t\t: [],\n\t);\n\tconst [cookingTime, setCookingTime] = useState(\"30分〜1時間\");\n\tconst [calorie, setCalorie] = useState(\"600\");\n\tconst [category, setCategory] = useState(\"主菜\");\n\tconst [purpose, setPurpose] = useState(\"普段使い\");\n\tconst [servings, setServings] = useState(1);\n\tconst [cookingMethod, setCookingMethod] = useState(\"指定なし\");\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst [isSaving, startSaving] = useTransition();\n\tconst navigation = useNavigate();\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [showAllVegetables, setShowAllVegetables] = useState(false);\n\n\tconst filterVegetables = data.filter((vegetable) =>\n\t\tvegetable.name.toLowerCase().includes(vegeName.toLowerCase()),\n\t);\n\n\tconst toggleVegetable = (id: number) => {\n\t\tif (selectedVegetables.includes(id)) {\n\t\t\tsetSelectedVegetables((prev) => prev.filter((vegeId) => vegeId !== id));\n\t\t} else {\n\t\t\tsetSelectedVegetables((prev) => [...prev, id]);\n\t\t}\n\t};\n\n\tconst getCalorieLabel = (calorie: string) => {\n\t\tconst cal = Number(calorie);\n\t\tif (cal <= 400) return \"軽め\";\n\t\tif (cal <= 700) return \"標準\";\n\t\treturn \"しっかり\";\n\t};\n\n\tconst RecipeGenerator = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tsetRecipe(null);\n\t\t\t\tsetRecipeImage(null);\n\t\t\t\tconst selectedVegetableNames = selectedVegetables\n\t\t\t\t\t.map((id) => {\n\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\treturn veg ? veg.name : null;\n\t\t\t\t\t})\n\t\t\t\t\t.filter(Boolean);\n\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tcookingTime,\n\t\t\t\t\tcalorie,\n\t\t\t\t\tcategory,\n\t\t\t\t\tpurpose,\n\t\t\t\t\tservings,\n\t\t\t\t\tcookingMethod,\n\t\t\t\t\tselectedVegetables: selectedVegetableNames,\n\t\t\t\t});\n\t\t\t\tconsole.log(\"レシピのレスポンス:\", response.data);\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleClickSave = (): void => {\n\t\tstartSaving(async () => {\n\t\t\ttry {\n\t\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t\t...recipe,\n\t\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t\t});\n\t\t\t\tnavigation(\"/recipe-lists\");\n\t\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\tif (axios.isAxiosError(err)) {\n\t\t\t\t\tconst message = err.response?.data?.error ?? \"エラーが発生しました\";\n\t\t\t\t\ttoast.error(message);\n\t\t\t\t} else {\n\t\t\t\t\ttoast.error(\"エラーが発生しました\");\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"レシピ提案\"\n\t\t\t\tdescription=\"あなたの冷蔵庫にある食材からぴったりのレシピを提案します。今日の献立に迷ったらこちら！\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto px-4 py-8 animate-fade-up\">\n\t\t\t\t<h1 className=\"text-2xl font-bold\">レシピ提案</h1>\n\n\t\t\t\t<div className=\"space-y-3 mb-6\">\n\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t選択中の野菜\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t<span className=\"badge badge-primary badge-sm\">\n\t\t\t\t\t\t\t\t{selectedVegetables.length}個\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t{selectedVegetables.length > 0 ? (\n\t\t\t\t\t\t\tselectedVegetables.map((id) => {\n\t\t\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\t\t\tif (!veg) return null;\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={veg.id}\n\t\t\t\t\t\t\t\t\t\tclassName=\"badge badge-primary gap-2 py-3 px-3\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-primary-content font-medium\">\n\t\t\t\t\t\t\t\t\t\t\t{veg.name}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-primary-content hover:bg-primary-focus rounded-full w-4 h-4 min-h-0 p-0\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(id)}\n\t\t\t\t\t\t\t\t\t\t\taria-label={`${veg.name}を選択から除外`}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<X size={12} />\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2 text-base-content/60\">\n\t\t\t\t\t\t\t\t<div className=\"w-2 h-2 bg-base-content/30 rounded-full\" />\n\t\t\t\t\t\t\t\t<p>野菜を選択してください</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8 w-full\">\n\t\t\t\t\t<label className=\"input input-primary w-full\" htmlFor=\"name\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"野菜を検索\"\n\t\t\t\t\t\t\tvalue={vegeName}\n\t\t\t\t\t\t\tonChange={(e) => setVegeName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8\">\n\t\t\t\t\t<div className=\"flex items-center justify-between mb-4\">\n\t\t\t\t\t\t<div className=\"flex items-center gap-3\">\n\t\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t\t野菜を選択\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setSelectedVegetables([])}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-base-content/60 hover:text-error\"\n\t\t\t\t\t\t\t\t\t\taria-label=\"全ての野菜選択を解除\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<X size={14} />\n\t\t\t\t\t\t\t\t\t\tすべて解除\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(true)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm md:hidden\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべて表示\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-4 md:hidden\">\n\t\t\t\t\t\t{(showAllVegetables\n\t\t\t\t\t\t\t? filterVegetables\n\t\t\t\t\t\t\t: filterVegetables.slice(0, 12)\n\t\t\t\t\t\t).map((vegetable, index) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"hidden md:block overflow-x-auto\">\n\t\t\t\t\t\t<div className=\"flex gap-4 w-max py-4\">\n\t\t\t\t\t\t\t{filterVegetables.map((vegetable, index) => (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(false)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t表示を減らす\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<p className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t{12}個表示中 / 全{filterVegetables.length}個\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<h2 className=\"text-xl font-semibold mt-8\">レシピ条件設定</h2>\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 調理時間とカロリー設定を上段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Clock size={16} className=\"inline\" /> 調理時間\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-3 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分以内\",\n\t\t\t\t\t\t\t\t\t\ticon: Zap,\n\t\t\t\t\t\t\t\t\t\tlabel: \"時短\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分以内\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t\ticon: Clock,\n\t\t\t\t\t\t\t\t\t\tlabel: \"普通\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"１時間以上\",\n\t\t\t\t\t\t\t\t\t\ticon: Flame,\n\t\t\t\t\t\t\t\t\t\tlabel: \"じっくり\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"1時間以上\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setCookingTime(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-3 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tcookingTime === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xl mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={20} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-xs\">{option.label}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\" htmlFor=\"calorie\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Flame size={16} className=\"inline\" /> カロリー目安:{\" \"}\n\t\t\t\t\t\t\t\t\t<span className=\"font-bold text-primary\">{calorie}kcal</span>\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t({getCalorieLabel(calorie)})\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\t\t\tmin=\"200\"\n\t\t\t\t\t\t\t\t\tmax=\"1000\"\n\t\t\t\t\t\t\t\t\tstep=\"50\"\n\t\t\t\t\t\t\t\t\tvalue={calorie}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setCalorie(e.target.value)}\n\t\t\t\t\t\t\t\t\tclassName=\"range range-primary w-full\"\n\t\t\t\t\t\t\t\t\tid=\"calorie\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"flex justify-between text-xs text-base-content/60 px-2 mt-2\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>200kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">軽め</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>600kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">標準</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>1000kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">しっかり</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 料理カテゴリを全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<Utensils size={16} className=\"inline\" /> 料理カテゴリ\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-2 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"主菜\", icon: Beef },\n\t\t\t\t\t\t\t\t{ value: \"副菜\", icon: Salad },\n\t\t\t\t\t\t\t\t{ value: \"スープ\", icon: Soup },\n\t\t\t\t\t\t\t\t{ value: \"サラダ\", icon: Leaf },\n\t\t\t\t\t\t\t\t{ value: \"ご飯もの\", icon: Wheat },\n\t\t\t\t\t\t\t\t{ value: \"麺類\", icon: Coffee },\n\t\t\t\t\t\t\t\t{ value: \"和食\", icon: Fish },\n\t\t\t\t\t\t\t\t{ value: \"洋食\", icon: Pizza },\n\t\t\t\t\t\t\t\t{ value: \"中華\", icon: Cookie },\n\t\t\t\t\t\t\t\t{ value: \"エスニック\", icon: ChefHat },\n\t\t\t\t\t\t\t\t{ value: \"デザート\", icon: Cake },\n\t\t\t\t\t\t\t].map((cat) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={cat.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCategory(cat.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-3 rounded-lg border-2 transition-all duration-200 hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcategory === cat.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-lg mb-1\">\n\t\t\t\t\t\t\t\t\t\t<cat.icon size={20} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs font-medium\">{cat.value}</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 目的・シーンと分量を下段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Target size={16} className=\"inline\" /> 目的・シーン\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{ value: \"普段使い\", icon: Home, desc: \"日常の食事\" },\n\t\t\t\t\t\t\t\t\t{ value: \"時短・スピード\", icon: Zap, desc: \"手軽に素早く\" },\n\t\t\t\t\t\t\t\t\t{ value: \"作り置き\", icon: Box, desc: \"まとめて調理\" },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"ダイエット・ヘルシー\",\n\t\t\t\t\t\t\t\t\t\ticon: Heart,\n\t\t\t\t\t\t\t\t\t\tdesc: \"健康重視\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"おもてなし\",\n\t\t\t\t\t\t\t\t\t\ticon: PartyPopper,\n\t\t\t\t\t\t\t\t\t\tdesc: \"特別な日に\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setPurpose(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tpurpose === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={24} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.value}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Users size={16} className=\"inline\" /> 分量\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"flex items-center justify-center gap-4 mt-4\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.max(1, servings - 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings <= 1}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Minus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<div className=\"text-center min-w-[100px] px-4 py-2 bg-base-200 rounded-lg\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-3xl font-bold text-primary\">\n\t\t\t\t\t\t\t\t\t\t{servings}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-sm text-base-content/60\">人分</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.min(10, servings + 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings >= 10}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Plus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"text-center text-xs text-base-content/60 mt-3\">\n\t\t\t\t\t\t\t\t1〜10人分まで設定可能\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 調理方法を全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<ChefHat size={16} className=\"inline\" /> 調理方法\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"指定なし\", icon: ShoppingCart, desc: \"おまかせ\" },\n\t\t\t\t\t\t\t\t{ value: \"電子レンジ\", icon: Microwave, desc: \"簡単調理\" },\n\t\t\t\t\t\t\t\t{ value: \"フライパン\", icon: Utensils, desc: \"炒める・焼く\" },\n\t\t\t\t\t\t\t\t{ value: \"鍋\", icon: Soup, desc: \"煮る・茹でる\" },\n\t\t\t\t\t\t\t\t{ value: \"オーブン\", icon: FireIcon, desc: \"焼く・ロースト\" },\n\t\t\t\t\t\t\t].map((method) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={method.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCookingMethod(method.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcookingMethod === method.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t<method.icon size={24} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t{method.value}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t{method.desc}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-8 flex justify-center\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tonClick={RecipeGenerator}\n\t\t\t\t\t\t\tclassName=\"btn btn-primary btn-lg px-8 py-4 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n\t\t\t\t\t\t\tdisabled={isPending || selectedVegetables.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-md mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを生成中...\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Utensils size={20} className=\"mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを提案する\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"mt-8 flex flex-col items-center space-y-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t<RecipeSkeleton />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t!recipe && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<ChefHat className=\"text-primary\" size={40} />\n\t\t\t\t\t\t\t\t<h2 className=\"text-xl font-semibold\">レシピを提案します</h2>\n\t\t\t\t\t\t\t\t<div className=\"text-center text-neutral-500\">\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t上の画面から野菜とレシピ条件設定を選んで、「レシピを提案する」をクリックしてください\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p>AIがあなたの選んだ条件に合わせたレシピを提案します。</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\n\t\t\t\t\t{!isPending && (\n\t\t\t\t\t\t<GenerateRecipeArea\n\t\t\t\t\t\t\trecipe={recipe}\n\t\t\t\t\t\t\trecipeImage={recipeImage}\n\t\t\t\t\t\t\tisSaving={isSaving}\n\t\t\t\t\t\t\tisPending={isPending}\n\t\t\t\t\t\t\thandleClickSave={handleClickSave}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</section>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default RecipeGeneratorPage;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/RecipeGenerator/RecipeGeneratorPage.tsx"},"span":[5220,5466],"sourceCode":"import axios from \"axios\";\nimport {\n\tBeef,\n\tBox,\n\tCake,\n\tChefHat,\n\tClock,\n\tCoffee,\n\tCookie,\n\tFlame as FireIcon,\n\tFish,\n\tFlame,\n\tHeart,\n\tHome,\n\tLeaf,\n\tMicrowave,\n\tMinus,\n\tPartyPopper,\n\tPizza,\n\tPlus,\n\tSalad,\n\tSearch,\n\tShoppingCart,\n\tSoup,\n\tTarget,\n\tUsers,\n\tUtensils,\n\tWheat,\n\tX,\n\tZap,\n} from \"lucide-react\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useLocation, useNavigate } from \"react-router\";\nimport GenerateRecipeArea from \"../../components/GenerateRecipeArea\";\nimport Meta from \"../../components/Meta\";\nimport RecipeSkeleton from \"../../components/RecipeSkeleton\";\nimport type { RecipeImage, RecipeResponse } from \"../../types/apiResponse\";\nimport type { VegetableSummary } from \"../../types/vegetable\";\nimport { api } from \"../../utils/axios\";\nimport VegetableCard from \"./VegetableCard\";\n\nconst RecipeGeneratorPage = () => {\n\tconst location = useLocation();\n\tconst data = useLoaderData<VegetableSummary[]>();\n\tconst [vegeName, setVegeName] = useState<string>(\"\");\n\tconst [selectedVegetables, setSelectedVegetables] = useState(() =>\n\t\tlocation.state?.selectedVegetableId\n\t\t\t? [location.state.selectedVegetableId]\n\t\t\t: [],\n\t);\n\tconst [cookingTime, setCookingTime] = useState(\"30分〜1時間\");\n\tconst [calorie, setCalorie] = useState(\"600\");\n\tconst [category, setCategory] = useState(\"主菜\");\n\tconst [purpose, setPurpose] = useState(\"普段使い\");\n\tconst [servings, setServings] = useState(1);\n\tconst [cookingMethod, setCookingMethod] = useState(\"指定なし\");\n\tconst [recipe, setRecipe] = useState<RecipeResponse | null>(null);\n\tconst [isPending, startTransition] = useTransition();\n\tconst [isSaving, startSaving] = useTransition();\n\tconst navigation = useNavigate();\n\tconst [recipeImage, setRecipeImage] = useState<RecipeImage | null>(null);\n\tconst [showAllVegetables, setShowAllVegetables] = useState(false);\n\n\tconst filterVegetables = data.filter((vegetable) =>\n\t\tvegetable.name.toLowerCase().includes(vegeName.toLowerCase()),\n\t);\n\n\tconst toggleVegetable = (id: number) => {\n\t\tif (selectedVegetables.includes(id)) {\n\t\t\tsetSelectedVegetables((prev) => prev.filter((vegeId) => vegeId !== id));\n\t\t} else {\n\t\t\tsetSelectedVegetables((prev) => [...prev, id]);\n\t\t}\n\t};\n\n\tconst getCalorieLabel = (calorie: string) => {\n\t\tconst cal = Number(calorie);\n\t\tif (cal <= 400) return \"軽め\";\n\t\tif (cal <= 700) return \"標準\";\n\t\treturn \"しっかり\";\n\t};\n\n\tconst RecipeGenerator = () => {\n\t\tstartTransition(async () => {\n\t\t\ttry {\n\t\t\t\tsetRecipe(null);\n\t\t\t\tsetRecipeImage(null);\n\t\t\t\tconst selectedVegetableNames = selectedVegetables\n\t\t\t\t\t.map((id) => {\n\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\treturn veg ? veg.name : null;\n\t\t\t\t\t})\n\t\t\t\t\t.filter(Boolean);\n\n\t\t\t\tconst response = await api.post<RecipeResponse>(\"/recipe_generations\", {\n\t\t\t\t\tcookingTime,\n\t\t\t\t\tcalorie,\n\t\t\t\t\tcategory,\n\t\t\t\t\tpurpose,\n\t\t\t\t\tservings,\n\t\t\t\t\tcookingMethod,\n\t\t\t\t\tselectedVegetables: selectedVegetableNames,\n\t\t\t\t});\n\t\t\t\tconsole.log(\"レシピのレスポンス:\", response.data);\n\t\t\t\tsetRecipe(response.data[0]);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleClickSave = (): void => {\n\t\tstartSaving(async () => {\n\t\t\ttry {\n\t\t\t\tawait api.post(\"/recipes\", {\n\t\t\t\t\t...recipe,\n\t\t\t\t\timage_id: recipeImage?.image_id,\n\t\t\t\t});\n\t\t\t\tnavigation(\"/recipe-lists\");\n\t\t\t\ttoast.success(\"レシピを保存しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tif (!recipe) return;\n\n\t\tconst getRecipeImage = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await api.post<RecipeImage>(\n\t\t\t\t\t\"/recipe_image_generations\",\n\t\t\t\t\t{\n\t\t\t\t\t\trecipe: {\n\t\t\t\t\t\t\tname: recipe.name,\n\t\t\t\t\t\t\tingredients: recipe.ingredients,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tsetRecipeImage(response.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\tif (axios.isAxiosError(err)) {\n\t\t\t\t\tconst message = err.response?.data?.error ?? \"エラーが発生しました\";\n\t\t\t\t\ttoast.error(message);\n\t\t\t\t} else {\n\t\t\t\t\ttoast.error(\"エラーが発生しました\");\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tgetRecipeImage();\n\t}, [recipe]);\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"レシピ提案\"\n\t\t\t\tdescription=\"あなたの冷蔵庫にある食材からぴったりのレシピを提案します。今日の献立に迷ったらこちら！\"\n\t\t\t/>\n\t\t\t<main className=\"container mx-auto px-4 py-8 animate-fade-up\">\n\t\t\t\t<h1 className=\"text-2xl font-bold\">レシピ提案</h1>\n\n\t\t\t\t<div className=\"space-y-3 mb-6\">\n\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t選択中の野菜\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t<span className=\"badge badge-primary badge-sm\">\n\t\t\t\t\t\t\t\t{selectedVegetables.length}個\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t{selectedVegetables.length > 0 ? (\n\t\t\t\t\t\t\tselectedVegetables.map((id) => {\n\t\t\t\t\t\t\t\tconst veg = data.find((v) => v.id === id);\n\t\t\t\t\t\t\t\tif (!veg) return null;\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={veg.id}\n\t\t\t\t\t\t\t\t\t\tclassName=\"badge badge-primary gap-2 py-3 px-3\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-primary-content font-medium\">\n\t\t\t\t\t\t\t\t\t\t\t{veg.name}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-primary-content hover:bg-primary-focus rounded-full w-4 h-4 min-h-0 p-0\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(id)}\n\t\t\t\t\t\t\t\t\t\t\taria-label={`${veg.name}を選択から除外`}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<X size={12} />\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2 text-base-content/60\">\n\t\t\t\t\t\t\t\t<div className=\"w-2 h-2 bg-base-content/30 rounded-full\" />\n\t\t\t\t\t\t\t\t<p>野菜を選択してください</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8 w-full\">\n\t\t\t\t\t<label className=\"input input-primary w-full\" htmlFor=\"name\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"野菜を検索\"\n\t\t\t\t\t\t\tvalue={vegeName}\n\t\t\t\t\t\t\tonChange={(e) => setVegeName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mt-8\">\n\t\t\t\t\t<div className=\"flex items-center justify-between mb-4\">\n\t\t\t\t\t\t<div className=\"flex items-center gap-3\">\n\t\t\t\t\t\t\t<h3 className=\"text-sm font-semibold text-base-content\">\n\t\t\t\t\t\t\t\t野菜を選択\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t{selectedVegetables.length > 0 && (\n\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setSelectedVegetables([])}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost btn-xs text-base-content/60 hover:text-error\"\n\t\t\t\t\t\t\t\t\t\taria-label=\"全ての野菜選択を解除\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<X size={14} />\n\t\t\t\t\t\t\t\t\t\tすべて解除\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(true)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm md:hidden\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべて表示\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-4 md:hidden\">\n\t\t\t\t\t\t{(showAllVegetables\n\t\t\t\t\t\t\t? filterVegetables\n\t\t\t\t\t\t\t: filterVegetables.slice(0, 12)\n\t\t\t\t\t\t).map((vegetable, index) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"hidden md:block overflow-x-auto\">\n\t\t\t\t\t\t<div className=\"flex gap-4 w-max py-4\">\n\t\t\t\t\t\t\t{filterVegetables.map((vegetable, index) => (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.05}s`,\n\t\t\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<VegetableCard\n\t\t\t\t\t\t\t\t\t\tid={vegetable.id}\n\t\t\t\t\t\t\t\t\t\tname={vegetable.name}\n\t\t\t\t\t\t\t\t\t\timg={vegetable.image_url}\n\t\t\t\t\t\t\t\t\t\tonClick={() => toggleVegetable(vegetable.id)}\n\t\t\t\t\t\t\t\t\t\tselected={selectedVegetables.includes(vegetable.id)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => setShowAllVegetables(false)}\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-sm\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t表示を減らす\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{!showAllVegetables && filterVegetables.length > 12 && (\n\t\t\t\t\t\t<div className=\"md:hidden mt-4 text-center\">\n\t\t\t\t\t\t\t<p className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t{12}個表示中 / 全{filterVegetables.length}個\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<h2 className=\"text-xl font-semibold mt-8\">レシピ条件設定</h2>\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 調理時間とカロリー設定を上段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Clock size={16} className=\"inline\" /> 調理時間\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-3 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分以内\",\n\t\t\t\t\t\t\t\t\t\ticon: Zap,\n\t\t\t\t\t\t\t\t\t\tlabel: \"時短\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分以内\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t\ticon: Clock,\n\t\t\t\t\t\t\t\t\t\tlabel: \"普通\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"30分〜1時間\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"１時間以上\",\n\t\t\t\t\t\t\t\t\t\ticon: Flame,\n\t\t\t\t\t\t\t\t\t\tlabel: \"じっくり\",\n\t\t\t\t\t\t\t\t\t\tdesc: \"1時間以上\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setCookingTime(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-3 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tcookingTime === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xl mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={20} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-xs\">{option.label}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60 mt-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\" htmlFor=\"calorie\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Flame size={16} className=\"inline\" /> カロリー目安:{\" \"}\n\t\t\t\t\t\t\t\t\t<span className=\"font-bold text-primary\">{calorie}kcal</span>\n\t\t\t\t\t\t\t\t\t<span className=\"text-sm text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t({getCalorieLabel(calorie)})\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\t\t\tmin=\"200\"\n\t\t\t\t\t\t\t\t\tmax=\"1000\"\n\t\t\t\t\t\t\t\t\tstep=\"50\"\n\t\t\t\t\t\t\t\t\tvalue={calorie}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setCalorie(e.target.value)}\n\t\t\t\t\t\t\t\t\tclassName=\"range range-primary w-full\"\n\t\t\t\t\t\t\t\t\tid=\"calorie\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"flex justify-between text-xs text-base-content/60 px-2 mt-2\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>200kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">軽め</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>600kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">標準</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t<div>1000kcal</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-medium\">しっかり</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 料理カテゴリを全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<Utensils size={16} className=\"inline\" /> 料理カテゴリ\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-2 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"主菜\", icon: Beef },\n\t\t\t\t\t\t\t\t{ value: \"副菜\", icon: Salad },\n\t\t\t\t\t\t\t\t{ value: \"スープ\", icon: Soup },\n\t\t\t\t\t\t\t\t{ value: \"サラダ\", icon: Leaf },\n\t\t\t\t\t\t\t\t{ value: \"ご飯もの\", icon: Wheat },\n\t\t\t\t\t\t\t\t{ value: \"麺類\", icon: Coffee },\n\t\t\t\t\t\t\t\t{ value: \"和食\", icon: Fish },\n\t\t\t\t\t\t\t\t{ value: \"洋食\", icon: Pizza },\n\t\t\t\t\t\t\t\t{ value: \"中華\", icon: Cookie },\n\t\t\t\t\t\t\t\t{ value: \"エスニック\", icon: ChefHat },\n\t\t\t\t\t\t\t\t{ value: \"デザート\", icon: Cake },\n\t\t\t\t\t\t\t].map((cat) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={cat.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCategory(cat.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-3 rounded-lg border-2 transition-all duration-200 hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcategory === cat.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-lg mb-1\">\n\t\t\t\t\t\t\t\t\t\t<cat.icon size={20} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs font-medium\">{cat.value}</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n\t\t\t\t\t\t{/* 目的・シーンと分量を下段に配置 */}\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Target size={16} className=\"inline\" /> 目的・シーン\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t{ value: \"普段使い\", icon: Home, desc: \"日常の食事\" },\n\t\t\t\t\t\t\t\t\t{ value: \"時短・スピード\", icon: Zap, desc: \"手軽に素早く\" },\n\t\t\t\t\t\t\t\t\t{ value: \"作り置き\", icon: Box, desc: \"まとめて調理\" },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"ダイエット・ヘルシー\",\n\t\t\t\t\t\t\t\t\t\ticon: Heart,\n\t\t\t\t\t\t\t\t\t\tdesc: \"健康重視\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalue: \"おもてなし\",\n\t\t\t\t\t\t\t\t\t\ticon: PartyPopper,\n\t\t\t\t\t\t\t\t\t\tdesc: \"特別な日に\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t].map((option) => (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => setPurpose(option.value)}\n\t\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\t\tpurpose === option.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<option.icon size={24} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t{option.value}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t\t{option.desc}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm\">\n\t\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<Users size={16} className=\"inline\" /> 分量\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"flex items-center justify-center gap-4 mt-4\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.max(1, servings - 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings <= 1}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Minus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<div className=\"text-center min-w-[100px] px-4 py-2 bg-base-200 rounded-lg\">\n\t\t\t\t\t\t\t\t\t<div className=\"text-3xl font-bold text-primary\">\n\t\t\t\t\t\t\t\t\t\t{servings}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-sm text-base-content/60\">人分</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setServings(Math.min(10, servings + 1))}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-circle\"\n\t\t\t\t\t\t\t\t\tdisabled={servings >= 10}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Plus size={16} />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"text-center text-xs text-base-content/60 mt-3\">\n\t\t\t\t\t\t\t\t1〜10人分まで設定可能\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* 調理方法を全幅で配置 */}\n\t\t\t\t\t<div className=\"bg-base-100 p-6 rounded-xl border border-base-300 shadow-sm mt-6\">\n\t\t\t\t\t\t<label className=\"label\">\n\t\t\t\t\t\t\t<span className=\"label-text text-base font-semibold flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<ChefHat size={16} className=\"inline\" /> 調理方法\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 mt-3\">\n\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t{ value: \"指定なし\", icon: ShoppingCart, desc: \"おまかせ\" },\n\t\t\t\t\t\t\t\t{ value: \"電子レンジ\", icon: Microwave, desc: \"簡単調理\" },\n\t\t\t\t\t\t\t\t{ value: \"フライパン\", icon: Utensils, desc: \"炒める・焼く\" },\n\t\t\t\t\t\t\t\t{ value: \"鍋\", icon: Soup, desc: \"煮る・茹でる\" },\n\t\t\t\t\t\t\t\t{ value: \"オーブン\", icon: FireIcon, desc: \"焼く・ロースト\" },\n\t\t\t\t\t\t\t].map((method) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={method.value}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={() => setCookingMethod(method.value)}\n\t\t\t\t\t\t\t\t\tclassName={`\n\t\t\t\t\t\t\t\t\t\tp-4 border-2 rounded-lg transition-all duration-200 text-center hover:scale-105\n\t\t\t\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\t\t\t\tcookingMethod === method.value\n\t\t\t\t\t\t\t\t\t\t\t\t? \"border-primary bg-primary/10 text-primary shadow-md scale-105\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"border-base-300 hover:border-primary/50 hover:bg-base-100\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"text-2xl mb-2\">\n\t\t\t\t\t\t\t\t\t\t<method.icon size={24} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"font-semibold text-sm mb-1\">\n\t\t\t\t\t\t\t\t\t\t{method.value}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-base-content/60\">\n\t\t\t\t\t\t\t\t\t\t{method.desc}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-8 flex justify-center\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tonClick={RecipeGenerator}\n\t\t\t\t\t\t\tclassName=\"btn btn-primary btn-lg px-8 py-4 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n\t\t\t\t\t\t\tdisabled={isPending || selectedVegetables.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-md mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを生成中...\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Utensils size={20} className=\"mr-2\" />\n\t\t\t\t\t\t\t\t\tレシピを提案する\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"mt-8 flex flex-col items-center space-y-4 animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t<RecipeSkeleton />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t!recipe && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<ChefHat className=\"text-primary\" size={40} />\n\t\t\t\t\t\t\t\t<h2 className=\"text-xl font-semibold\">レシピを提案します</h2>\n\t\t\t\t\t\t\t\t<div className=\"text-center text-neutral-500\">\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t上の画面から野菜とレシピ条件設定を選んで、「レシピを提案する」をクリックしてください\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p>AIがあなたの選んだ条件に合わせたレシピを提案します。</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\n\t\t\t\t\t{!isPending && (\n\t\t\t\t\t\t<GenerateRecipeArea\n\t\t\t\t\t\t\trecipe={recipe}\n\t\t\t\t\t\t\trecipeImage={recipeImage}\n\t\t\t\t\t\t\tisSaving={isSaving}\n\t\t\t\t\t\t\tisPending={isPending}\n\t\t\t\t\t\t\thandleClickSave={handleClickSave}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</section>\n\t\t\t</main>\n\t\t</>\n\t);\n};\n\nexport default RecipeGeneratorPage;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noArrayIndexKey","severity":"error","description":"Avoid using the index of an array as key property in an element.","message":[{"elements":[],"content":"Avoid using the index of an array as key property in an element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This is the source of the key value."}]]},{"frame":{"path":null,"span":[552,557],"sourceCode":"import { CircleCheckBigIcon } from \"lucide-react\";\n\ninterface MeritHightLightProps {\n\ttitle: string;\n\tmerits: string[];\n\timage: React.ReactNode;\n\torder: string[];\n}\n\nconst MeritHighLight = ({\n\ttitle,\n\tmerits,\n\timage,\n\torder,\n}: MeritHightLightProps) => {\n\treturn (\n\t\t<div className=\"flex flex-col md:flex-row items-center gap-4 md:gap-8\">\n\t\t\t<div className={`flex-1 ${order[0]}`}>\n\t\t\t\t<h3 className=\"text-md md:text-lg lg:text-2xl text-center md:text-left font-bold mb-4\">\n\t\t\t\t\t{title}\n\t\t\t\t</h3>\n\t\t\t\t<ul className=\"space-y-3\">\n\t\t\t\t\t{merits.map((merit, index) => (\n\t\t\t\t\t\t<li key={index} className=\"flex items-start gap-2\">\n\t\t\t\t\t\t\t<CircleCheckBigIcon className=\"h-5 w-5 text-primary shrink-0 mt-0.5\" />\n\t\t\t\t\t\t\t<span>{merit}</span>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div className={`flex-1 ${order[1]}`}>\n\t\t\t\t<div className=\"p-4 rounded-xl shadow-lg flex justify-center\">\n\t\t\t\t\t{image}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MeritHighLight;\n"}},{"log":["info",[{"elements":[],"content":"The order of the items may change, and this also affects performances and component state."}]]},{"log":["info",[{"elements":[],"content":"Check the "},{"elements":[{"Hyperlink":{"href":"https://reactjs.org/docs/lists-and-keys.html#keys"}}],"content":"React documentation"},{"elements":[],"content":". "}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/Top/MeritHighLight.tsx"},"span":[579,584],"sourceCode":"import { CircleCheckBigIcon } from \"lucide-react\";\n\ninterface MeritHightLightProps {\n\ttitle: string;\n\tmerits: string[];\n\timage: React.ReactNode;\n\torder: string[];\n}\n\nconst MeritHighLight = ({\n\ttitle,\n\tmerits,\n\timage,\n\torder,\n}: MeritHightLightProps) => {\n\treturn (\n\t\t<div className=\"flex flex-col md:flex-row items-center gap-4 md:gap-8\">\n\t\t\t<div className={`flex-1 ${order[0]}`}>\n\t\t\t\t<h3 className=\"text-md md:text-lg lg:text-2xl text-center md:text-left font-bold mb-4\">\n\t\t\t\t\t{title}\n\t\t\t\t</h3>\n\t\t\t\t<ul className=\"space-y-3\">\n\t\t\t\t\t{merits.map((merit, index) => (\n\t\t\t\t\t\t<li key={index} className=\"flex items-start gap-2\">\n\t\t\t\t\t\t\t<CircleCheckBigIcon className=\"h-5 w-5 text-primary shrink-0 mt-0.5\" />\n\t\t\t\t\t\t\t<span>{merit}</span>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div className={`flex-1 ${order[1]}`}>\n\t\t\t\t<div className=\"p-4 rounded-xl shadow-lg flex justify-center\">\n\t\t\t\t\t{image}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MeritHighLight;\n"},"tags":[],"source":null},{"category":"lint/complexity/noForEach","severity":"error","description":"Prefer for...of instead of forEach.","message":[{"elements":[],"content":"Prefer "},{"elements":["Emphasis"],"content":"for...of"},{"elements":[],"content":" instead of "},{"elements":["Emphasis"],"content":"forEach"},{"elements":[],"content":"."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"forEach"},{"elements":[],"content":" may lead to performance issues when working with large arrays. When combined with functions like "},{"elements":["Emphasis"],"content":"filter"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"map"},{"elements":[],"content":", this causes multiple iterations over the same type."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/ShoppingListDetail/ShoppingListDetail.tsx"},"span":[1376,1509],"sourceCode":"import { Plus, Refrigerator, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddItemForm from \"../../components/AddItemForm\";\nimport Meta from \"../../components/Meta\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tShoppingItem,\n\tShoppingListAddItem,\n\tShoppingListEntry,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst ShoppingListDetail = () => {\n\tconst shoppingList = useLoaderData<ShoppingListEntry>();\n\tconst [items, setItems] = useState(shoppingList.attributes.shopping_items);\n\tconst navigate = useNavigate();\n\tconst check = items.filter((item) => item.checked === true);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [changedItems, setChangedItems] = useState(new Set<number>());\n\tconst [loadingItems, setLoadingItems] = useState<number[]>([]);\n\tlet filteredItems = items;\n\tif (selectedCategory) {\n\t\tfilteredItems = filteredItems.filter(\n\t\t\t(item) => item.category === selectedCategory,\n\t\t);\n\t}\n\n\tconst filteredGroupedItems = filteredItems.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tObject.keys(filteredGroupedItems).forEach((category) => {\n\t\tfilteredGroupedItems[category].sort((a, b) => a.checked - b.checked);\n\t});\n\n\tconst groupedItems = items.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tconst preferredOrder = [\n\t\t\"野菜\",\n\t\t\"肉類\",\n\t\t\"魚介類\",\n\t\t\"卵・乳製品\",\n\t\t\"豆・豆製品\",\n\t\t\"穀類・パン \",\n\t\t\"調味料\",\n\t\t\"加工食品\",\n\t\t\"その他\",\n\t];\n\n\tconst categories = Object.keys(groupedItems).sort((a, b) => {\n\t\treturn preferredOrder.indexOf(a) - preferredOrder.indexOf(b);\n\t});\n\n\tconst handleClick = (item: ShoppingItem) => {\n\t\tsetItems((prev) =>\n\t\t\tprev.map((preItem) => {\n\t\t\t\treturn preItem.id === item.id\n\t\t\t\t\t? { ...preItem, checked: !item.checked }\n\t\t\t\t\t: preItem;\n\t\t\t}),\n\t\t);\n\t\tsetChangedItems((prev) => new Set(prev).add(item.item_id));\n\t\tsetLoadingItems((prev) => [...prev, item.id]);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(async () => {\n\t\t\tif (changedItems.size === 0) return;\n\n\t\t\ttry {\n\t\t\t\tconst updates = [...changedItems].map((id) => {\n\t\t\t\t\tconst item = items.find((i) => i.item_id === id);\n\t\t\t\t\treturn { id: item.item_id, checked: item.checked };\n\t\t\t\t});\n\t\t\t\tawait api.patch(\n\t\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items/batch_update`,\n\t\t\t\t\t{ updates },\n\t\t\t\t);\n\n\t\t\t\tsetChangedItems(new Set());\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.success(\"保存が完了しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.error(\"保存に失敗しました\");\n\t\t\t}\n\t\t}, 3000);\n\n\t\treturn () => clearTimeout(timer);\n\t}, [changedItems]);\n\n\tconst handleAddItem = async ({\n\t\tname,\n\t\tdisplay_amount,\n\t\tcategory,\n\t}: ShoppingListAddItem): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ item: ShoppingItem }>(\n\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items`,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tdisplay_amount,\n\t\t\t\t\tcategory,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems((prev) => [...prev, { ...response.data.item }]);\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDeleteItem = async (id: number) => {\n\t\ttry {\n\t\t\tawait api.delete(`/shopping_list_items/${id}`);\n\t\t\tsetItems((prev) => prev.filter((item) => item.item_id !== id));\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleAddFridge = async (item: ShoppingItem | ShoppingItem[]) => {\n\t\tconst items = Array.isArray(item) ? item : [item];\n\t\ttry {\n\t\t\tawait api.post(\"/fridge_items\", {\n\t\t\t\tfridge: items.map((item) => ({\n\t\t\t\t\tname: item.name,\n\t\t\t\t\tcategory: item.category,\n\t\t\t\t\tdisplay_amount: item.display_amount,\n\t\t\t\t\tamount: item.amount,\n\t\t\t\t\tunit: item.unit,\n\t\t\t\t})),\n\t\t\t});\n\t\t\ttoast.success(\"冷蔵庫に追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"冷蔵庫の追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"買い物リスト詳細\"\n\t\t\t\tdescription=\"必要な食材をまとめて管理。買い忘れを防げて、効率的な買い物ができます！\"\n\t\t\t/>\n\t\t\t<div className=\"container max-w-screen-md mx-auto px-4 py-8\">\n\t\t\t\t<div className=\"mb-6 flex flex-col md:flex-row gap-2 md:justify-between\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/shoppinglist\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"flex flex-col md:flex-row gap-2\">\n\t\t\t\t\t\t<button className=\"btn btn-outline\" onClick={openModal}>\n\t\t\t\t\t\t\t食材を追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t\t\tonClick={() => handleAddFridge(items)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t全ての食材を冷蔵庫に追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"px-4 pb-2\">\n\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`text-xs  md:text-base badge ${selectedCategory === null && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべてのカテゴリ\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={category}\n\t\t\t\t\t\t\t\t\tclassName={`text-xs md:text-base badge ${selectedCategory === category && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(category)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col gap-6\">\n\t\t\t\t\t<div className=\"shadow-md rounded-xl p-4\">\n\t\t\t\t\t\t<div className=\"flex justify-between items-center mb-2\">\n\t\t\t\t\t\t\t<h2 className=\"flex items-center text-2xl \">\n\t\t\t\t\t\t\t\t<ShoppingCart className=\"mr-2 h-5 w-5\" />\n\t\t\t\t\t\t\t\t<span>{shoppingList.attributes.name}</span>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-outline badge-primary\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t作成日： {shoppingList.attributes.created_at_jst}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\tclassName={`text-secondary transition-opacity duration-500 ease-in ${items.length === check.length ? \"opacity-100\" : \"opacity-0\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべての買い物が完了しました！\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"bg-primary h-full transition-all duration-500 ease-in-out\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: `${(check.length / items.length) * 100}%` }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t{Object.entries(filteredGroupedItems).map(\n\t\t\t\t\t\t\t\t([category, categoryItems]) => (\n\t\t\t\t\t\t\t\t\t<div key={category}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center my-2\">\n\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"text-sm text-neutral-500\">{category}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex-1 ml-2 h-0.5 bg-base-300\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t\t{categoryItems.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col md:flex-row md:items-center justify-between space-x-4 py-4 px-4 rounded-lg border border-base-300\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={!!item.checked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleClick(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={loadingItems.includes(item.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"\">{item.name}</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.fromRecipe && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-neutral-500 text-sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tレシピ: {item.fromRecipe}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loadingItems.includes(item.id) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-xs ml-2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-end md:justify-start items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{item.display_amount}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Refrigerator\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddFridge(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDeleteItem(item.item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddItemForm\n\t\t\t\t\t\tcategories={preferredOrder}\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\thandleAddItem={handleAddItem}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ShoppingListDetail;\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"error","description":"This hook does not specify all of its dependencies: items.find","message":[{"elements":[],"content":"This hook does not specify all of its dependencies: items.find"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This dependency is not specified in the hook dependency list."}]]},{"frame":{"path":null,"span":[2496,2506],"sourceCode":"import { Plus, Refrigerator, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddItemForm from \"../../components/AddItemForm\";\nimport Meta from \"../../components/Meta\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tShoppingItem,\n\tShoppingListAddItem,\n\tShoppingListEntry,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst ShoppingListDetail = () => {\n\tconst shoppingList = useLoaderData<ShoppingListEntry>();\n\tconst [items, setItems] = useState(shoppingList.attributes.shopping_items);\n\tconst navigate = useNavigate();\n\tconst check = items.filter((item) => item.checked === true);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [changedItems, setChangedItems] = useState(new Set<number>());\n\tconst [loadingItems, setLoadingItems] = useState<number[]>([]);\n\tlet filteredItems = items;\n\tif (selectedCategory) {\n\t\tfilteredItems = filteredItems.filter(\n\t\t\t(item) => item.category === selectedCategory,\n\t\t);\n\t}\n\n\tconst filteredGroupedItems = filteredItems.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tObject.keys(filteredGroupedItems).forEach((category) => {\n\t\tfilteredGroupedItems[category].sort((a, b) => a.checked - b.checked);\n\t});\n\n\tconst groupedItems = items.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tconst preferredOrder = [\n\t\t\"野菜\",\n\t\t\"肉類\",\n\t\t\"魚介類\",\n\t\t\"卵・乳製品\",\n\t\t\"豆・豆製品\",\n\t\t\"穀類・パン \",\n\t\t\"調味料\",\n\t\t\"加工食品\",\n\t\t\"その他\",\n\t];\n\n\tconst categories = Object.keys(groupedItems).sort((a, b) => {\n\t\treturn preferredOrder.indexOf(a) - preferredOrder.indexOf(b);\n\t});\n\n\tconst handleClick = (item: ShoppingItem) => {\n\t\tsetItems((prev) =>\n\t\t\tprev.map((preItem) => {\n\t\t\t\treturn preItem.id === item.id\n\t\t\t\t\t? { ...preItem, checked: !item.checked }\n\t\t\t\t\t: preItem;\n\t\t\t}),\n\t\t);\n\t\tsetChangedItems((prev) => new Set(prev).add(item.item_id));\n\t\tsetLoadingItems((prev) => [...prev, item.id]);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(async () => {\n\t\t\tif (changedItems.size === 0) return;\n\n\t\t\ttry {\n\t\t\t\tconst updates = [...changedItems].map((id) => {\n\t\t\t\t\tconst item = items.find((i) => i.item_id === id);\n\t\t\t\t\treturn { id: item.item_id, checked: item.checked };\n\t\t\t\t});\n\t\t\t\tawait api.patch(\n\t\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items/batch_update`,\n\t\t\t\t\t{ updates },\n\t\t\t\t);\n\n\t\t\t\tsetChangedItems(new Set());\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.success(\"保存が完了しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.error(\"保存に失敗しました\");\n\t\t\t}\n\t\t}, 3000);\n\n\t\treturn () => clearTimeout(timer);\n\t}, [changedItems]);\n\n\tconst handleAddItem = async ({\n\t\tname,\n\t\tdisplay_amount,\n\t\tcategory,\n\t}: ShoppingListAddItem): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ item: ShoppingItem }>(\n\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items`,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tdisplay_amount,\n\t\t\t\t\tcategory,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems((prev) => [...prev, { ...response.data.item }]);\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDeleteItem = async (id: number) => {\n\t\ttry {\n\t\t\tawait api.delete(`/shopping_list_items/${id}`);\n\t\t\tsetItems((prev) => prev.filter((item) => item.item_id !== id));\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleAddFridge = async (item: ShoppingItem | ShoppingItem[]) => {\n\t\tconst items = Array.isArray(item) ? item : [item];\n\t\ttry {\n\t\t\tawait api.post(\"/fridge_items\", {\n\t\t\t\tfridge: items.map((item) => ({\n\t\t\t\t\tname: item.name,\n\t\t\t\t\tcategory: item.category,\n\t\t\t\t\tdisplay_amount: item.display_amount,\n\t\t\t\t\tamount: item.amount,\n\t\t\t\t\tunit: item.unit,\n\t\t\t\t})),\n\t\t\t});\n\t\t\ttoast.success(\"冷蔵庫に追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"冷蔵庫の追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"買い物リスト詳細\"\n\t\t\t\tdescription=\"必要な食材をまとめて管理。買い忘れを防げて、効率的な買い物ができます！\"\n\t\t\t/>\n\t\t\t<div className=\"container max-w-screen-md mx-auto px-4 py-8\">\n\t\t\t\t<div className=\"mb-6 flex flex-col md:flex-row gap-2 md:justify-between\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/shoppinglist\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"flex flex-col md:flex-row gap-2\">\n\t\t\t\t\t\t<button className=\"btn btn-outline\" onClick={openModal}>\n\t\t\t\t\t\t\t食材を追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t\t\tonClick={() => handleAddFridge(items)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t全ての食材を冷蔵庫に追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"px-4 pb-2\">\n\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`text-xs  md:text-base badge ${selectedCategory === null && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべてのカテゴリ\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={category}\n\t\t\t\t\t\t\t\t\tclassName={`text-xs md:text-base badge ${selectedCategory === category && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(category)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col gap-6\">\n\t\t\t\t\t<div className=\"shadow-md rounded-xl p-4\">\n\t\t\t\t\t\t<div className=\"flex justify-between items-center mb-2\">\n\t\t\t\t\t\t\t<h2 className=\"flex items-center text-2xl \">\n\t\t\t\t\t\t\t\t<ShoppingCart className=\"mr-2 h-5 w-5\" />\n\t\t\t\t\t\t\t\t<span>{shoppingList.attributes.name}</span>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-outline badge-primary\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t作成日： {shoppingList.attributes.created_at_jst}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\tclassName={`text-secondary transition-opacity duration-500 ease-in ${items.length === check.length ? \"opacity-100\" : \"opacity-0\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべての買い物が完了しました！\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"bg-primary h-full transition-all duration-500 ease-in-out\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: `${(check.length / items.length) * 100}%` }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t{Object.entries(filteredGroupedItems).map(\n\t\t\t\t\t\t\t\t([category, categoryItems]) => (\n\t\t\t\t\t\t\t\t\t<div key={category}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center my-2\">\n\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"text-sm text-neutral-500\">{category}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex-1 ml-2 h-0.5 bg-base-300\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t\t{categoryItems.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col md:flex-row md:items-center justify-between space-x-4 py-4 px-4 rounded-lg border border-base-300\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={!!item.checked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleClick(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={loadingItems.includes(item.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"\">{item.name}</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.fromRecipe && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-neutral-500 text-sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tレシピ: {item.fromRecipe}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loadingItems.includes(item.id) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-xs ml-2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-end md:justify-start items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{item.display_amount}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Refrigerator\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddFridge(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDeleteItem(item.item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddItemForm\n\t\t\t\t\t\tcategories={preferredOrder}\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\thandleAddItem={handleAddItem}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ShoppingListDetail;\n"}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/ShoppingListDetail/ShoppingListDetail.tsx"},"span":[2317,2326],"sourceCode":"import { Plus, Refrigerator, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddItemForm from \"../../components/AddItemForm\";\nimport Meta from \"../../components/Meta\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tShoppingItem,\n\tShoppingListAddItem,\n\tShoppingListEntry,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst ShoppingListDetail = () => {\n\tconst shoppingList = useLoaderData<ShoppingListEntry>();\n\tconst [items, setItems] = useState(shoppingList.attributes.shopping_items);\n\tconst navigate = useNavigate();\n\tconst check = items.filter((item) => item.checked === true);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [changedItems, setChangedItems] = useState(new Set<number>());\n\tconst [loadingItems, setLoadingItems] = useState<number[]>([]);\n\tlet filteredItems = items;\n\tif (selectedCategory) {\n\t\tfilteredItems = filteredItems.filter(\n\t\t\t(item) => item.category === selectedCategory,\n\t\t);\n\t}\n\n\tconst filteredGroupedItems = filteredItems.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tObject.keys(filteredGroupedItems).forEach((category) => {\n\t\tfilteredGroupedItems[category].sort((a, b) => a.checked - b.checked);\n\t});\n\n\tconst groupedItems = items.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tconst preferredOrder = [\n\t\t\"野菜\",\n\t\t\"肉類\",\n\t\t\"魚介類\",\n\t\t\"卵・乳製品\",\n\t\t\"豆・豆製品\",\n\t\t\"穀類・パン \",\n\t\t\"調味料\",\n\t\t\"加工食品\",\n\t\t\"その他\",\n\t];\n\n\tconst categories = Object.keys(groupedItems).sort((a, b) => {\n\t\treturn preferredOrder.indexOf(a) - preferredOrder.indexOf(b);\n\t});\n\n\tconst handleClick = (item: ShoppingItem) => {\n\t\tsetItems((prev) =>\n\t\t\tprev.map((preItem) => {\n\t\t\t\treturn preItem.id === item.id\n\t\t\t\t\t? { ...preItem, checked: !item.checked }\n\t\t\t\t\t: preItem;\n\t\t\t}),\n\t\t);\n\t\tsetChangedItems((prev) => new Set(prev).add(item.item_id));\n\t\tsetLoadingItems((prev) => [...prev, item.id]);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(async () => {\n\t\t\tif (changedItems.size === 0) return;\n\n\t\t\ttry {\n\t\t\t\tconst updates = [...changedItems].map((id) => {\n\t\t\t\t\tconst item = items.find((i) => i.item_id === id);\n\t\t\t\t\treturn { id: item.item_id, checked: item.checked };\n\t\t\t\t});\n\t\t\t\tawait api.patch(\n\t\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items/batch_update`,\n\t\t\t\t\t{ updates },\n\t\t\t\t);\n\n\t\t\t\tsetChangedItems(new Set());\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.success(\"保存が完了しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.error(\"保存に失敗しました\");\n\t\t\t}\n\t\t}, 3000);\n\n\t\treturn () => clearTimeout(timer);\n\t}, [changedItems]);\n\n\tconst handleAddItem = async ({\n\t\tname,\n\t\tdisplay_amount,\n\t\tcategory,\n\t}: ShoppingListAddItem): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ item: ShoppingItem }>(\n\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items`,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tdisplay_amount,\n\t\t\t\t\tcategory,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems((prev) => [...prev, { ...response.data.item }]);\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDeleteItem = async (id: number) => {\n\t\ttry {\n\t\t\tawait api.delete(`/shopping_list_items/${id}`);\n\t\t\tsetItems((prev) => prev.filter((item) => item.item_id !== id));\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleAddFridge = async (item: ShoppingItem | ShoppingItem[]) => {\n\t\tconst items = Array.isArray(item) ? item : [item];\n\t\ttry {\n\t\t\tawait api.post(\"/fridge_items\", {\n\t\t\t\tfridge: items.map((item) => ({\n\t\t\t\t\tname: item.name,\n\t\t\t\t\tcategory: item.category,\n\t\t\t\t\tdisplay_amount: item.display_amount,\n\t\t\t\t\tamount: item.amount,\n\t\t\t\t\tunit: item.unit,\n\t\t\t\t})),\n\t\t\t});\n\t\t\ttoast.success(\"冷蔵庫に追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"冷蔵庫の追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"買い物リスト詳細\"\n\t\t\t\tdescription=\"必要な食材をまとめて管理。買い忘れを防げて、効率的な買い物ができます！\"\n\t\t\t/>\n\t\t\t<div className=\"container max-w-screen-md mx-auto px-4 py-8\">\n\t\t\t\t<div className=\"mb-6 flex flex-col md:flex-row gap-2 md:justify-between\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/shoppinglist\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"flex flex-col md:flex-row gap-2\">\n\t\t\t\t\t\t<button className=\"btn btn-outline\" onClick={openModal}>\n\t\t\t\t\t\t\t食材を追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t\t\tonClick={() => handleAddFridge(items)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t全ての食材を冷蔵庫に追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"px-4 pb-2\">\n\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`text-xs  md:text-base badge ${selectedCategory === null && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべてのカテゴリ\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={category}\n\t\t\t\t\t\t\t\t\tclassName={`text-xs md:text-base badge ${selectedCategory === category && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(category)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col gap-6\">\n\t\t\t\t\t<div className=\"shadow-md rounded-xl p-4\">\n\t\t\t\t\t\t<div className=\"flex justify-between items-center mb-2\">\n\t\t\t\t\t\t\t<h2 className=\"flex items-center text-2xl \">\n\t\t\t\t\t\t\t\t<ShoppingCart className=\"mr-2 h-5 w-5\" />\n\t\t\t\t\t\t\t\t<span>{shoppingList.attributes.name}</span>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-outline badge-primary\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t作成日： {shoppingList.attributes.created_at_jst}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\tclassName={`text-secondary transition-opacity duration-500 ease-in ${items.length === check.length ? \"opacity-100\" : \"opacity-0\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべての買い物が完了しました！\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"bg-primary h-full transition-all duration-500 ease-in-out\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: `${(check.length / items.length) * 100}%` }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t{Object.entries(filteredGroupedItems).map(\n\t\t\t\t\t\t\t\t([category, categoryItems]) => (\n\t\t\t\t\t\t\t\t\t<div key={category}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center my-2\">\n\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"text-sm text-neutral-500\">{category}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex-1 ml-2 h-0.5 bg-base-300\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t\t{categoryItems.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col md:flex-row md:items-center justify-between space-x-4 py-4 px-4 rounded-lg border border-base-300\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={!!item.checked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleClick(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={loadingItems.includes(item.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"\">{item.name}</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.fromRecipe && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-neutral-500 text-sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tレシピ: {item.fromRecipe}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loadingItems.includes(item.id) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-xs ml-2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-end md:justify-start items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{item.display_amount}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Refrigerator\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddFridge(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDeleteItem(item.item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddItemForm\n\t\t\t\t\t\tcategories={preferredOrder}\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\thandleAddItem={handleAddItem}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ShoppingListDetail;\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"error","description":"This hook does not specify all of its dependencies: shoppingList.id","message":[{"elements":[],"content":"This hook does not specify all of its dependencies: shoppingList.id"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This dependency is not specified in the hook dependency list."}]]},{"frame":{"path":null,"span":[2643,2658],"sourceCode":"import { Plus, Refrigerator, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddItemForm from \"../../components/AddItemForm\";\nimport Meta from \"../../components/Meta\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tShoppingItem,\n\tShoppingListAddItem,\n\tShoppingListEntry,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst ShoppingListDetail = () => {\n\tconst shoppingList = useLoaderData<ShoppingListEntry>();\n\tconst [items, setItems] = useState(shoppingList.attributes.shopping_items);\n\tconst navigate = useNavigate();\n\tconst check = items.filter((item) => item.checked === true);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [changedItems, setChangedItems] = useState(new Set<number>());\n\tconst [loadingItems, setLoadingItems] = useState<number[]>([]);\n\tlet filteredItems = items;\n\tif (selectedCategory) {\n\t\tfilteredItems = filteredItems.filter(\n\t\t\t(item) => item.category === selectedCategory,\n\t\t);\n\t}\n\n\tconst filteredGroupedItems = filteredItems.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tObject.keys(filteredGroupedItems).forEach((category) => {\n\t\tfilteredGroupedItems[category].sort((a, b) => a.checked - b.checked);\n\t});\n\n\tconst groupedItems = items.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tconst preferredOrder = [\n\t\t\"野菜\",\n\t\t\"肉類\",\n\t\t\"魚介類\",\n\t\t\"卵・乳製品\",\n\t\t\"豆・豆製品\",\n\t\t\"穀類・パン \",\n\t\t\"調味料\",\n\t\t\"加工食品\",\n\t\t\"その他\",\n\t];\n\n\tconst categories = Object.keys(groupedItems).sort((a, b) => {\n\t\treturn preferredOrder.indexOf(a) - preferredOrder.indexOf(b);\n\t});\n\n\tconst handleClick = (item: ShoppingItem) => {\n\t\tsetItems((prev) =>\n\t\t\tprev.map((preItem) => {\n\t\t\t\treturn preItem.id === item.id\n\t\t\t\t\t? { ...preItem, checked: !item.checked }\n\t\t\t\t\t: preItem;\n\t\t\t}),\n\t\t);\n\t\tsetChangedItems((prev) => new Set(prev).add(item.item_id));\n\t\tsetLoadingItems((prev) => [...prev, item.id]);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(async () => {\n\t\t\tif (changedItems.size === 0) return;\n\n\t\t\ttry {\n\t\t\t\tconst updates = [...changedItems].map((id) => {\n\t\t\t\t\tconst item = items.find((i) => i.item_id === id);\n\t\t\t\t\treturn { id: item.item_id, checked: item.checked };\n\t\t\t\t});\n\t\t\t\tawait api.patch(\n\t\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items/batch_update`,\n\t\t\t\t\t{ updates },\n\t\t\t\t);\n\n\t\t\t\tsetChangedItems(new Set());\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.success(\"保存が完了しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.error(\"保存に失敗しました\");\n\t\t\t}\n\t\t}, 3000);\n\n\t\treturn () => clearTimeout(timer);\n\t}, [changedItems]);\n\n\tconst handleAddItem = async ({\n\t\tname,\n\t\tdisplay_amount,\n\t\tcategory,\n\t}: ShoppingListAddItem): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ item: ShoppingItem }>(\n\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items`,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tdisplay_amount,\n\t\t\t\t\tcategory,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems((prev) => [...prev, { ...response.data.item }]);\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDeleteItem = async (id: number) => {\n\t\ttry {\n\t\t\tawait api.delete(`/shopping_list_items/${id}`);\n\t\t\tsetItems((prev) => prev.filter((item) => item.item_id !== id));\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleAddFridge = async (item: ShoppingItem | ShoppingItem[]) => {\n\t\tconst items = Array.isArray(item) ? item : [item];\n\t\ttry {\n\t\t\tawait api.post(\"/fridge_items\", {\n\t\t\t\tfridge: items.map((item) => ({\n\t\t\t\t\tname: item.name,\n\t\t\t\t\tcategory: item.category,\n\t\t\t\t\tdisplay_amount: item.display_amount,\n\t\t\t\t\tamount: item.amount,\n\t\t\t\t\tunit: item.unit,\n\t\t\t\t})),\n\t\t\t});\n\t\t\ttoast.success(\"冷蔵庫に追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"冷蔵庫の追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"買い物リスト詳細\"\n\t\t\t\tdescription=\"必要な食材をまとめて管理。買い忘れを防げて、効率的な買い物ができます！\"\n\t\t\t/>\n\t\t\t<div className=\"container max-w-screen-md mx-auto px-4 py-8\">\n\t\t\t\t<div className=\"mb-6 flex flex-col md:flex-row gap-2 md:justify-between\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/shoppinglist\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"flex flex-col md:flex-row gap-2\">\n\t\t\t\t\t\t<button className=\"btn btn-outline\" onClick={openModal}>\n\t\t\t\t\t\t\t食材を追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t\t\tonClick={() => handleAddFridge(items)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t全ての食材を冷蔵庫に追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"px-4 pb-2\">\n\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`text-xs  md:text-base badge ${selectedCategory === null && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべてのカテゴリ\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={category}\n\t\t\t\t\t\t\t\t\tclassName={`text-xs md:text-base badge ${selectedCategory === category && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(category)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col gap-6\">\n\t\t\t\t\t<div className=\"shadow-md rounded-xl p-4\">\n\t\t\t\t\t\t<div className=\"flex justify-between items-center mb-2\">\n\t\t\t\t\t\t\t<h2 className=\"flex items-center text-2xl \">\n\t\t\t\t\t\t\t\t<ShoppingCart className=\"mr-2 h-5 w-5\" />\n\t\t\t\t\t\t\t\t<span>{shoppingList.attributes.name}</span>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-outline badge-primary\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t作成日： {shoppingList.attributes.created_at_jst}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\tclassName={`text-secondary transition-opacity duration-500 ease-in ${items.length === check.length ? \"opacity-100\" : \"opacity-0\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべての買い物が完了しました！\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"bg-primary h-full transition-all duration-500 ease-in-out\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: `${(check.length / items.length) * 100}%` }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t{Object.entries(filteredGroupedItems).map(\n\t\t\t\t\t\t\t\t([category, categoryItems]) => (\n\t\t\t\t\t\t\t\t\t<div key={category}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center my-2\">\n\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"text-sm text-neutral-500\">{category}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex-1 ml-2 h-0.5 bg-base-300\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t\t{categoryItems.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col md:flex-row md:items-center justify-between space-x-4 py-4 px-4 rounded-lg border border-base-300\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={!!item.checked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleClick(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={loadingItems.includes(item.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"\">{item.name}</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.fromRecipe && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-neutral-500 text-sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tレシピ: {item.fromRecipe}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loadingItems.includes(item.id) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-xs ml-2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-end md:justify-start items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{item.display_amount}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Refrigerator\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddFridge(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDeleteItem(item.item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddItemForm\n\t\t\t\t\t\tcategories={preferredOrder}\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\thandleAddItem={handleAddItem}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ShoppingListDetail;\n"}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/ShoppingListDetail/ShoppingListDetail.tsx"},"span":[2317,2326],"sourceCode":"import { Plus, Refrigerator, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddItemForm from \"../../components/AddItemForm\";\nimport Meta from \"../../components/Meta\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tShoppingItem,\n\tShoppingListAddItem,\n\tShoppingListEntry,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst ShoppingListDetail = () => {\n\tconst shoppingList = useLoaderData<ShoppingListEntry>();\n\tconst [items, setItems] = useState(shoppingList.attributes.shopping_items);\n\tconst navigate = useNavigate();\n\tconst check = items.filter((item) => item.checked === true);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [changedItems, setChangedItems] = useState(new Set<number>());\n\tconst [loadingItems, setLoadingItems] = useState<number[]>([]);\n\tlet filteredItems = items;\n\tif (selectedCategory) {\n\t\tfilteredItems = filteredItems.filter(\n\t\t\t(item) => item.category === selectedCategory,\n\t\t);\n\t}\n\n\tconst filteredGroupedItems = filteredItems.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tObject.keys(filteredGroupedItems).forEach((category) => {\n\t\tfilteredGroupedItems[category].sort((a, b) => a.checked - b.checked);\n\t});\n\n\tconst groupedItems = items.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tconst preferredOrder = [\n\t\t\"野菜\",\n\t\t\"肉類\",\n\t\t\"魚介類\",\n\t\t\"卵・乳製品\",\n\t\t\"豆・豆製品\",\n\t\t\"穀類・パン \",\n\t\t\"調味料\",\n\t\t\"加工食品\",\n\t\t\"その他\",\n\t];\n\n\tconst categories = Object.keys(groupedItems).sort((a, b) => {\n\t\treturn preferredOrder.indexOf(a) - preferredOrder.indexOf(b);\n\t});\n\n\tconst handleClick = (item: ShoppingItem) => {\n\t\tsetItems((prev) =>\n\t\t\tprev.map((preItem) => {\n\t\t\t\treturn preItem.id === item.id\n\t\t\t\t\t? { ...preItem, checked: !item.checked }\n\t\t\t\t\t: preItem;\n\t\t\t}),\n\t\t);\n\t\tsetChangedItems((prev) => new Set(prev).add(item.item_id));\n\t\tsetLoadingItems((prev) => [...prev, item.id]);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(async () => {\n\t\t\tif (changedItems.size === 0) return;\n\n\t\t\ttry {\n\t\t\t\tconst updates = [...changedItems].map((id) => {\n\t\t\t\t\tconst item = items.find((i) => i.item_id === id);\n\t\t\t\t\treturn { id: item.item_id, checked: item.checked };\n\t\t\t\t});\n\t\t\t\tawait api.patch(\n\t\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items/batch_update`,\n\t\t\t\t\t{ updates },\n\t\t\t\t);\n\n\t\t\t\tsetChangedItems(new Set());\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.success(\"保存が完了しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.error(\"保存に失敗しました\");\n\t\t\t}\n\t\t}, 3000);\n\n\t\treturn () => clearTimeout(timer);\n\t}, [changedItems]);\n\n\tconst handleAddItem = async ({\n\t\tname,\n\t\tdisplay_amount,\n\t\tcategory,\n\t}: ShoppingListAddItem): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ item: ShoppingItem }>(\n\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items`,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tdisplay_amount,\n\t\t\t\t\tcategory,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems((prev) => [...prev, { ...response.data.item }]);\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDeleteItem = async (id: number) => {\n\t\ttry {\n\t\t\tawait api.delete(`/shopping_list_items/${id}`);\n\t\t\tsetItems((prev) => prev.filter((item) => item.item_id !== id));\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleAddFridge = async (item: ShoppingItem | ShoppingItem[]) => {\n\t\tconst items = Array.isArray(item) ? item : [item];\n\t\ttry {\n\t\t\tawait api.post(\"/fridge_items\", {\n\t\t\t\tfridge: items.map((item) => ({\n\t\t\t\t\tname: item.name,\n\t\t\t\t\tcategory: item.category,\n\t\t\t\t\tdisplay_amount: item.display_amount,\n\t\t\t\t\tamount: item.amount,\n\t\t\t\t\tunit: item.unit,\n\t\t\t\t})),\n\t\t\t});\n\t\t\ttoast.success(\"冷蔵庫に追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"冷蔵庫の追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"買い物リスト詳細\"\n\t\t\t\tdescription=\"必要な食材をまとめて管理。買い忘れを防げて、効率的な買い物ができます！\"\n\t\t\t/>\n\t\t\t<div className=\"container max-w-screen-md mx-auto px-4 py-8\">\n\t\t\t\t<div className=\"mb-6 flex flex-col md:flex-row gap-2 md:justify-between\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/shoppinglist\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"flex flex-col md:flex-row gap-2\">\n\t\t\t\t\t\t<button className=\"btn btn-outline\" onClick={openModal}>\n\t\t\t\t\t\t\t食材を追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t\t\tonClick={() => handleAddFridge(items)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t全ての食材を冷蔵庫に追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"px-4 pb-2\">\n\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`text-xs  md:text-base badge ${selectedCategory === null && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべてのカテゴリ\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={category}\n\t\t\t\t\t\t\t\t\tclassName={`text-xs md:text-base badge ${selectedCategory === category && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(category)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col gap-6\">\n\t\t\t\t\t<div className=\"shadow-md rounded-xl p-4\">\n\t\t\t\t\t\t<div className=\"flex justify-between items-center mb-2\">\n\t\t\t\t\t\t\t<h2 className=\"flex items-center text-2xl \">\n\t\t\t\t\t\t\t\t<ShoppingCart className=\"mr-2 h-5 w-5\" />\n\t\t\t\t\t\t\t\t<span>{shoppingList.attributes.name}</span>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-outline badge-primary\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t作成日： {shoppingList.attributes.created_at_jst}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\tclassName={`text-secondary transition-opacity duration-500 ease-in ${items.length === check.length ? \"opacity-100\" : \"opacity-0\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべての買い物が完了しました！\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"bg-primary h-full transition-all duration-500 ease-in-out\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: `${(check.length / items.length) * 100}%` }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t{Object.entries(filteredGroupedItems).map(\n\t\t\t\t\t\t\t\t([category, categoryItems]) => (\n\t\t\t\t\t\t\t\t\t<div key={category}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center my-2\">\n\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"text-sm text-neutral-500\">{category}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex-1 ml-2 h-0.5 bg-base-300\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t\t{categoryItems.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col md:flex-row md:items-center justify-between space-x-4 py-4 px-4 rounded-lg border border-base-300\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={!!item.checked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleClick(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={loadingItems.includes(item.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"\">{item.name}</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.fromRecipe && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-neutral-500 text-sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tレシピ: {item.fromRecipe}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loadingItems.includes(item.id) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-xs ml-2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-end md:justify-start items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{item.display_amount}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Refrigerator\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddFridge(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDeleteItem(item.item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddItemForm\n\t\t\t\t\t\tcategories={preferredOrder}\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\thandleAddItem={handleAddItem}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ShoppingListDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/ShoppingListDetail/ShoppingListDetail.tsx"},"span":[4755,4851],"sourceCode":"import { Plus, Refrigerator, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddItemForm from \"../../components/AddItemForm\";\nimport Meta from \"../../components/Meta\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tShoppingItem,\n\tShoppingListAddItem,\n\tShoppingListEntry,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst ShoppingListDetail = () => {\n\tconst shoppingList = useLoaderData<ShoppingListEntry>();\n\tconst [items, setItems] = useState(shoppingList.attributes.shopping_items);\n\tconst navigate = useNavigate();\n\tconst check = items.filter((item) => item.checked === true);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [changedItems, setChangedItems] = useState(new Set<number>());\n\tconst [loadingItems, setLoadingItems] = useState<number[]>([]);\n\tlet filteredItems = items;\n\tif (selectedCategory) {\n\t\tfilteredItems = filteredItems.filter(\n\t\t\t(item) => item.category === selectedCategory,\n\t\t);\n\t}\n\n\tconst filteredGroupedItems = filteredItems.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tObject.keys(filteredGroupedItems).forEach((category) => {\n\t\tfilteredGroupedItems[category].sort((a, b) => a.checked - b.checked);\n\t});\n\n\tconst groupedItems = items.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tconst preferredOrder = [\n\t\t\"野菜\",\n\t\t\"肉類\",\n\t\t\"魚介類\",\n\t\t\"卵・乳製品\",\n\t\t\"豆・豆製品\",\n\t\t\"穀類・パン \",\n\t\t\"調味料\",\n\t\t\"加工食品\",\n\t\t\"その他\",\n\t];\n\n\tconst categories = Object.keys(groupedItems).sort((a, b) => {\n\t\treturn preferredOrder.indexOf(a) - preferredOrder.indexOf(b);\n\t});\n\n\tconst handleClick = (item: ShoppingItem) => {\n\t\tsetItems((prev) =>\n\t\t\tprev.map((preItem) => {\n\t\t\t\treturn preItem.id === item.id\n\t\t\t\t\t? { ...preItem, checked: !item.checked }\n\t\t\t\t\t: preItem;\n\t\t\t}),\n\t\t);\n\t\tsetChangedItems((prev) => new Set(prev).add(item.item_id));\n\t\tsetLoadingItems((prev) => [...prev, item.id]);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(async () => {\n\t\t\tif (changedItems.size === 0) return;\n\n\t\t\ttry {\n\t\t\t\tconst updates = [...changedItems].map((id) => {\n\t\t\t\t\tconst item = items.find((i) => i.item_id === id);\n\t\t\t\t\treturn { id: item.item_id, checked: item.checked };\n\t\t\t\t});\n\t\t\t\tawait api.patch(\n\t\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items/batch_update`,\n\t\t\t\t\t{ updates },\n\t\t\t\t);\n\n\t\t\t\tsetChangedItems(new Set());\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.success(\"保存が完了しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.error(\"保存に失敗しました\");\n\t\t\t}\n\t\t}, 3000);\n\n\t\treturn () => clearTimeout(timer);\n\t}, [changedItems]);\n\n\tconst handleAddItem = async ({\n\t\tname,\n\t\tdisplay_amount,\n\t\tcategory,\n\t}: ShoppingListAddItem): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ item: ShoppingItem }>(\n\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items`,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tdisplay_amount,\n\t\t\t\t\tcategory,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems((prev) => [...prev, { ...response.data.item }]);\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDeleteItem = async (id: number) => {\n\t\ttry {\n\t\t\tawait api.delete(`/shopping_list_items/${id}`);\n\t\t\tsetItems((prev) => prev.filter((item) => item.item_id !== id));\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleAddFridge = async (item: ShoppingItem | ShoppingItem[]) => {\n\t\tconst items = Array.isArray(item) ? item : [item];\n\t\ttry {\n\t\t\tawait api.post(\"/fridge_items\", {\n\t\t\t\tfridge: items.map((item) => ({\n\t\t\t\t\tname: item.name,\n\t\t\t\t\tcategory: item.category,\n\t\t\t\t\tdisplay_amount: item.display_amount,\n\t\t\t\t\tamount: item.amount,\n\t\t\t\t\tunit: item.unit,\n\t\t\t\t})),\n\t\t\t});\n\t\t\ttoast.success(\"冷蔵庫に追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"冷蔵庫の追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"買い物リスト詳細\"\n\t\t\t\tdescription=\"必要な食材をまとめて管理。買い忘れを防げて、効率的な買い物ができます！\"\n\t\t\t/>\n\t\t\t<div className=\"container max-w-screen-md mx-auto px-4 py-8\">\n\t\t\t\t<div className=\"mb-6 flex flex-col md:flex-row gap-2 md:justify-between\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/shoppinglist\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"flex flex-col md:flex-row gap-2\">\n\t\t\t\t\t\t<button className=\"btn btn-outline\" onClick={openModal}>\n\t\t\t\t\t\t\t食材を追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t\t\tonClick={() => handleAddFridge(items)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t全ての食材を冷蔵庫に追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"px-4 pb-2\">\n\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`text-xs  md:text-base badge ${selectedCategory === null && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべてのカテゴリ\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={category}\n\t\t\t\t\t\t\t\t\tclassName={`text-xs md:text-base badge ${selectedCategory === category && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(category)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col gap-6\">\n\t\t\t\t\t<div className=\"shadow-md rounded-xl p-4\">\n\t\t\t\t\t\t<div className=\"flex justify-between items-center mb-2\">\n\t\t\t\t\t\t\t<h2 className=\"flex items-center text-2xl \">\n\t\t\t\t\t\t\t\t<ShoppingCart className=\"mr-2 h-5 w-5\" />\n\t\t\t\t\t\t\t\t<span>{shoppingList.attributes.name}</span>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-outline badge-primary\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t作成日： {shoppingList.attributes.created_at_jst}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\tclassName={`text-secondary transition-opacity duration-500 ease-in ${items.length === check.length ? \"opacity-100\" : \"opacity-0\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべての買い物が完了しました！\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"bg-primary h-full transition-all duration-500 ease-in-out\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: `${(check.length / items.length) * 100}%` }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t{Object.entries(filteredGroupedItems).map(\n\t\t\t\t\t\t\t\t([category, categoryItems]) => (\n\t\t\t\t\t\t\t\t\t<div key={category}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center my-2\">\n\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"text-sm text-neutral-500\">{category}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex-1 ml-2 h-0.5 bg-base-300\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t\t{categoryItems.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col md:flex-row md:items-center justify-between space-x-4 py-4 px-4 rounded-lg border border-base-300\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={!!item.checked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleClick(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={loadingItems.includes(item.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"\">{item.name}</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.fromRecipe && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-neutral-500 text-sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tレシピ: {item.fromRecipe}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loadingItems.includes(item.id) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-xs ml-2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-end md:justify-start items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{item.display_amount}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Refrigerator\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddFridge(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDeleteItem(item.item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddItemForm\n\t\t\t\t\t\tcategories={preferredOrder}\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\thandleAddItem={handleAddItem}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ShoppingListDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/ShoppingListDetail/ShoppingListDetail.tsx"},"span":[4941,4997],"sourceCode":"import { Plus, Refrigerator, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddItemForm from \"../../components/AddItemForm\";\nimport Meta from \"../../components/Meta\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tShoppingItem,\n\tShoppingListAddItem,\n\tShoppingListEntry,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst ShoppingListDetail = () => {\n\tconst shoppingList = useLoaderData<ShoppingListEntry>();\n\tconst [items, setItems] = useState(shoppingList.attributes.shopping_items);\n\tconst navigate = useNavigate();\n\tconst check = items.filter((item) => item.checked === true);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [changedItems, setChangedItems] = useState(new Set<number>());\n\tconst [loadingItems, setLoadingItems] = useState<number[]>([]);\n\tlet filteredItems = items;\n\tif (selectedCategory) {\n\t\tfilteredItems = filteredItems.filter(\n\t\t\t(item) => item.category === selectedCategory,\n\t\t);\n\t}\n\n\tconst filteredGroupedItems = filteredItems.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tObject.keys(filteredGroupedItems).forEach((category) => {\n\t\tfilteredGroupedItems[category].sort((a, b) => a.checked - b.checked);\n\t});\n\n\tconst groupedItems = items.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tconst preferredOrder = [\n\t\t\"野菜\",\n\t\t\"肉類\",\n\t\t\"魚介類\",\n\t\t\"卵・乳製品\",\n\t\t\"豆・豆製品\",\n\t\t\"穀類・パン \",\n\t\t\"調味料\",\n\t\t\"加工食品\",\n\t\t\"その他\",\n\t];\n\n\tconst categories = Object.keys(groupedItems).sort((a, b) => {\n\t\treturn preferredOrder.indexOf(a) - preferredOrder.indexOf(b);\n\t});\n\n\tconst handleClick = (item: ShoppingItem) => {\n\t\tsetItems((prev) =>\n\t\t\tprev.map((preItem) => {\n\t\t\t\treturn preItem.id === item.id\n\t\t\t\t\t? { ...preItem, checked: !item.checked }\n\t\t\t\t\t: preItem;\n\t\t\t}),\n\t\t);\n\t\tsetChangedItems((prev) => new Set(prev).add(item.item_id));\n\t\tsetLoadingItems((prev) => [...prev, item.id]);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(async () => {\n\t\t\tif (changedItems.size === 0) return;\n\n\t\t\ttry {\n\t\t\t\tconst updates = [...changedItems].map((id) => {\n\t\t\t\t\tconst item = items.find((i) => i.item_id === id);\n\t\t\t\t\treturn { id: item.item_id, checked: item.checked };\n\t\t\t\t});\n\t\t\t\tawait api.patch(\n\t\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items/batch_update`,\n\t\t\t\t\t{ updates },\n\t\t\t\t);\n\n\t\t\t\tsetChangedItems(new Set());\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.success(\"保存が完了しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.error(\"保存に失敗しました\");\n\t\t\t}\n\t\t}, 3000);\n\n\t\treturn () => clearTimeout(timer);\n\t}, [changedItems]);\n\n\tconst handleAddItem = async ({\n\t\tname,\n\t\tdisplay_amount,\n\t\tcategory,\n\t}: ShoppingListAddItem): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ item: ShoppingItem }>(\n\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items`,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tdisplay_amount,\n\t\t\t\t\tcategory,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems((prev) => [...prev, { ...response.data.item }]);\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDeleteItem = async (id: number) => {\n\t\ttry {\n\t\t\tawait api.delete(`/shopping_list_items/${id}`);\n\t\t\tsetItems((prev) => prev.filter((item) => item.item_id !== id));\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleAddFridge = async (item: ShoppingItem | ShoppingItem[]) => {\n\t\tconst items = Array.isArray(item) ? item : [item];\n\t\ttry {\n\t\t\tawait api.post(\"/fridge_items\", {\n\t\t\t\tfridge: items.map((item) => ({\n\t\t\t\t\tname: item.name,\n\t\t\t\t\tcategory: item.category,\n\t\t\t\t\tdisplay_amount: item.display_amount,\n\t\t\t\t\tamount: item.amount,\n\t\t\t\t\tunit: item.unit,\n\t\t\t\t})),\n\t\t\t});\n\t\t\ttoast.success(\"冷蔵庫に追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"冷蔵庫の追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"買い物リスト詳細\"\n\t\t\t\tdescription=\"必要な食材をまとめて管理。買い忘れを防げて、効率的な買い物ができます！\"\n\t\t\t/>\n\t\t\t<div className=\"container max-w-screen-md mx-auto px-4 py-8\">\n\t\t\t\t<div className=\"mb-6 flex flex-col md:flex-row gap-2 md:justify-between\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/shoppinglist\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"flex flex-col md:flex-row gap-2\">\n\t\t\t\t\t\t<button className=\"btn btn-outline\" onClick={openModal}>\n\t\t\t\t\t\t\t食材を追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t\t\tonClick={() => handleAddFridge(items)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t全ての食材を冷蔵庫に追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"px-4 pb-2\">\n\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`text-xs  md:text-base badge ${selectedCategory === null && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべてのカテゴリ\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={category}\n\t\t\t\t\t\t\t\t\tclassName={`text-xs md:text-base badge ${selectedCategory === category && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(category)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col gap-6\">\n\t\t\t\t\t<div className=\"shadow-md rounded-xl p-4\">\n\t\t\t\t\t\t<div className=\"flex justify-between items-center mb-2\">\n\t\t\t\t\t\t\t<h2 className=\"flex items-center text-2xl \">\n\t\t\t\t\t\t\t\t<ShoppingCart className=\"mr-2 h-5 w-5\" />\n\t\t\t\t\t\t\t\t<span>{shoppingList.attributes.name}</span>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-outline badge-primary\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t作成日： {shoppingList.attributes.created_at_jst}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\tclassName={`text-secondary transition-opacity duration-500 ease-in ${items.length === check.length ? \"opacity-100\" : \"opacity-0\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべての買い物が完了しました！\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"bg-primary h-full transition-all duration-500 ease-in-out\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: `${(check.length / items.length) * 100}%` }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t{Object.entries(filteredGroupedItems).map(\n\t\t\t\t\t\t\t\t([category, categoryItems]) => (\n\t\t\t\t\t\t\t\t\t<div key={category}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center my-2\">\n\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"text-sm text-neutral-500\">{category}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex-1 ml-2 h-0.5 bg-base-300\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t\t{categoryItems.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col md:flex-row md:items-center justify-between space-x-4 py-4 px-4 rounded-lg border border-base-300\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={!!item.checked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleClick(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={loadingItems.includes(item.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"\">{item.name}</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.fromRecipe && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-neutral-500 text-sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tレシピ: {item.fromRecipe}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loadingItems.includes(item.id) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-xs ml-2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-end md:justify-start items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{item.display_amount}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Refrigerator\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddFridge(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDeleteItem(item.item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddItemForm\n\t\t\t\t\t\tcategories={preferredOrder}\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\thandleAddItem={handleAddItem}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ShoppingListDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/ShoppingListDetail/ShoppingListDetail.tsx"},"span":[5049,5145],"sourceCode":"import { Plus, Refrigerator, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddItemForm from \"../../components/AddItemForm\";\nimport Meta from \"../../components/Meta\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tShoppingItem,\n\tShoppingListAddItem,\n\tShoppingListEntry,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst ShoppingListDetail = () => {\n\tconst shoppingList = useLoaderData<ShoppingListEntry>();\n\tconst [items, setItems] = useState(shoppingList.attributes.shopping_items);\n\tconst navigate = useNavigate();\n\tconst check = items.filter((item) => item.checked === true);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [changedItems, setChangedItems] = useState(new Set<number>());\n\tconst [loadingItems, setLoadingItems] = useState<number[]>([]);\n\tlet filteredItems = items;\n\tif (selectedCategory) {\n\t\tfilteredItems = filteredItems.filter(\n\t\t\t(item) => item.category === selectedCategory,\n\t\t);\n\t}\n\n\tconst filteredGroupedItems = filteredItems.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tObject.keys(filteredGroupedItems).forEach((category) => {\n\t\tfilteredGroupedItems[category].sort((a, b) => a.checked - b.checked);\n\t});\n\n\tconst groupedItems = items.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tconst preferredOrder = [\n\t\t\"野菜\",\n\t\t\"肉類\",\n\t\t\"魚介類\",\n\t\t\"卵・乳製品\",\n\t\t\"豆・豆製品\",\n\t\t\"穀類・パン \",\n\t\t\"調味料\",\n\t\t\"加工食品\",\n\t\t\"その他\",\n\t];\n\n\tconst categories = Object.keys(groupedItems).sort((a, b) => {\n\t\treturn preferredOrder.indexOf(a) - preferredOrder.indexOf(b);\n\t});\n\n\tconst handleClick = (item: ShoppingItem) => {\n\t\tsetItems((prev) =>\n\t\t\tprev.map((preItem) => {\n\t\t\t\treturn preItem.id === item.id\n\t\t\t\t\t? { ...preItem, checked: !item.checked }\n\t\t\t\t\t: preItem;\n\t\t\t}),\n\t\t);\n\t\tsetChangedItems((prev) => new Set(prev).add(item.item_id));\n\t\tsetLoadingItems((prev) => [...prev, item.id]);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(async () => {\n\t\t\tif (changedItems.size === 0) return;\n\n\t\t\ttry {\n\t\t\t\tconst updates = [...changedItems].map((id) => {\n\t\t\t\t\tconst item = items.find((i) => i.item_id === id);\n\t\t\t\t\treturn { id: item.item_id, checked: item.checked };\n\t\t\t\t});\n\t\t\t\tawait api.patch(\n\t\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items/batch_update`,\n\t\t\t\t\t{ updates },\n\t\t\t\t);\n\n\t\t\t\tsetChangedItems(new Set());\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.success(\"保存が完了しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.error(\"保存に失敗しました\");\n\t\t\t}\n\t\t}, 3000);\n\n\t\treturn () => clearTimeout(timer);\n\t}, [changedItems]);\n\n\tconst handleAddItem = async ({\n\t\tname,\n\t\tdisplay_amount,\n\t\tcategory,\n\t}: ShoppingListAddItem): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ item: ShoppingItem }>(\n\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items`,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tdisplay_amount,\n\t\t\t\t\tcategory,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems((prev) => [...prev, { ...response.data.item }]);\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDeleteItem = async (id: number) => {\n\t\ttry {\n\t\t\tawait api.delete(`/shopping_list_items/${id}`);\n\t\t\tsetItems((prev) => prev.filter((item) => item.item_id !== id));\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleAddFridge = async (item: ShoppingItem | ShoppingItem[]) => {\n\t\tconst items = Array.isArray(item) ? item : [item];\n\t\ttry {\n\t\t\tawait api.post(\"/fridge_items\", {\n\t\t\t\tfridge: items.map((item) => ({\n\t\t\t\t\tname: item.name,\n\t\t\t\t\tcategory: item.category,\n\t\t\t\t\tdisplay_amount: item.display_amount,\n\t\t\t\t\tamount: item.amount,\n\t\t\t\t\tunit: item.unit,\n\t\t\t\t})),\n\t\t\t});\n\t\t\ttoast.success(\"冷蔵庫に追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"冷蔵庫の追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"買い物リスト詳細\"\n\t\t\t\tdescription=\"必要な食材をまとめて管理。買い忘れを防げて、効率的な買い物ができます！\"\n\t\t\t/>\n\t\t\t<div className=\"container max-w-screen-md mx-auto px-4 py-8\">\n\t\t\t\t<div className=\"mb-6 flex flex-col md:flex-row gap-2 md:justify-between\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/shoppinglist\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"flex flex-col md:flex-row gap-2\">\n\t\t\t\t\t\t<button className=\"btn btn-outline\" onClick={openModal}>\n\t\t\t\t\t\t\t食材を追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t\t\tonClick={() => handleAddFridge(items)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t全ての食材を冷蔵庫に追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"px-4 pb-2\">\n\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`text-xs  md:text-base badge ${selectedCategory === null && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべてのカテゴリ\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={category}\n\t\t\t\t\t\t\t\t\tclassName={`text-xs md:text-base badge ${selectedCategory === category && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(category)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col gap-6\">\n\t\t\t\t\t<div className=\"shadow-md rounded-xl p-4\">\n\t\t\t\t\t\t<div className=\"flex justify-between items-center mb-2\">\n\t\t\t\t\t\t\t<h2 className=\"flex items-center text-2xl \">\n\t\t\t\t\t\t\t\t<ShoppingCart className=\"mr-2 h-5 w-5\" />\n\t\t\t\t\t\t\t\t<span>{shoppingList.attributes.name}</span>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-outline badge-primary\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t作成日： {shoppingList.attributes.created_at_jst}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\tclassName={`text-secondary transition-opacity duration-500 ease-in ${items.length === check.length ? \"opacity-100\" : \"opacity-0\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべての買い物が完了しました！\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"bg-primary h-full transition-all duration-500 ease-in-out\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: `${(check.length / items.length) * 100}%` }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t{Object.entries(filteredGroupedItems).map(\n\t\t\t\t\t\t\t\t([category, categoryItems]) => (\n\t\t\t\t\t\t\t\t\t<div key={category}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center my-2\">\n\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"text-sm text-neutral-500\">{category}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex-1 ml-2 h-0.5 bg-base-300\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t\t{categoryItems.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col md:flex-row md:items-center justify-between space-x-4 py-4 px-4 rounded-lg border border-base-300\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={!!item.checked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleClick(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={loadingItems.includes(item.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"\">{item.name}</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.fromRecipe && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-neutral-500 text-sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tレシピ: {item.fromRecipe}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loadingItems.includes(item.id) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-xs ml-2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-end md:justify-start items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{item.display_amount}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Refrigerator\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddFridge(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDeleteItem(item.item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddItemForm\n\t\t\t\t\t\tcategories={preferredOrder}\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\thandleAddItem={handleAddItem}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ShoppingListDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/ShoppingListDetail/ShoppingListDetail.tsx"},"span":[5367,5531],"sourceCode":"import { Plus, Refrigerator, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddItemForm from \"../../components/AddItemForm\";\nimport Meta from \"../../components/Meta\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tShoppingItem,\n\tShoppingListAddItem,\n\tShoppingListEntry,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst ShoppingListDetail = () => {\n\tconst shoppingList = useLoaderData<ShoppingListEntry>();\n\tconst [items, setItems] = useState(shoppingList.attributes.shopping_items);\n\tconst navigate = useNavigate();\n\tconst check = items.filter((item) => item.checked === true);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [changedItems, setChangedItems] = useState(new Set<number>());\n\tconst [loadingItems, setLoadingItems] = useState<number[]>([]);\n\tlet filteredItems = items;\n\tif (selectedCategory) {\n\t\tfilteredItems = filteredItems.filter(\n\t\t\t(item) => item.category === selectedCategory,\n\t\t);\n\t}\n\n\tconst filteredGroupedItems = filteredItems.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tObject.keys(filteredGroupedItems).forEach((category) => {\n\t\tfilteredGroupedItems[category].sort((a, b) => a.checked - b.checked);\n\t});\n\n\tconst groupedItems = items.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tconst preferredOrder = [\n\t\t\"野菜\",\n\t\t\"肉類\",\n\t\t\"魚介類\",\n\t\t\"卵・乳製品\",\n\t\t\"豆・豆製品\",\n\t\t\"穀類・パン \",\n\t\t\"調味料\",\n\t\t\"加工食品\",\n\t\t\"その他\",\n\t];\n\n\tconst categories = Object.keys(groupedItems).sort((a, b) => {\n\t\treturn preferredOrder.indexOf(a) - preferredOrder.indexOf(b);\n\t});\n\n\tconst handleClick = (item: ShoppingItem) => {\n\t\tsetItems((prev) =>\n\t\t\tprev.map((preItem) => {\n\t\t\t\treturn preItem.id === item.id\n\t\t\t\t\t? { ...preItem, checked: !item.checked }\n\t\t\t\t\t: preItem;\n\t\t\t}),\n\t\t);\n\t\tsetChangedItems((prev) => new Set(prev).add(item.item_id));\n\t\tsetLoadingItems((prev) => [...prev, item.id]);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(async () => {\n\t\t\tif (changedItems.size === 0) return;\n\n\t\t\ttry {\n\t\t\t\tconst updates = [...changedItems].map((id) => {\n\t\t\t\t\tconst item = items.find((i) => i.item_id === id);\n\t\t\t\t\treturn { id: item.item_id, checked: item.checked };\n\t\t\t\t});\n\t\t\t\tawait api.patch(\n\t\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items/batch_update`,\n\t\t\t\t\t{ updates },\n\t\t\t\t);\n\n\t\t\t\tsetChangedItems(new Set());\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.success(\"保存が完了しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.error(\"保存に失敗しました\");\n\t\t\t}\n\t\t}, 3000);\n\n\t\treturn () => clearTimeout(timer);\n\t}, [changedItems]);\n\n\tconst handleAddItem = async ({\n\t\tname,\n\t\tdisplay_amount,\n\t\tcategory,\n\t}: ShoppingListAddItem): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ item: ShoppingItem }>(\n\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items`,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tdisplay_amount,\n\t\t\t\t\tcategory,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems((prev) => [...prev, { ...response.data.item }]);\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDeleteItem = async (id: number) => {\n\t\ttry {\n\t\t\tawait api.delete(`/shopping_list_items/${id}`);\n\t\t\tsetItems((prev) => prev.filter((item) => item.item_id !== id));\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleAddFridge = async (item: ShoppingItem | ShoppingItem[]) => {\n\t\tconst items = Array.isArray(item) ? item : [item];\n\t\ttry {\n\t\t\tawait api.post(\"/fridge_items\", {\n\t\t\t\tfridge: items.map((item) => ({\n\t\t\t\t\tname: item.name,\n\t\t\t\t\tcategory: item.category,\n\t\t\t\t\tdisplay_amount: item.display_amount,\n\t\t\t\t\tamount: item.amount,\n\t\t\t\t\tunit: item.unit,\n\t\t\t\t})),\n\t\t\t});\n\t\t\ttoast.success(\"冷蔵庫に追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"冷蔵庫の追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"買い物リスト詳細\"\n\t\t\t\tdescription=\"必要な食材をまとめて管理。買い忘れを防げて、効率的な買い物ができます！\"\n\t\t\t/>\n\t\t\t<div className=\"container max-w-screen-md mx-auto px-4 py-8\">\n\t\t\t\t<div className=\"mb-6 flex flex-col md:flex-row gap-2 md:justify-between\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/shoppinglist\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"flex flex-col md:flex-row gap-2\">\n\t\t\t\t\t\t<button className=\"btn btn-outline\" onClick={openModal}>\n\t\t\t\t\t\t\t食材を追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t\t\tonClick={() => handleAddFridge(items)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t全ての食材を冷蔵庫に追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"px-4 pb-2\">\n\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`text-xs  md:text-base badge ${selectedCategory === null && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべてのカテゴリ\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={category}\n\t\t\t\t\t\t\t\t\tclassName={`text-xs md:text-base badge ${selectedCategory === category && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(category)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col gap-6\">\n\t\t\t\t\t<div className=\"shadow-md rounded-xl p-4\">\n\t\t\t\t\t\t<div className=\"flex justify-between items-center mb-2\">\n\t\t\t\t\t\t\t<h2 className=\"flex items-center text-2xl \">\n\t\t\t\t\t\t\t\t<ShoppingCart className=\"mr-2 h-5 w-5\" />\n\t\t\t\t\t\t\t\t<span>{shoppingList.attributes.name}</span>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-outline badge-primary\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t作成日： {shoppingList.attributes.created_at_jst}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\tclassName={`text-secondary transition-opacity duration-500 ease-in ${items.length === check.length ? \"opacity-100\" : \"opacity-0\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべての買い物が完了しました！\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"bg-primary h-full transition-all duration-500 ease-in-out\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: `${(check.length / items.length) * 100}%` }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t{Object.entries(filteredGroupedItems).map(\n\t\t\t\t\t\t\t\t([category, categoryItems]) => (\n\t\t\t\t\t\t\t\t\t<div key={category}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center my-2\">\n\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"text-sm text-neutral-500\">{category}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex-1 ml-2 h-0.5 bg-base-300\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t\t{categoryItems.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col md:flex-row md:items-center justify-between space-x-4 py-4 px-4 rounded-lg border border-base-300\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={!!item.checked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleClick(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={loadingItems.includes(item.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"\">{item.name}</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.fromRecipe && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-neutral-500 text-sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tレシピ: {item.fromRecipe}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loadingItems.includes(item.id) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-xs ml-2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-end md:justify-start items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{item.display_amount}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Refrigerator\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddFridge(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDeleteItem(item.item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddItemForm\n\t\t\t\t\t\tcategories={preferredOrder}\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\thandleAddItem={handleAddItem}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ShoppingListDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/ShoppingListDetail/ShoppingListDetail.tsx"},"span":[5629,5827],"sourceCode":"import { Plus, Refrigerator, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useLoaderData, useNavigate } from \"react-router\";\nimport AddItemForm from \"../../components/AddItemForm\";\nimport Meta from \"../../components/Meta\";\nimport useModal from \"../../hooks/useModal\";\nimport type {\n\tShoppingItem,\n\tShoppingListAddItem,\n\tShoppingListEntry,\n} from \"../../types/apiResponse\";\nimport { api } from \"../../utils/axios\";\n\nconst ShoppingListDetail = () => {\n\tconst shoppingList = useLoaderData<ShoppingListEntry>();\n\tconst [items, setItems] = useState(shoppingList.attributes.shopping_items);\n\tconst navigate = useNavigate();\n\tconst check = items.filter((item) => item.checked === true);\n\tconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst [changedItems, setChangedItems] = useState(new Set<number>());\n\tconst [loadingItems, setLoadingItems] = useState<number[]>([]);\n\tlet filteredItems = items;\n\tif (selectedCategory) {\n\t\tfilteredItems = filteredItems.filter(\n\t\t\t(item) => item.category === selectedCategory,\n\t\t);\n\t}\n\n\tconst filteredGroupedItems = filteredItems.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tObject.keys(filteredGroupedItems).forEach((category) => {\n\t\tfilteredGroupedItems[category].sort((a, b) => a.checked - b.checked);\n\t});\n\n\tconst groupedItems = items.reduce((acc, item) => {\n\t\tif (!acc[item.category]) {\n\t\t\tacc[item.category] = [];\n\t\t}\n\t\tacc[item.category].push(item);\n\t\treturn acc;\n\t}, {});\n\n\tconst preferredOrder = [\n\t\t\"野菜\",\n\t\t\"肉類\",\n\t\t\"魚介類\",\n\t\t\"卵・乳製品\",\n\t\t\"豆・豆製品\",\n\t\t\"穀類・パン \",\n\t\t\"調味料\",\n\t\t\"加工食品\",\n\t\t\"その他\",\n\t];\n\n\tconst categories = Object.keys(groupedItems).sort((a, b) => {\n\t\treturn preferredOrder.indexOf(a) - preferredOrder.indexOf(b);\n\t});\n\n\tconst handleClick = (item: ShoppingItem) => {\n\t\tsetItems((prev) =>\n\t\t\tprev.map((preItem) => {\n\t\t\t\treturn preItem.id === item.id\n\t\t\t\t\t? { ...preItem, checked: !item.checked }\n\t\t\t\t\t: preItem;\n\t\t\t}),\n\t\t);\n\t\tsetChangedItems((prev) => new Set(prev).add(item.item_id));\n\t\tsetLoadingItems((prev) => [...prev, item.id]);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(async () => {\n\t\t\tif (changedItems.size === 0) return;\n\n\t\t\ttry {\n\t\t\t\tconst updates = [...changedItems].map((id) => {\n\t\t\t\t\tconst item = items.find((i) => i.item_id === id);\n\t\t\t\t\treturn { id: item.item_id, checked: item.checked };\n\t\t\t\t});\n\t\t\t\tawait api.patch(\n\t\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items/batch_update`,\n\t\t\t\t\t{ updates },\n\t\t\t\t);\n\n\t\t\t\tsetChangedItems(new Set());\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.success(\"保存が完了しました\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tsetLoadingItems([]);\n\t\t\t\ttoast.error(\"保存に失敗しました\");\n\t\t\t}\n\t\t}, 3000);\n\n\t\treturn () => clearTimeout(timer);\n\t}, [changedItems]);\n\n\tconst handleAddItem = async ({\n\t\tname,\n\t\tdisplay_amount,\n\t\tcategory,\n\t}: ShoppingListAddItem): Promise<void> => {\n\t\ttry {\n\t\t\tconst response = await api.post<{ item: ShoppingItem }>(\n\t\t\t\t`/shopping_lists/${shoppingList.id}/shopping_list_items`,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tdisplay_amount,\n\t\t\t\t\tcategory,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetItems((prev) => [...prev, { ...response.data.item }]);\n\t\t\ttoast.success(\"食材を追加しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の追加に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleDeleteItem = async (id: number) => {\n\t\ttry {\n\t\t\tawait api.delete(`/shopping_list_items/${id}`);\n\t\t\tsetItems((prev) => prev.filter((item) => item.item_id !== id));\n\t\t\ttoast.success(\"食材を削除しました\");\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\ttoast.error(\"食材の削除に失敗しました\");\n\t\t}\n\t};\n\n\tconst handleAddFridge = async (item: ShoppingItem | ShoppingItem[]) => {\n\t\tconst items = Array.isArray(item) ? item : [item];\n\t\ttry {\n\t\t\tawait api.post(\"/fridge_items\", {\n\t\t\t\tfridge: items.map((item) => ({\n\t\t\t\t\tname: item.name,\n\t\t\t\t\tcategory: item.category,\n\t\t\t\t\tdisplay_amount: item.display_amount,\n\t\t\t\t\tamount: item.amount,\n\t\t\t\t\tunit: item.unit,\n\t\t\t\t})),\n\t\t\t});\n\t\t\ttoast.success(\"冷蔵庫に追加しました\");\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\ttoast.error(\"冷蔵庫の追加に失敗しました\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"買い物リスト詳細\"\n\t\t\t\tdescription=\"必要な食材をまとめて管理。買い忘れを防げて、効率的な買い物ができます！\"\n\t\t\t/>\n\t\t\t<div className=\"container max-w-screen-md mx-auto px-4 py-8\">\n\t\t\t\t<div className=\"mb-6 flex flex-col md:flex-row gap-2 md:justify-between\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => navigate(\"/shoppinglist\")}\n\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t>\n\t\t\t\t\t\t戻る\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"flex flex-col md:flex-row gap-2\">\n\t\t\t\t\t\t<button className=\"btn btn-outline\" onClick={openModal}>\n\t\t\t\t\t\t\t食材を追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-outline\"\n\t\t\t\t\t\t\tonClick={() => handleAddFridge(items)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t全ての食材を冷蔵庫に追加する\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"px-4 pb-2\">\n\t\t\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`text-xs  md:text-base badge ${selectedCategory === null && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(null)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべてのカテゴリ\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={category}\n\t\t\t\t\t\t\t\t\tclassName={`text-xs md:text-base badge ${selectedCategory === category && \"badge-neutral\"}`}\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedCategory(category)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex flex-col gap-6\">\n\t\t\t\t\t<div className=\"shadow-md rounded-xl p-4\">\n\t\t\t\t\t\t<div className=\"flex justify-between items-center mb-2\">\n\t\t\t\t\t\t\t<h2 className=\"flex items-center text-2xl \">\n\t\t\t\t\t\t\t\t<ShoppingCart className=\"mr-2 h-5 w-5\" />\n\t\t\t\t\t\t\t\t<span>{shoppingList.attributes.name}</span>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={`badge ${check.length === items.length ? \"badge-success\" : \"badge-outline badge-primary\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{check.length}/{items.length} 完了\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<p className=\"text-sm text-neutral-500\">\n\t\t\t\t\t\t\t作成日： {shoppingList.attributes.created_at_jst}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"mt-4\">\n\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\tclassName={`text-secondary transition-opacity duration-500 ease-in ${items.length === check.length ? \"opacity-100\" : \"opacity-0\"}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tすべての買い物が完了しました！\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"bg-primary h-full transition-all duration-500 ease-in-out\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: `${(check.length / items.length) * 100}%` }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t{Object.entries(filteredGroupedItems).map(\n\t\t\t\t\t\t\t\t([category, categoryItems]) => (\n\t\t\t\t\t\t\t\t\t<div key={category}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center my-2\">\n\t\t\t\t\t\t\t\t\t\t\t<h3 className=\"text-sm text-neutral-500\">{category}</h3>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex-1 ml-2 h-0.5 bg-base-300\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t\t{categoryItems.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col md:flex-row md:items-center justify-between space-x-4 py-4 px-4 rounded-lg border border-base-300\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={!!item.checked}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleClick(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={loadingItems.includes(item.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"\">{item.name}</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.fromRecipe && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-neutral-500 text-sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tレシピ: {item.fromRecipe}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loadingItems.includes(item.id) && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"loading loading-spinner loading-xs ml-2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-end md:justify-start items-center space-x-4\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{item.display_amount}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Refrigerator\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-info\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddFridge(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:text-error\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={15}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDeleteItem(item.item_id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Modal>\n\t\t\t\t\t<AddItemForm\n\t\t\t\t\t\tcategories={preferredOrder}\n\t\t\t\t\t\tcloseModal={closeModal}\n\t\t\t\t\t\thandleAddItem={handleAddItem}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ShoppingListDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/VegeDetail/VegeDetail.tsx"},"span":[2064,2100],"sourceCode":"import { useState } from \"react\";\nimport { useLoaderData } from \"react-router\";\nimport Meta from \"../../components/Meta\";\nimport NutritionInfo from \"../../components/NutritionInfo\";\nimport PriceChart from \"../../components/PriceChart\";\nimport RecipeGenerator from \"../../components/RecipeGenerator\";\nimport StorageMethod from \"../../components/StorageMethod\";\nimport type { VegetablesResponse } from \"../../types/vegetable\";\n\nconst VegeDetail = () => {\n\tconst { data } = useLoaderData<VegetablesResponse>();\n\tconsole.log(data);\n\tconst [activeTab, setActiveTab] = useState<string>(\"tab1\");\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"野菜詳細\"\n\t\t\t\tdescription=\"旬の野菜を一覧でチェック。栄養や調理のヒントも満載！次のメニューの参考にどうぞ。\"\n\t\t\t/>\n\t\t\t<div className=\"container mx-auto px-4\">\n\t\t\t\t<div className=\"flex flex-col md:flex-row justify-center gap-8 my-8 mx-auto\">\n\t\t\t\t\t<div className=\"max-w-md order-2 md:order-1 mx-auto md:mx-0\">\n\t\t\t\t\t\t<div className=\"rounded-lg overflow-hidden shadow-md\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={data.attributes.image_url}\n\t\t\t\t\t\t\t\talt={data.attributes.name}\n\t\t\t\t\t\t\t\tclassName=\"w-full object-contain\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"order-1 md:order-2\">\n\t\t\t\t\t\t<h1 className=\"text-3xl md:text-4xl font-bold mb-4\">\n\t\t\t\t\t\t\t{data.attributes.name}\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p className=\"text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{data.attributes.description}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div className=\" p-4 rounded-lg border border-neutral-300\">\n\t\t\t\t\t\t\t<h2 className=\"text-lg font-semibold mb-2\">旬の時期</h2>\n\t\t\t\t\t\t\t<p className=\"text-gray-700\">\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].start_month}月~\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].end_month}月（\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].note}）\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mx-auto max-w-screen-lg mb-8\">\n\t\t\t\t\t<div role=\"tablist\" className=\"tabs tabs-box flex justify-between\">\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab1\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab1\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t価格推移\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab2\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab2\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t栄養成分\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab3\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab3\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t保存方法\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab4\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab4\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tレシピ\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{activeTab === \"tab1\" && (\n\t\t\t\t\t\t\t<PriceChart prices={data.attributes.monthly_prices} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab2\" && (\n\t\t\t\t\t\t\t<NutritionInfo nutritions={data.attributes.nutritions} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab3\" && (\n\t\t\t\t\t\t\t<StorageMethod storage={data.attributes.storage} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab4\" && (\n\t\t\t\t\t\t\t<RecipeGenerator\n\t\t\t\t\t\t\t\tvegetableName={data.attributes.name}\n\t\t\t\t\t\t\t\tid={data.attributes.id}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default VegeDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/VegeDetail/VegeDetail.tsx"},"span":[2271,2307],"sourceCode":"import { useState } from \"react\";\nimport { useLoaderData } from \"react-router\";\nimport Meta from \"../../components/Meta\";\nimport NutritionInfo from \"../../components/NutritionInfo\";\nimport PriceChart from \"../../components/PriceChart\";\nimport RecipeGenerator from \"../../components/RecipeGenerator\";\nimport StorageMethod from \"../../components/StorageMethod\";\nimport type { VegetablesResponse } from \"../../types/vegetable\";\n\nconst VegeDetail = () => {\n\tconst { data } = useLoaderData<VegetablesResponse>();\n\tconsole.log(data);\n\tconst [activeTab, setActiveTab] = useState<string>(\"tab1\");\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"野菜詳細\"\n\t\t\t\tdescription=\"旬の野菜を一覧でチェック。栄養や調理のヒントも満載！次のメニューの参考にどうぞ。\"\n\t\t\t/>\n\t\t\t<div className=\"container mx-auto px-4\">\n\t\t\t\t<div className=\"flex flex-col md:flex-row justify-center gap-8 my-8 mx-auto\">\n\t\t\t\t\t<div className=\"max-w-md order-2 md:order-1 mx-auto md:mx-0\">\n\t\t\t\t\t\t<div className=\"rounded-lg overflow-hidden shadow-md\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={data.attributes.image_url}\n\t\t\t\t\t\t\t\talt={data.attributes.name}\n\t\t\t\t\t\t\t\tclassName=\"w-full object-contain\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"order-1 md:order-2\">\n\t\t\t\t\t\t<h1 className=\"text-3xl md:text-4xl font-bold mb-4\">\n\t\t\t\t\t\t\t{data.attributes.name}\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p className=\"text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{data.attributes.description}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div className=\" p-4 rounded-lg border border-neutral-300\">\n\t\t\t\t\t\t\t<h2 className=\"text-lg font-semibold mb-2\">旬の時期</h2>\n\t\t\t\t\t\t\t<p className=\"text-gray-700\">\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].start_month}月~\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].end_month}月（\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].note}）\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mx-auto max-w-screen-lg mb-8\">\n\t\t\t\t\t<div role=\"tablist\" className=\"tabs tabs-box flex justify-between\">\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab1\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab1\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t価格推移\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab2\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab2\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t栄養成分\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab3\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab3\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t保存方法\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab4\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab4\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tレシピ\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{activeTab === \"tab1\" && (\n\t\t\t\t\t\t\t<PriceChart prices={data.attributes.monthly_prices} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab2\" && (\n\t\t\t\t\t\t\t<NutritionInfo nutritions={data.attributes.nutritions} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab3\" && (\n\t\t\t\t\t\t\t<StorageMethod storage={data.attributes.storage} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab4\" && (\n\t\t\t\t\t\t\t<RecipeGenerator\n\t\t\t\t\t\t\t\tvegetableName={data.attributes.name}\n\t\t\t\t\t\t\t\tid={data.attributes.id}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default VegeDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/VegeDetail/VegeDetail.tsx"},"span":[2478,2514],"sourceCode":"import { useState } from \"react\";\nimport { useLoaderData } from \"react-router\";\nimport Meta from \"../../components/Meta\";\nimport NutritionInfo from \"../../components/NutritionInfo\";\nimport PriceChart from \"../../components/PriceChart\";\nimport RecipeGenerator from \"../../components/RecipeGenerator\";\nimport StorageMethod from \"../../components/StorageMethod\";\nimport type { VegetablesResponse } from \"../../types/vegetable\";\n\nconst VegeDetail = () => {\n\tconst { data } = useLoaderData<VegetablesResponse>();\n\tconsole.log(data);\n\tconst [activeTab, setActiveTab] = useState<string>(\"tab1\");\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"野菜詳細\"\n\t\t\t\tdescription=\"旬の野菜を一覧でチェック。栄養や調理のヒントも満載！次のメニューの参考にどうぞ。\"\n\t\t\t/>\n\t\t\t<div className=\"container mx-auto px-4\">\n\t\t\t\t<div className=\"flex flex-col md:flex-row justify-center gap-8 my-8 mx-auto\">\n\t\t\t\t\t<div className=\"max-w-md order-2 md:order-1 mx-auto md:mx-0\">\n\t\t\t\t\t\t<div className=\"rounded-lg overflow-hidden shadow-md\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={data.attributes.image_url}\n\t\t\t\t\t\t\t\talt={data.attributes.name}\n\t\t\t\t\t\t\t\tclassName=\"w-full object-contain\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"order-1 md:order-2\">\n\t\t\t\t\t\t<h1 className=\"text-3xl md:text-4xl font-bold mb-4\">\n\t\t\t\t\t\t\t{data.attributes.name}\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p className=\"text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{data.attributes.description}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div className=\" p-4 rounded-lg border border-neutral-300\">\n\t\t\t\t\t\t\t<h2 className=\"text-lg font-semibold mb-2\">旬の時期</h2>\n\t\t\t\t\t\t\t<p className=\"text-gray-700\">\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].start_month}月~\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].end_month}月（\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].note}）\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mx-auto max-w-screen-lg mb-8\">\n\t\t\t\t\t<div role=\"tablist\" className=\"tabs tabs-box flex justify-between\">\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab1\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab1\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t価格推移\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab2\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab2\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t栄養成分\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab3\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab3\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t保存方法\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab4\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab4\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tレシピ\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{activeTab === \"tab1\" && (\n\t\t\t\t\t\t\t<PriceChart prices={data.attributes.monthly_prices} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab2\" && (\n\t\t\t\t\t\t\t<NutritionInfo nutritions={data.attributes.nutritions} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab3\" && (\n\t\t\t\t\t\t\t<StorageMethod storage={data.attributes.storage} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab4\" && (\n\t\t\t\t\t\t\t<RecipeGenerator\n\t\t\t\t\t\t\t\tvegetableName={data.attributes.name}\n\t\t\t\t\t\t\t\tid={data.attributes.id}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default VegeDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/VegeDetail/VegeDetail.tsx"},"span":[2685,2721],"sourceCode":"import { useState } from \"react\";\nimport { useLoaderData } from \"react-router\";\nimport Meta from \"../../components/Meta\";\nimport NutritionInfo from \"../../components/NutritionInfo\";\nimport PriceChart from \"../../components/PriceChart\";\nimport RecipeGenerator from \"../../components/RecipeGenerator\";\nimport StorageMethod from \"../../components/StorageMethod\";\nimport type { VegetablesResponse } from \"../../types/vegetable\";\n\nconst VegeDetail = () => {\n\tconst { data } = useLoaderData<VegetablesResponse>();\n\tconsole.log(data);\n\tconst [activeTab, setActiveTab] = useState<string>(\"tab1\");\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"野菜詳細\"\n\t\t\t\tdescription=\"旬の野菜を一覧でチェック。栄養や調理のヒントも満載！次のメニューの参考にどうぞ。\"\n\t\t\t/>\n\t\t\t<div className=\"container mx-auto px-4\">\n\t\t\t\t<div className=\"flex flex-col md:flex-row justify-center gap-8 my-8 mx-auto\">\n\t\t\t\t\t<div className=\"max-w-md order-2 md:order-1 mx-auto md:mx-0\">\n\t\t\t\t\t\t<div className=\"rounded-lg overflow-hidden shadow-md\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={data.attributes.image_url}\n\t\t\t\t\t\t\t\talt={data.attributes.name}\n\t\t\t\t\t\t\t\tclassName=\"w-full object-contain\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"order-1 md:order-2\">\n\t\t\t\t\t\t<h1 className=\"text-3xl md:text-4xl font-bold mb-4\">\n\t\t\t\t\t\t\t{data.attributes.name}\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p className=\"text-neutral-500 mb-4\">\n\t\t\t\t\t\t\t{data.attributes.description}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div className=\" p-4 rounded-lg border border-neutral-300\">\n\t\t\t\t\t\t\t<h2 className=\"text-lg font-semibold mb-2\">旬の時期</h2>\n\t\t\t\t\t\t\t<p className=\"text-gray-700\">\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].start_month}月~\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].end_month}月（\n\t\t\t\t\t\t\t\t{data.attributes.seasons[0].note}）\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mx-auto max-w-screen-lg mb-8\">\n\t\t\t\t\t<div role=\"tablist\" className=\"tabs tabs-box flex justify-between\">\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab1\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab1\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t価格推移\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab2\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab2\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t栄養成分\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab3\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab3\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t保存方法\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\tclassName={`text-xs md:text-base tab flex-1 ${activeTab === \"tab4\" ? \"tab-active\" : \"\"}`}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(\"tab4\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tレシピ\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{activeTab === \"tab1\" && (\n\t\t\t\t\t\t\t<PriceChart prices={data.attributes.monthly_prices} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab2\" && (\n\t\t\t\t\t\t\t<NutritionInfo nutritions={data.attributes.nutritions} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab3\" && (\n\t\t\t\t\t\t\t<StorageMethod storage={data.attributes.storage} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{activeTab === \"tab4\" && (\n\t\t\t\t\t\t\t<RecipeGenerator\n\t\t\t\t\t\t\t\tvegetableName={data.attributes.name}\n\t\t\t\t\t\t\t\tid={data.attributes.id}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default VegeDetail;\n"},"tags":[],"source":null},{"category":"lint/a11y/noRedundantAlt","severity":"error","description":"Avoid the words \"image\", \"picture\", or \"photo\" in img element alt text.","message":[{"elements":[],"content":"Avoid the words \"image\", \"picture\", or \"photo\" in "},{"elements":["Emphasis"],"content":"img"},{"elements":[],"content":" element alt text."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Screen readers announce img elements as \"images\", so it is not necessary to redeclare this in alternative text."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/Top/UsageCard.tsx"},"span":[552,570],"sourceCode":"interface UsageCardProps {\n\timage: string;\n\ttitle: string;\n\tdescription: string;\n\tnumber: string;\n}\n\nconst UsageCard = ({ image, title, description, number }: UsageCardProps) => {\n\treturn (\n\t\t<div className=\"max-w-lg rounded-xl p-6 text-center space-y-4 bg-primary/10 hover:shadow-md transition relative\">\n\t\t\t<div className=\"lg:h-48 flex items-center justify-center\">\n\t\t\t\t<span className=\"flex justify-center items-center rounded-full bg-primary w-8 h-8 absolute -left-3 -top-3 text-white\">\n\t\t\t\t\t{number}\n\t\t\t\t</span>\n\t\t\t\t<img\n\t\t\t\t\tsrc={image}\n\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\tclassName=\"object-contain h-full w-full\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<h3 className=\"text-md text-primary-content lg:text-xl font-semibold\">\n\t\t\t\t{title}\n\t\t\t</h3>\n\t\t\t<p className=\"text-sm xl:text-base text-neutral-500\">{description}</p>\n\t\t</div>\n\t);\n};\n\nexport default UsageCard;\n"},"tags":[],"source":null},{"category":"lint/a11y/noRedundantAlt","severity":"error","description":"Avoid the words \"image\", \"picture\", or \"photo\" in img element alt text.","message":[{"elements":[],"content":"Avoid the words \"image\", \"picture\", or \"photo\" in "},{"elements":["Emphasis"],"content":"img"},{"elements":[],"content":" element alt text."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Screen readers announce img elements as \"images\", so it is not necessary to redeclare this in alternative text."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/Top/Top.tsx"},"span":[9362,9380],"sourceCode":"import { ChefHat, Leaf, Refrigerator, ShoppingCart } from \"lucide-react\";\nimport { useNavigate } from \"react-router\";\nimport EmailChangeSuccess from \"../../components/EmailChangeSuccess\";\nimport Meta from \"../../components/Meta\";\nimport { useEmailChangeConfirmation } from \"../../hooks/useEmailChangeConfirmation\";\nimport useModal from \"../../hooks/useModal\";\nimport { useScrollAnimation } from \"../../hooks/useScrollAnimation\";\nimport FeatureCard from \"./FeatureCard\";\nimport MeritHighLight from \"./MeritHighLight\";\nimport Recommend from \"./Recommend\";\nimport UsageCard from \"./UsageCard\";\n\nconst recommendList: string[] = [\n\t\"忙しい仕事の合間に健康的な食事を摂りたい方\",\n\t\"料理は苦手だけど、外食やコンビニ食を減らしたい方\",\n\t\"健康を意識し始めた社会人の方\",\n\t\"食費を抑えつつ、栄養バランスの良い食事をしたい方\",\n\t\"食材を無駄にせず、効率的に使い切りたい方\",\n];\n\nfunction Top(): React.ReactElement {\n\tconst navigate = useNavigate();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst { email } = useEmailChangeConfirmation(openModal);\n\tuseScrollAnimation();\n\n\treturn (\n\t\t<>\n\t\t\t<Meta title=\"トップ\" description=\"VegeGuideのアプリ概要です。\" />\n\t\t\t<header className=\"w-full mx-auto sticky top-0 z-40 backdrop-blur bg-white animate-fade-up mb-16 lg:mb-32\">\n\t\t\t\t<div className=\"container mx-auto flex h-16 items-center justify-center\">\n\t\t\t\t\t<nav className=\"flex justify-center gap-8\">\n\t\t\t\t\t\t<a href=\"#feature\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t特徴\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#usage\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t使い方\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#merit\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\tメリット\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<main\n\t\t\t\tclassName=\"container flex flex-col px-4 lg:px-0  mx-auto space-y-16 lg:space-y-32 min-h-screen animate-fade-up\"\n\t\t\t\tstyle={{ animationDelay: \"0.1s\", animationFillMode: \"both\" }}\n\t\t\t>\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"flex mx-auto animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex-1 flex flex-col items-center justify-center space-y-8\">\n\t\t\t\t\t\t<h1\n\t\t\t\t\t\t\tclassName=\"text-center lg:text-left text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t忙しいあなたの\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<span className=\"text-primary\">毎日のちょうどいい健康習慣</span>\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName=\" text-lg md:text-xl lg:text-2xl text-neutral-500 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.4s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t野菜情報・価格比較・レシピ提案・買い物リスト・食材管理を一元化。\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t料理のハードルを下げ、食材のムダを防ぎながら、栄養価が高くコスパの良い食生活をサポートします。\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"flex space-x-4 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ使ってみる\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button className=\"btn\">\n\t\t\t\t\t\t\t\t<a href=\"#feature\">詳しく見る</a>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"hidden lg:flex flex-1 justify-center animate-fade-up\"\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.6s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"mockup-phone \">\n\t\t\t\t\t\t\t<div className=\"mockup-phone-camera\" />\n\t\t\t\t\t\t\t<div className=\"bg-base-100 mockup-phone-display text-white grid place-content-center p-2\">\n\t\t\t\t\t\t\t\t<img src=\"/top.png\" alt=\"\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"feature\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t<span className=\"text-primary\">VegeGuide</span>の特徴\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を送りたいけれど、忙しくて時間がない。\n\t\t\t\t\t\t\t\tそんなあなたの毎日をサポートする機能が揃っています。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜情報\"\n\t\t\t\t\t\t\t\t\tdescription=\"「旬・安い・栄養価が高い」野菜を一覧で表示。 季節に合わせた最適な食材選びをサポートします。\"\n\t\t\t\t\t\t\t\t\tIcon={Leaf}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.85s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"時短レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"選んだ野菜を使った簡単レシピをすぐに提案。 忙しい平日でも手軽に作れるメニューが見つかります。\"\n\t\t\t\t\t\t\t\t\tIcon={ChefHat}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リスト自動生成\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピを選ぶだけで必要な食材が自動でリストアップ。 仕事帰りのスーパーでもサクッと買い物ができます。\"\n\t\t\t\t\t\t\t\t\tIcon={ShoppingCart}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.95s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"食材管理＋レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"買い物リストから食材を登録し、賞味期限や在庫を管理。登録食材を使ったレシピも提案。食材を無駄なく使い切ります。\"\n\t\t\t\t\t\t\t\t\tIcon={Refrigerator}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"usage\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t使い方はとてもシンプル\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t複数のアプリを行き来する必要はありません。\n\t\t\t\t\t\t\t\tVegeGuideひとつで、食材選びから調理まで一気通貫でサポートします。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16 place-items-center\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/ce62a126366946d7196e7c61a7118a26.jpg\"\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜を選ぶ\"\n\t\t\t\t\t\t\t\t\tdescription=\"アプリを開くと、旬の野菜が一覧で表示されます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"1\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.15s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/de1f1402b1c2b8ecf02bf5c13dba219a.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"レシピを生成する\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ提案から選んだ野菜のレシピを生成します。\"\n\t\t\t\t\t\t\t\t\tnumber=\"2\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.2s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/8684ee9291f2a6850f9011ffcd941483.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リストを作成\"\n\t\t\t\t\t\t\t\t\tdescription=\"生成したレシピから買い物リストを作成します\"\n\t\t\t\t\t\t\t\t\tnumber=\"3\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.25s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/cadd35db48d1482d86cc2bbebab4479e.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"簡単に調理\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ通りに、短時間で簡単に調理できます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"4\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"merit\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\tVegeGuideを使うメリット\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mx-auto mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を無理なく続けるための、4つの推しポイント\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"space-y-12 mt-8\">\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"旬の野菜 × 価格情報 × 栄養価表示の三位一体\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今の旬」「価格の安さ」「栄養面」の3軸から、コスパの良い食材選びができる\",\n\t\t\t\t\t\t\t\t\t\"他のレシピアプリや買い物アプリにはない、情報の一元化を実現\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/fb5be1e00203df88a56a73f9291c9d87\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/fb5be1e00203df88a56a73f9291c9d87.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"買い物リストの自動生成 × 実用的UI\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"レシピ一覧から自動生成できるチェックリスト付き買い物リスト\",\n\t\t\t\t\t\t\t\t\t\"仕事帰りでもサクッと買い物できる実用的なUI設計\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/b40e4457aeb065d479f75c0010c8cf2b\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/b40e4457aeb065d479f75c0010c8cf2b.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-1 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"複数アプリを行き来する必要がなく、毎日の食生活がシンプルに\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「野菜を選ぶ→買う→作る→残りも使う」一連の流れを一つのサービスで完結\",\n\t\t\t\t\t\t\t\t\t\"他サービスのように「レシピだけ」「栄養管理だけ」「冷蔵庫管理だけ」という分断がない\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"食材の無駄を減らす「冷蔵庫機能」\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今あるもので何が作れる？」がすぐにわかる\",\n\t\t\t\t\t\t\t\t\t\"食材のムダがなくなり、食費削減＋罪悪感ゼロ\",\n\t\t\t\t\t\t\t\t\t\"生成AIによるカスタムレシピ提案、冷蔵庫内食材に基づくリコメンド\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/c2dda647c92d1499f67c7446b210ecef\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/c2dda647c92d1499f67c7446b210ecef.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-2 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.4s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<div className=\"mx-auto max-w-2xl rounded-xl shadow-lg p-1 md:p-5 lg:p-10\">\n\t\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t\tこんな方におすすめです\n\t\t\t\t\t\t\t\t</h2>\n\n\t\t\t\t\t\t\t\t<div className=\"space-y-4 mt-8\">\n\t\t\t\t\t\t\t\t\t{recommendList.map((text) => (\n\t\t\t\t\t\t\t\t\t\t<div key={text} className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t\t\t\t<Recommend text={text} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section className=\"pb-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container text-center space-y-4 mx-auto\">\n\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t今すぐ初めて、<span className=\"text-primary\">健康的な食生活</span>\n\t\t\t\t\t\t\tを手に入れよう\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<p className=\"mg:text-lg lg:text-xl text-neutral-500 mx-auto\">\n\t\t\t\t\t\t\tVegeGuideなら、忙しい毎日でも無理なく続けられる\n\t\t\t\t\t\t\t\"ちょうどいい健康習慣\"をサポートします。\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex justify-center pt-4\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary transform transition hover:scale-105\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ始める\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</main>\n\n\t\t\t<Modal>\n\t\t\t\t<EmailChangeSuccess email={email} closeModal={closeModal} />\n\t\t\t</Modal>\n\t\t</>\n\t);\n}\n\nexport default Top;\n"},"tags":[],"source":null},{"category":"lint/a11y/noRedundantAlt","severity":"error","description":"Avoid the words \"image\", \"picture\", or \"photo\" in img element alt text.","message":[{"elements":[],"content":"Avoid the words \"image\", \"picture\", or \"photo\" in "},{"elements":["Emphasis"],"content":"img"},{"elements":[],"content":" element alt text."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Screen readers announce img elements as \"images\", so it is not necessary to redeclare this in alternative text."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/Top/Top.tsx"},"span":[9979,9997],"sourceCode":"import { ChefHat, Leaf, Refrigerator, ShoppingCart } from \"lucide-react\";\nimport { useNavigate } from \"react-router\";\nimport EmailChangeSuccess from \"../../components/EmailChangeSuccess\";\nimport Meta from \"../../components/Meta\";\nimport { useEmailChangeConfirmation } from \"../../hooks/useEmailChangeConfirmation\";\nimport useModal from \"../../hooks/useModal\";\nimport { useScrollAnimation } from \"../../hooks/useScrollAnimation\";\nimport FeatureCard from \"./FeatureCard\";\nimport MeritHighLight from \"./MeritHighLight\";\nimport Recommend from \"./Recommend\";\nimport UsageCard from \"./UsageCard\";\n\nconst recommendList: string[] = [\n\t\"忙しい仕事の合間に健康的な食事を摂りたい方\",\n\t\"料理は苦手だけど、外食やコンビニ食を減らしたい方\",\n\t\"健康を意識し始めた社会人の方\",\n\t\"食費を抑えつつ、栄養バランスの良い食事をしたい方\",\n\t\"食材を無駄にせず、効率的に使い切りたい方\",\n];\n\nfunction Top(): React.ReactElement {\n\tconst navigate = useNavigate();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst { email } = useEmailChangeConfirmation(openModal);\n\tuseScrollAnimation();\n\n\treturn (\n\t\t<>\n\t\t\t<Meta title=\"トップ\" description=\"VegeGuideのアプリ概要です。\" />\n\t\t\t<header className=\"w-full mx-auto sticky top-0 z-40 backdrop-blur bg-white animate-fade-up mb-16 lg:mb-32\">\n\t\t\t\t<div className=\"container mx-auto flex h-16 items-center justify-center\">\n\t\t\t\t\t<nav className=\"flex justify-center gap-8\">\n\t\t\t\t\t\t<a href=\"#feature\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t特徴\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#usage\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t使い方\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#merit\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\tメリット\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<main\n\t\t\t\tclassName=\"container flex flex-col px-4 lg:px-0  mx-auto space-y-16 lg:space-y-32 min-h-screen animate-fade-up\"\n\t\t\t\tstyle={{ animationDelay: \"0.1s\", animationFillMode: \"both\" }}\n\t\t\t>\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"flex mx-auto animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex-1 flex flex-col items-center justify-center space-y-8\">\n\t\t\t\t\t\t<h1\n\t\t\t\t\t\t\tclassName=\"text-center lg:text-left text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t忙しいあなたの\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<span className=\"text-primary\">毎日のちょうどいい健康習慣</span>\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName=\" text-lg md:text-xl lg:text-2xl text-neutral-500 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.4s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t野菜情報・価格比較・レシピ提案・買い物リスト・食材管理を一元化。\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t料理のハードルを下げ、食材のムダを防ぎながら、栄養価が高くコスパの良い食生活をサポートします。\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"flex space-x-4 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ使ってみる\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button className=\"btn\">\n\t\t\t\t\t\t\t\t<a href=\"#feature\">詳しく見る</a>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"hidden lg:flex flex-1 justify-center animate-fade-up\"\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.6s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"mockup-phone \">\n\t\t\t\t\t\t\t<div className=\"mockup-phone-camera\" />\n\t\t\t\t\t\t\t<div className=\"bg-base-100 mockup-phone-display text-white grid place-content-center p-2\">\n\t\t\t\t\t\t\t\t<img src=\"/top.png\" alt=\"\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"feature\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t<span className=\"text-primary\">VegeGuide</span>の特徴\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を送りたいけれど、忙しくて時間がない。\n\t\t\t\t\t\t\t\tそんなあなたの毎日をサポートする機能が揃っています。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜情報\"\n\t\t\t\t\t\t\t\t\tdescription=\"「旬・安い・栄養価が高い」野菜を一覧で表示。 季節に合わせた最適な食材選びをサポートします。\"\n\t\t\t\t\t\t\t\t\tIcon={Leaf}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.85s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"時短レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"選んだ野菜を使った簡単レシピをすぐに提案。 忙しい平日でも手軽に作れるメニューが見つかります。\"\n\t\t\t\t\t\t\t\t\tIcon={ChefHat}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リスト自動生成\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピを選ぶだけで必要な食材が自動でリストアップ。 仕事帰りのスーパーでもサクッと買い物ができます。\"\n\t\t\t\t\t\t\t\t\tIcon={ShoppingCart}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.95s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"食材管理＋レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"買い物リストから食材を登録し、賞味期限や在庫を管理。登録食材を使ったレシピも提案。食材を無駄なく使い切ります。\"\n\t\t\t\t\t\t\t\t\tIcon={Refrigerator}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"usage\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t使い方はとてもシンプル\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t複数のアプリを行き来する必要はありません。\n\t\t\t\t\t\t\t\tVegeGuideひとつで、食材選びから調理まで一気通貫でサポートします。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16 place-items-center\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/ce62a126366946d7196e7c61a7118a26.jpg\"\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜を選ぶ\"\n\t\t\t\t\t\t\t\t\tdescription=\"アプリを開くと、旬の野菜が一覧で表示されます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"1\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.15s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/de1f1402b1c2b8ecf02bf5c13dba219a.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"レシピを生成する\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ提案から選んだ野菜のレシピを生成します。\"\n\t\t\t\t\t\t\t\t\tnumber=\"2\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.2s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/8684ee9291f2a6850f9011ffcd941483.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リストを作成\"\n\t\t\t\t\t\t\t\t\tdescription=\"生成したレシピから買い物リストを作成します\"\n\t\t\t\t\t\t\t\t\tnumber=\"3\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.25s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/cadd35db48d1482d86cc2bbebab4479e.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"簡単に調理\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ通りに、短時間で簡単に調理できます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"4\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"merit\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\tVegeGuideを使うメリット\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mx-auto mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を無理なく続けるための、4つの推しポイント\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"space-y-12 mt-8\">\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"旬の野菜 × 価格情報 × 栄養価表示の三位一体\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今の旬」「価格の安さ」「栄養面」の3軸から、コスパの良い食材選びができる\",\n\t\t\t\t\t\t\t\t\t\"他のレシピアプリや買い物アプリにはない、情報の一元化を実現\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/fb5be1e00203df88a56a73f9291c9d87\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/fb5be1e00203df88a56a73f9291c9d87.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"買い物リストの自動生成 × 実用的UI\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"レシピ一覧から自動生成できるチェックリスト付き買い物リスト\",\n\t\t\t\t\t\t\t\t\t\"仕事帰りでもサクッと買い物できる実用的なUI設計\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/b40e4457aeb065d479f75c0010c8cf2b\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/b40e4457aeb065d479f75c0010c8cf2b.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-1 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"複数アプリを行き来する必要がなく、毎日の食生活がシンプルに\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「野菜を選ぶ→買う→作る→残りも使う」一連の流れを一つのサービスで完結\",\n\t\t\t\t\t\t\t\t\t\"他サービスのように「レシピだけ」「栄養管理だけ」「冷蔵庫管理だけ」という分断がない\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"食材の無駄を減らす「冷蔵庫機能」\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今あるもので何が作れる？」がすぐにわかる\",\n\t\t\t\t\t\t\t\t\t\"食材のムダがなくなり、食費削減＋罪悪感ゼロ\",\n\t\t\t\t\t\t\t\t\t\"生成AIによるカスタムレシピ提案、冷蔵庫内食材に基づくリコメンド\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/c2dda647c92d1499f67c7446b210ecef\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/c2dda647c92d1499f67c7446b210ecef.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-2 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.4s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<div className=\"mx-auto max-w-2xl rounded-xl shadow-lg p-1 md:p-5 lg:p-10\">\n\t\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t\tこんな方におすすめです\n\t\t\t\t\t\t\t\t</h2>\n\n\t\t\t\t\t\t\t\t<div className=\"space-y-4 mt-8\">\n\t\t\t\t\t\t\t\t\t{recommendList.map((text) => (\n\t\t\t\t\t\t\t\t\t\t<div key={text} className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t\t\t\t<Recommend text={text} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section className=\"pb-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container text-center space-y-4 mx-auto\">\n\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t今すぐ初めて、<span className=\"text-primary\">健康的な食生活</span>\n\t\t\t\t\t\t\tを手に入れよう\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<p className=\"mg:text-lg lg:text-xl text-neutral-500 mx-auto\">\n\t\t\t\t\t\t\tVegeGuideなら、忙しい毎日でも無理なく続けられる\n\t\t\t\t\t\t\t\"ちょうどいい健康習慣\"をサポートします。\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex justify-center pt-4\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary transform transition hover:scale-105\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ始める\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</main>\n\n\t\t\t<Modal>\n\t\t\t\t<EmailChangeSuccess email={email} closeModal={closeModal} />\n\t\t\t</Modal>\n\t\t</>\n\t);\n}\n\nexport default Top;\n"},"tags":[],"source":null},{"category":"lint/a11y/noRedundantAlt","severity":"error","description":"Avoid the words \"image\", \"picture\", or \"photo\" in img element alt text.","message":[{"elements":[],"content":"Avoid the words \"image\", \"picture\", or \"photo\" in "},{"elements":["Emphasis"],"content":"img"},{"elements":[],"content":" element alt text."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Screen readers announce img elements as \"images\", so it is not necessary to redeclare this in alternative text."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/Top/Top.tsx"},"span":[10730,10748],"sourceCode":"import { ChefHat, Leaf, Refrigerator, ShoppingCart } from \"lucide-react\";\nimport { useNavigate } from \"react-router\";\nimport EmailChangeSuccess from \"../../components/EmailChangeSuccess\";\nimport Meta from \"../../components/Meta\";\nimport { useEmailChangeConfirmation } from \"../../hooks/useEmailChangeConfirmation\";\nimport useModal from \"../../hooks/useModal\";\nimport { useScrollAnimation } from \"../../hooks/useScrollAnimation\";\nimport FeatureCard from \"./FeatureCard\";\nimport MeritHighLight from \"./MeritHighLight\";\nimport Recommend from \"./Recommend\";\nimport UsageCard from \"./UsageCard\";\n\nconst recommendList: string[] = [\n\t\"忙しい仕事の合間に健康的な食事を摂りたい方\",\n\t\"料理は苦手だけど、外食やコンビニ食を減らしたい方\",\n\t\"健康を意識し始めた社会人の方\",\n\t\"食費を抑えつつ、栄養バランスの良い食事をしたい方\",\n\t\"食材を無駄にせず、効率的に使い切りたい方\",\n];\n\nfunction Top(): React.ReactElement {\n\tconst navigate = useNavigate();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst { email } = useEmailChangeConfirmation(openModal);\n\tuseScrollAnimation();\n\n\treturn (\n\t\t<>\n\t\t\t<Meta title=\"トップ\" description=\"VegeGuideのアプリ概要です。\" />\n\t\t\t<header className=\"w-full mx-auto sticky top-0 z-40 backdrop-blur bg-white animate-fade-up mb-16 lg:mb-32\">\n\t\t\t\t<div className=\"container mx-auto flex h-16 items-center justify-center\">\n\t\t\t\t\t<nav className=\"flex justify-center gap-8\">\n\t\t\t\t\t\t<a href=\"#feature\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t特徴\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#usage\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t使い方\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#merit\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\tメリット\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<main\n\t\t\t\tclassName=\"container flex flex-col px-4 lg:px-0  mx-auto space-y-16 lg:space-y-32 min-h-screen animate-fade-up\"\n\t\t\t\tstyle={{ animationDelay: \"0.1s\", animationFillMode: \"both\" }}\n\t\t\t>\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"flex mx-auto animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex-1 flex flex-col items-center justify-center space-y-8\">\n\t\t\t\t\t\t<h1\n\t\t\t\t\t\t\tclassName=\"text-center lg:text-left text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t忙しいあなたの\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<span className=\"text-primary\">毎日のちょうどいい健康習慣</span>\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName=\" text-lg md:text-xl lg:text-2xl text-neutral-500 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.4s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t野菜情報・価格比較・レシピ提案・買い物リスト・食材管理を一元化。\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t料理のハードルを下げ、食材のムダを防ぎながら、栄養価が高くコスパの良い食生活をサポートします。\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"flex space-x-4 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ使ってみる\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button className=\"btn\">\n\t\t\t\t\t\t\t\t<a href=\"#feature\">詳しく見る</a>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"hidden lg:flex flex-1 justify-center animate-fade-up\"\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.6s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"mockup-phone \">\n\t\t\t\t\t\t\t<div className=\"mockup-phone-camera\" />\n\t\t\t\t\t\t\t<div className=\"bg-base-100 mockup-phone-display text-white grid place-content-center p-2\">\n\t\t\t\t\t\t\t\t<img src=\"/top.png\" alt=\"\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"feature\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t<span className=\"text-primary\">VegeGuide</span>の特徴\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を送りたいけれど、忙しくて時間がない。\n\t\t\t\t\t\t\t\tそんなあなたの毎日をサポートする機能が揃っています。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜情報\"\n\t\t\t\t\t\t\t\t\tdescription=\"「旬・安い・栄養価が高い」野菜を一覧で表示。 季節に合わせた最適な食材選びをサポートします。\"\n\t\t\t\t\t\t\t\t\tIcon={Leaf}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.85s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"時短レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"選んだ野菜を使った簡単レシピをすぐに提案。 忙しい平日でも手軽に作れるメニューが見つかります。\"\n\t\t\t\t\t\t\t\t\tIcon={ChefHat}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リスト自動生成\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピを選ぶだけで必要な食材が自動でリストアップ。 仕事帰りのスーパーでもサクッと買い物ができます。\"\n\t\t\t\t\t\t\t\t\tIcon={ShoppingCart}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.95s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"食材管理＋レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"買い物リストから食材を登録し、賞味期限や在庫を管理。登録食材を使ったレシピも提案。食材を無駄なく使い切ります。\"\n\t\t\t\t\t\t\t\t\tIcon={Refrigerator}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"usage\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t使い方はとてもシンプル\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t複数のアプリを行き来する必要はありません。\n\t\t\t\t\t\t\t\tVegeGuideひとつで、食材選びから調理まで一気通貫でサポートします。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16 place-items-center\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/ce62a126366946d7196e7c61a7118a26.jpg\"\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜を選ぶ\"\n\t\t\t\t\t\t\t\t\tdescription=\"アプリを開くと、旬の野菜が一覧で表示されます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"1\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.15s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/de1f1402b1c2b8ecf02bf5c13dba219a.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"レシピを生成する\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ提案から選んだ野菜のレシピを生成します。\"\n\t\t\t\t\t\t\t\t\tnumber=\"2\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.2s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/8684ee9291f2a6850f9011ffcd941483.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リストを作成\"\n\t\t\t\t\t\t\t\t\tdescription=\"生成したレシピから買い物リストを作成します\"\n\t\t\t\t\t\t\t\t\tnumber=\"3\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.25s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/cadd35db48d1482d86cc2bbebab4479e.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"簡単に調理\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ通りに、短時間で簡単に調理できます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"4\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"merit\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\tVegeGuideを使うメリット\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mx-auto mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を無理なく続けるための、4つの推しポイント\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"space-y-12 mt-8\">\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"旬の野菜 × 価格情報 × 栄養価表示の三位一体\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今の旬」「価格の安さ」「栄養面」の3軸から、コスパの良い食材選びができる\",\n\t\t\t\t\t\t\t\t\t\"他のレシピアプリや買い物アプリにはない、情報の一元化を実現\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/fb5be1e00203df88a56a73f9291c9d87\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/fb5be1e00203df88a56a73f9291c9d87.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"買い物リストの自動生成 × 実用的UI\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"レシピ一覧から自動生成できるチェックリスト付き買い物リスト\",\n\t\t\t\t\t\t\t\t\t\"仕事帰りでもサクッと買い物できる実用的なUI設計\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/b40e4457aeb065d479f75c0010c8cf2b\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/b40e4457aeb065d479f75c0010c8cf2b.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-1 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"複数アプリを行き来する必要がなく、毎日の食生活がシンプルに\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「野菜を選ぶ→買う→作る→残りも使う」一連の流れを一つのサービスで完結\",\n\t\t\t\t\t\t\t\t\t\"他サービスのように「レシピだけ」「栄養管理だけ」「冷蔵庫管理だけ」という分断がない\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"食材の無駄を減らす「冷蔵庫機能」\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今あるもので何が作れる？」がすぐにわかる\",\n\t\t\t\t\t\t\t\t\t\"食材のムダがなくなり、食費削減＋罪悪感ゼロ\",\n\t\t\t\t\t\t\t\t\t\"生成AIによるカスタムレシピ提案、冷蔵庫内食材に基づくリコメンド\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/c2dda647c92d1499f67c7446b210ecef\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/c2dda647c92d1499f67c7446b210ecef.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-2 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.4s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<div className=\"mx-auto max-w-2xl rounded-xl shadow-lg p-1 md:p-5 lg:p-10\">\n\t\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t\tこんな方におすすめです\n\t\t\t\t\t\t\t\t</h2>\n\n\t\t\t\t\t\t\t\t<div className=\"space-y-4 mt-8\">\n\t\t\t\t\t\t\t\t\t{recommendList.map((text) => (\n\t\t\t\t\t\t\t\t\t\t<div key={text} className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t\t\t\t<Recommend text={text} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section className=\"pb-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container text-center space-y-4 mx-auto\">\n\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t今すぐ初めて、<span className=\"text-primary\">健康的な食生活</span>\n\t\t\t\t\t\t\tを手に入れよう\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<p className=\"mg:text-lg lg:text-xl text-neutral-500 mx-auto\">\n\t\t\t\t\t\t\tVegeGuideなら、忙しい毎日でも無理なく続けられる\n\t\t\t\t\t\t\t\"ちょうどいい健康習慣\"をサポートします。\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex justify-center pt-4\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary transform transition hover:scale-105\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ始める\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</main>\n\n\t\t\t<Modal>\n\t\t\t\t<EmailChangeSuccess email={email} closeModal={closeModal} />\n\t\t\t</Modal>\n\t\t</>\n\t);\n}\n\nexport default Top;\n"},"tags":[],"source":null},{"category":"lint/a11y/noRedundantAlt","severity":"error","description":"Avoid the words \"image\", \"picture\", or \"photo\" in img element alt text.","message":[{"elements":[],"content":"Avoid the words \"image\", \"picture\", or \"photo\" in "},{"elements":["Emphasis"],"content":"img"},{"elements":[],"content":" element alt text."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Screen readers announce img elements as \"images\", so it is not necessary to redeclare this in alternative text."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/Top/Top.tsx"},"span":[11423,11441],"sourceCode":"import { ChefHat, Leaf, Refrigerator, ShoppingCart } from \"lucide-react\";\nimport { useNavigate } from \"react-router\";\nimport EmailChangeSuccess from \"../../components/EmailChangeSuccess\";\nimport Meta from \"../../components/Meta\";\nimport { useEmailChangeConfirmation } from \"../../hooks/useEmailChangeConfirmation\";\nimport useModal from \"../../hooks/useModal\";\nimport { useScrollAnimation } from \"../../hooks/useScrollAnimation\";\nimport FeatureCard from \"./FeatureCard\";\nimport MeritHighLight from \"./MeritHighLight\";\nimport Recommend from \"./Recommend\";\nimport UsageCard from \"./UsageCard\";\n\nconst recommendList: string[] = [\n\t\"忙しい仕事の合間に健康的な食事を摂りたい方\",\n\t\"料理は苦手だけど、外食やコンビニ食を減らしたい方\",\n\t\"健康を意識し始めた社会人の方\",\n\t\"食費を抑えつつ、栄養バランスの良い食事をしたい方\",\n\t\"食材を無駄にせず、効率的に使い切りたい方\",\n];\n\nfunction Top(): React.ReactElement {\n\tconst navigate = useNavigate();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst { email } = useEmailChangeConfirmation(openModal);\n\tuseScrollAnimation();\n\n\treturn (\n\t\t<>\n\t\t\t<Meta title=\"トップ\" description=\"VegeGuideのアプリ概要です。\" />\n\t\t\t<header className=\"w-full mx-auto sticky top-0 z-40 backdrop-blur bg-white animate-fade-up mb-16 lg:mb-32\">\n\t\t\t\t<div className=\"container mx-auto flex h-16 items-center justify-center\">\n\t\t\t\t\t<nav className=\"flex justify-center gap-8\">\n\t\t\t\t\t\t<a href=\"#feature\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t特徴\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#usage\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t使い方\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#merit\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\tメリット\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<main\n\t\t\t\tclassName=\"container flex flex-col px-4 lg:px-0  mx-auto space-y-16 lg:space-y-32 min-h-screen animate-fade-up\"\n\t\t\t\tstyle={{ animationDelay: \"0.1s\", animationFillMode: \"both\" }}\n\t\t\t>\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"flex mx-auto animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex-1 flex flex-col items-center justify-center space-y-8\">\n\t\t\t\t\t\t<h1\n\t\t\t\t\t\t\tclassName=\"text-center lg:text-left text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t忙しいあなたの\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<span className=\"text-primary\">毎日のちょうどいい健康習慣</span>\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName=\" text-lg md:text-xl lg:text-2xl text-neutral-500 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.4s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t野菜情報・価格比較・レシピ提案・買い物リスト・食材管理を一元化。\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t料理のハードルを下げ、食材のムダを防ぎながら、栄養価が高くコスパの良い食生活をサポートします。\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"flex space-x-4 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ使ってみる\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button className=\"btn\">\n\t\t\t\t\t\t\t\t<a href=\"#feature\">詳しく見る</a>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"hidden lg:flex flex-1 justify-center animate-fade-up\"\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.6s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"mockup-phone \">\n\t\t\t\t\t\t\t<div className=\"mockup-phone-camera\" />\n\t\t\t\t\t\t\t<div className=\"bg-base-100 mockup-phone-display text-white grid place-content-center p-2\">\n\t\t\t\t\t\t\t\t<img src=\"/top.png\" alt=\"\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"feature\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t<span className=\"text-primary\">VegeGuide</span>の特徴\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を送りたいけれど、忙しくて時間がない。\n\t\t\t\t\t\t\t\tそんなあなたの毎日をサポートする機能が揃っています。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜情報\"\n\t\t\t\t\t\t\t\t\tdescription=\"「旬・安い・栄養価が高い」野菜を一覧で表示。 季節に合わせた最適な食材選びをサポートします。\"\n\t\t\t\t\t\t\t\t\tIcon={Leaf}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.85s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"時短レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"選んだ野菜を使った簡単レシピをすぐに提案。 忙しい平日でも手軽に作れるメニューが見つかります。\"\n\t\t\t\t\t\t\t\t\tIcon={ChefHat}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リスト自動生成\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピを選ぶだけで必要な食材が自動でリストアップ。 仕事帰りのスーパーでもサクッと買い物ができます。\"\n\t\t\t\t\t\t\t\t\tIcon={ShoppingCart}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.95s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"食材管理＋レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"買い物リストから食材を登録し、賞味期限や在庫を管理。登録食材を使ったレシピも提案。食材を無駄なく使い切ります。\"\n\t\t\t\t\t\t\t\t\tIcon={Refrigerator}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"usage\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t使い方はとてもシンプル\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t複数のアプリを行き来する必要はありません。\n\t\t\t\t\t\t\t\tVegeGuideひとつで、食材選びから調理まで一気通貫でサポートします。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16 place-items-center\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/ce62a126366946d7196e7c61a7118a26.jpg\"\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜を選ぶ\"\n\t\t\t\t\t\t\t\t\tdescription=\"アプリを開くと、旬の野菜が一覧で表示されます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"1\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.15s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/de1f1402b1c2b8ecf02bf5c13dba219a.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"レシピを生成する\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ提案から選んだ野菜のレシピを生成します。\"\n\t\t\t\t\t\t\t\t\tnumber=\"2\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.2s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/8684ee9291f2a6850f9011ffcd941483.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リストを作成\"\n\t\t\t\t\t\t\t\t\tdescription=\"生成したレシピから買い物リストを作成します\"\n\t\t\t\t\t\t\t\t\tnumber=\"3\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.25s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/cadd35db48d1482d86cc2bbebab4479e.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"簡単に調理\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ通りに、短時間で簡単に調理できます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"4\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"merit\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\tVegeGuideを使うメリット\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mx-auto mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を無理なく続けるための、4つの推しポイント\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"space-y-12 mt-8\">\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"旬の野菜 × 価格情報 × 栄養価表示の三位一体\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今の旬」「価格の安さ」「栄養面」の3軸から、コスパの良い食材選びができる\",\n\t\t\t\t\t\t\t\t\t\"他のレシピアプリや買い物アプリにはない、情報の一元化を実現\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/fb5be1e00203df88a56a73f9291c9d87\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/fb5be1e00203df88a56a73f9291c9d87.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"買い物リストの自動生成 × 実用的UI\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"レシピ一覧から自動生成できるチェックリスト付き買い物リスト\",\n\t\t\t\t\t\t\t\t\t\"仕事帰りでもサクッと買い物できる実用的なUI設計\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/b40e4457aeb065d479f75c0010c8cf2b\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/b40e4457aeb065d479f75c0010c8cf2b.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-1 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"複数アプリを行き来する必要がなく、毎日の食生活がシンプルに\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「野菜を選ぶ→買う→作る→残りも使う」一連の流れを一つのサービスで完結\",\n\t\t\t\t\t\t\t\t\t\"他サービスのように「レシピだけ」「栄養管理だけ」「冷蔵庫管理だけ」という分断がない\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"食材の無駄を減らす「冷蔵庫機能」\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今あるもので何が作れる？」がすぐにわかる\",\n\t\t\t\t\t\t\t\t\t\"食材のムダがなくなり、食費削減＋罪悪感ゼロ\",\n\t\t\t\t\t\t\t\t\t\"生成AIによるカスタムレシピ提案、冷蔵庫内食材に基づくリコメンド\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/c2dda647c92d1499f67c7446b210ecef\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/c2dda647c92d1499f67c7446b210ecef.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-2 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.4s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<div className=\"mx-auto max-w-2xl rounded-xl shadow-lg p-1 md:p-5 lg:p-10\">\n\t\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t\tこんな方におすすめです\n\t\t\t\t\t\t\t\t</h2>\n\n\t\t\t\t\t\t\t\t<div className=\"space-y-4 mt-8\">\n\t\t\t\t\t\t\t\t\t{recommendList.map((text) => (\n\t\t\t\t\t\t\t\t\t\t<div key={text} className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t\t\t\t<Recommend text={text} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section className=\"pb-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container text-center space-y-4 mx-auto\">\n\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t今すぐ初めて、<span className=\"text-primary\">健康的な食生活</span>\n\t\t\t\t\t\t\tを手に入れよう\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<p className=\"mg:text-lg lg:text-xl text-neutral-500 mx-auto\">\n\t\t\t\t\t\t\tVegeGuideなら、忙しい毎日でも無理なく続けられる\n\t\t\t\t\t\t\t\"ちょうどいい健康習慣\"をサポートします。\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex justify-center pt-4\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary transform transition hover:scale-105\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ始める\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</main>\n\n\t\t\t<Modal>\n\t\t\t\t<EmailChangeSuccess email={email} closeModal={closeModal} />\n\t\t\t</Modal>\n\t\t</>\n\t);\n}\n\nexport default Top;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/Top/Top.tsx"},"span":[3172,3268],"sourceCode":"import { ChefHat, Leaf, Refrigerator, ShoppingCart } from \"lucide-react\";\nimport { useNavigate } from \"react-router\";\nimport EmailChangeSuccess from \"../../components/EmailChangeSuccess\";\nimport Meta from \"../../components/Meta\";\nimport { useEmailChangeConfirmation } from \"../../hooks/useEmailChangeConfirmation\";\nimport useModal from \"../../hooks/useModal\";\nimport { useScrollAnimation } from \"../../hooks/useScrollAnimation\";\nimport FeatureCard from \"./FeatureCard\";\nimport MeritHighLight from \"./MeritHighLight\";\nimport Recommend from \"./Recommend\";\nimport UsageCard from \"./UsageCard\";\n\nconst recommendList: string[] = [\n\t\"忙しい仕事の合間に健康的な食事を摂りたい方\",\n\t\"料理は苦手だけど、外食やコンビニ食を減らしたい方\",\n\t\"健康を意識し始めた社会人の方\",\n\t\"食費を抑えつつ、栄養バランスの良い食事をしたい方\",\n\t\"食材を無駄にせず、効率的に使い切りたい方\",\n];\n\nfunction Top(): React.ReactElement {\n\tconst navigate = useNavigate();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst { email } = useEmailChangeConfirmation(openModal);\n\tuseScrollAnimation();\n\n\treturn (\n\t\t<>\n\t\t\t<Meta title=\"トップ\" description=\"VegeGuideのアプリ概要です。\" />\n\t\t\t<header className=\"w-full mx-auto sticky top-0 z-40 backdrop-blur bg-white animate-fade-up mb-16 lg:mb-32\">\n\t\t\t\t<div className=\"container mx-auto flex h-16 items-center justify-center\">\n\t\t\t\t\t<nav className=\"flex justify-center gap-8\">\n\t\t\t\t\t\t<a href=\"#feature\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t特徴\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#usage\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t使い方\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#merit\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\tメリット\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<main\n\t\t\t\tclassName=\"container flex flex-col px-4 lg:px-0  mx-auto space-y-16 lg:space-y-32 min-h-screen animate-fade-up\"\n\t\t\t\tstyle={{ animationDelay: \"0.1s\", animationFillMode: \"both\" }}\n\t\t\t>\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"flex mx-auto animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex-1 flex flex-col items-center justify-center space-y-8\">\n\t\t\t\t\t\t<h1\n\t\t\t\t\t\t\tclassName=\"text-center lg:text-left text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t忙しいあなたの\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<span className=\"text-primary\">毎日のちょうどいい健康習慣</span>\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName=\" text-lg md:text-xl lg:text-2xl text-neutral-500 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.4s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t野菜情報・価格比較・レシピ提案・買い物リスト・食材管理を一元化。\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t料理のハードルを下げ、食材のムダを防ぎながら、栄養価が高くコスパの良い食生活をサポートします。\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"flex space-x-4 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ使ってみる\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button className=\"btn\">\n\t\t\t\t\t\t\t\t<a href=\"#feature\">詳しく見る</a>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"hidden lg:flex flex-1 justify-center animate-fade-up\"\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.6s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"mockup-phone \">\n\t\t\t\t\t\t\t<div className=\"mockup-phone-camera\" />\n\t\t\t\t\t\t\t<div className=\"bg-base-100 mockup-phone-display text-white grid place-content-center p-2\">\n\t\t\t\t\t\t\t\t<img src=\"/top.png\" alt=\"\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"feature\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t<span className=\"text-primary\">VegeGuide</span>の特徴\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を送りたいけれど、忙しくて時間がない。\n\t\t\t\t\t\t\t\tそんなあなたの毎日をサポートする機能が揃っています。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜情報\"\n\t\t\t\t\t\t\t\t\tdescription=\"「旬・安い・栄養価が高い」野菜を一覧で表示。 季節に合わせた最適な食材選びをサポートします。\"\n\t\t\t\t\t\t\t\t\tIcon={Leaf}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.85s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"時短レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"選んだ野菜を使った簡単レシピをすぐに提案。 忙しい平日でも手軽に作れるメニューが見つかります。\"\n\t\t\t\t\t\t\t\t\tIcon={ChefHat}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リスト自動生成\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピを選ぶだけで必要な食材が自動でリストアップ。 仕事帰りのスーパーでもサクッと買い物ができます。\"\n\t\t\t\t\t\t\t\t\tIcon={ShoppingCart}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.95s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"食材管理＋レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"買い物リストから食材を登録し、賞味期限や在庫を管理。登録食材を使ったレシピも提案。食材を無駄なく使い切ります。\"\n\t\t\t\t\t\t\t\t\tIcon={Refrigerator}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"usage\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t使い方はとてもシンプル\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t複数のアプリを行き来する必要はありません。\n\t\t\t\t\t\t\t\tVegeGuideひとつで、食材選びから調理まで一気通貫でサポートします。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16 place-items-center\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/ce62a126366946d7196e7c61a7118a26.jpg\"\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜を選ぶ\"\n\t\t\t\t\t\t\t\t\tdescription=\"アプリを開くと、旬の野菜が一覧で表示されます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"1\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.15s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/de1f1402b1c2b8ecf02bf5c13dba219a.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"レシピを生成する\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ提案から選んだ野菜のレシピを生成します。\"\n\t\t\t\t\t\t\t\t\tnumber=\"2\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.2s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/8684ee9291f2a6850f9011ffcd941483.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リストを作成\"\n\t\t\t\t\t\t\t\t\tdescription=\"生成したレシピから買い物リストを作成します\"\n\t\t\t\t\t\t\t\t\tnumber=\"3\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.25s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/cadd35db48d1482d86cc2bbebab4479e.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"簡単に調理\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ通りに、短時間で簡単に調理できます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"4\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"merit\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\tVegeGuideを使うメリット\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mx-auto mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を無理なく続けるための、4つの推しポイント\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"space-y-12 mt-8\">\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"旬の野菜 × 価格情報 × 栄養価表示の三位一体\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今の旬」「価格の安さ」「栄養面」の3軸から、コスパの良い食材選びができる\",\n\t\t\t\t\t\t\t\t\t\"他のレシピアプリや買い物アプリにはない、情報の一元化を実現\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/fb5be1e00203df88a56a73f9291c9d87\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/fb5be1e00203df88a56a73f9291c9d87.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"買い物リストの自動生成 × 実用的UI\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"レシピ一覧から自動生成できるチェックリスト付き買い物リスト\",\n\t\t\t\t\t\t\t\t\t\"仕事帰りでもサクッと買い物できる実用的なUI設計\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/b40e4457aeb065d479f75c0010c8cf2b\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/b40e4457aeb065d479f75c0010c8cf2b.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-1 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"複数アプリを行き来する必要がなく、毎日の食生活がシンプルに\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「野菜を選ぶ→買う→作る→残りも使う」一連の流れを一つのサービスで完結\",\n\t\t\t\t\t\t\t\t\t\"他サービスのように「レシピだけ」「栄養管理だけ」「冷蔵庫管理だけ」という分断がない\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"食材の無駄を減らす「冷蔵庫機能」\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今あるもので何が作れる？」がすぐにわかる\",\n\t\t\t\t\t\t\t\t\t\"食材のムダがなくなり、食費削減＋罪悪感ゼロ\",\n\t\t\t\t\t\t\t\t\t\"生成AIによるカスタムレシピ提案、冷蔵庫内食材に基づくリコメンド\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/c2dda647c92d1499f67c7446b210ecef\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/c2dda647c92d1499f67c7446b210ecef.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-2 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.4s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<div className=\"mx-auto max-w-2xl rounded-xl shadow-lg p-1 md:p-5 lg:p-10\">\n\t\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t\tこんな方におすすめです\n\t\t\t\t\t\t\t\t</h2>\n\n\t\t\t\t\t\t\t\t<div className=\"space-y-4 mt-8\">\n\t\t\t\t\t\t\t\t\t{recommendList.map((text) => (\n\t\t\t\t\t\t\t\t\t\t<div key={text} className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t\t\t\t<Recommend text={text} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section className=\"pb-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container text-center space-y-4 mx-auto\">\n\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t今すぐ初めて、<span className=\"text-primary\">健康的な食生活</span>\n\t\t\t\t\t\t\tを手に入れよう\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<p className=\"mg:text-lg lg:text-xl text-neutral-500 mx-auto\">\n\t\t\t\t\t\t\tVegeGuideなら、忙しい毎日でも無理なく続けられる\n\t\t\t\t\t\t\t\"ちょうどいい健康習慣\"をサポートします。\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex justify-center pt-4\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary transform transition hover:scale-105\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ始める\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</main>\n\n\t\t\t<Modal>\n\t\t\t\t<EmailChangeSuccess email={email} closeModal={closeModal} />\n\t\t\t</Modal>\n\t\t</>\n\t);\n}\n\nexport default Top;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/Top/Top.tsx"},"span":[3326,3350],"sourceCode":"import { ChefHat, Leaf, Refrigerator, ShoppingCart } from \"lucide-react\";\nimport { useNavigate } from \"react-router\";\nimport EmailChangeSuccess from \"../../components/EmailChangeSuccess\";\nimport Meta from \"../../components/Meta\";\nimport { useEmailChangeConfirmation } from \"../../hooks/useEmailChangeConfirmation\";\nimport useModal from \"../../hooks/useModal\";\nimport { useScrollAnimation } from \"../../hooks/useScrollAnimation\";\nimport FeatureCard from \"./FeatureCard\";\nimport MeritHighLight from \"./MeritHighLight\";\nimport Recommend from \"./Recommend\";\nimport UsageCard from \"./UsageCard\";\n\nconst recommendList: string[] = [\n\t\"忙しい仕事の合間に健康的な食事を摂りたい方\",\n\t\"料理は苦手だけど、外食やコンビニ食を減らしたい方\",\n\t\"健康を意識し始めた社会人の方\",\n\t\"食費を抑えつつ、栄養バランスの良い食事をしたい方\",\n\t\"食材を無駄にせず、効率的に使い切りたい方\",\n];\n\nfunction Top(): React.ReactElement {\n\tconst navigate = useNavigate();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst { email } = useEmailChangeConfirmation(openModal);\n\tuseScrollAnimation();\n\n\treturn (\n\t\t<>\n\t\t\t<Meta title=\"トップ\" description=\"VegeGuideのアプリ概要です。\" />\n\t\t\t<header className=\"w-full mx-auto sticky top-0 z-40 backdrop-blur bg-white animate-fade-up mb-16 lg:mb-32\">\n\t\t\t\t<div className=\"container mx-auto flex h-16 items-center justify-center\">\n\t\t\t\t\t<nav className=\"flex justify-center gap-8\">\n\t\t\t\t\t\t<a href=\"#feature\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t特徴\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#usage\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t使い方\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#merit\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\tメリット\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<main\n\t\t\t\tclassName=\"container flex flex-col px-4 lg:px-0  mx-auto space-y-16 lg:space-y-32 min-h-screen animate-fade-up\"\n\t\t\t\tstyle={{ animationDelay: \"0.1s\", animationFillMode: \"both\" }}\n\t\t\t>\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"flex mx-auto animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex-1 flex flex-col items-center justify-center space-y-8\">\n\t\t\t\t\t\t<h1\n\t\t\t\t\t\t\tclassName=\"text-center lg:text-left text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t忙しいあなたの\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<span className=\"text-primary\">毎日のちょうどいい健康習慣</span>\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName=\" text-lg md:text-xl lg:text-2xl text-neutral-500 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.4s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t野菜情報・価格比較・レシピ提案・買い物リスト・食材管理を一元化。\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t料理のハードルを下げ、食材のムダを防ぎながら、栄養価が高くコスパの良い食生活をサポートします。\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"flex space-x-4 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ使ってみる\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button className=\"btn\">\n\t\t\t\t\t\t\t\t<a href=\"#feature\">詳しく見る</a>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"hidden lg:flex flex-1 justify-center animate-fade-up\"\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.6s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"mockup-phone \">\n\t\t\t\t\t\t\t<div className=\"mockup-phone-camera\" />\n\t\t\t\t\t\t\t<div className=\"bg-base-100 mockup-phone-display text-white grid place-content-center p-2\">\n\t\t\t\t\t\t\t\t<img src=\"/top.png\" alt=\"\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"feature\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t<span className=\"text-primary\">VegeGuide</span>の特徴\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を送りたいけれど、忙しくて時間がない。\n\t\t\t\t\t\t\t\tそんなあなたの毎日をサポートする機能が揃っています。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜情報\"\n\t\t\t\t\t\t\t\t\tdescription=\"「旬・安い・栄養価が高い」野菜を一覧で表示。 季節に合わせた最適な食材選びをサポートします。\"\n\t\t\t\t\t\t\t\t\tIcon={Leaf}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.85s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"時短レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"選んだ野菜を使った簡単レシピをすぐに提案。 忙しい平日でも手軽に作れるメニューが見つかります。\"\n\t\t\t\t\t\t\t\t\tIcon={ChefHat}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リスト自動生成\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピを選ぶだけで必要な食材が自動でリストアップ。 仕事帰りのスーパーでもサクッと買い物ができます。\"\n\t\t\t\t\t\t\t\t\tIcon={ShoppingCart}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.95s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"食材管理＋レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"買い物リストから食材を登録し、賞味期限や在庫を管理。登録食材を使ったレシピも提案。食材を無駄なく使い切ります。\"\n\t\t\t\t\t\t\t\t\tIcon={Refrigerator}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"usage\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t使い方はとてもシンプル\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t複数のアプリを行き来する必要はありません。\n\t\t\t\t\t\t\t\tVegeGuideひとつで、食材選びから調理まで一気通貫でサポートします。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16 place-items-center\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/ce62a126366946d7196e7c61a7118a26.jpg\"\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜を選ぶ\"\n\t\t\t\t\t\t\t\t\tdescription=\"アプリを開くと、旬の野菜が一覧で表示されます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"1\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.15s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/de1f1402b1c2b8ecf02bf5c13dba219a.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"レシピを生成する\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ提案から選んだ野菜のレシピを生成します。\"\n\t\t\t\t\t\t\t\t\tnumber=\"2\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.2s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/8684ee9291f2a6850f9011ffcd941483.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リストを作成\"\n\t\t\t\t\t\t\t\t\tdescription=\"生成したレシピから買い物リストを作成します\"\n\t\t\t\t\t\t\t\t\tnumber=\"3\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.25s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/cadd35db48d1482d86cc2bbebab4479e.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"簡単に調理\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ通りに、短時間で簡単に調理できます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"4\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"merit\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\tVegeGuideを使うメリット\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mx-auto mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を無理なく続けるための、4つの推しポイント\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"space-y-12 mt-8\">\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"旬の野菜 × 価格情報 × 栄養価表示の三位一体\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今の旬」「価格の安さ」「栄養面」の3軸から、コスパの良い食材選びができる\",\n\t\t\t\t\t\t\t\t\t\"他のレシピアプリや買い物アプリにはない、情報の一元化を実現\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/fb5be1e00203df88a56a73f9291c9d87\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/fb5be1e00203df88a56a73f9291c9d87.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"買い物リストの自動生成 × 実用的UI\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"レシピ一覧から自動生成できるチェックリスト付き買い物リスト\",\n\t\t\t\t\t\t\t\t\t\"仕事帰りでもサクッと買い物できる実用的なUI設計\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/b40e4457aeb065d479f75c0010c8cf2b\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/b40e4457aeb065d479f75c0010c8cf2b.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-1 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"複数アプリを行き来する必要がなく、毎日の食生活がシンプルに\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「野菜を選ぶ→買う→作る→残りも使う」一連の流れを一つのサービスで完結\",\n\t\t\t\t\t\t\t\t\t\"他サービスのように「レシピだけ」「栄養管理だけ」「冷蔵庫管理だけ」という分断がない\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"食材の無駄を減らす「冷蔵庫機能」\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今あるもので何が作れる？」がすぐにわかる\",\n\t\t\t\t\t\t\t\t\t\"食材のムダがなくなり、食費削減＋罪悪感ゼロ\",\n\t\t\t\t\t\t\t\t\t\"生成AIによるカスタムレシピ提案、冷蔵庫内食材に基づくリコメンド\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/c2dda647c92d1499f67c7446b210ecef\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/c2dda647c92d1499f67c7446b210ecef.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-2 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.4s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<div className=\"mx-auto max-w-2xl rounded-xl shadow-lg p-1 md:p-5 lg:p-10\">\n\t\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t\tこんな方におすすめです\n\t\t\t\t\t\t\t\t</h2>\n\n\t\t\t\t\t\t\t\t<div className=\"space-y-4 mt-8\">\n\t\t\t\t\t\t\t\t\t{recommendList.map((text) => (\n\t\t\t\t\t\t\t\t\t\t<div key={text} className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t\t\t\t<Recommend text={text} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section className=\"pb-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container text-center space-y-4 mx-auto\">\n\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t今すぐ初めて、<span className=\"text-primary\">健康的な食生活</span>\n\t\t\t\t\t\t\tを手に入れよう\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<p className=\"mg:text-lg lg:text-xl text-neutral-500 mx-auto\">\n\t\t\t\t\t\t\tVegeGuideなら、忙しい毎日でも無理なく続けられる\n\t\t\t\t\t\t\t\"ちょうどいい健康習慣\"をサポートします。\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex justify-center pt-4\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary transform transition hover:scale-105\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ始める\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</main>\n\n\t\t\t<Modal>\n\t\t\t\t<EmailChangeSuccess email={email} closeModal={closeModal} />\n\t\t\t</Modal>\n\t\t</>\n\t);\n}\n\nexport default Top;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/Top/Top.tsx"},"span":[12892,13025],"sourceCode":"import { ChefHat, Leaf, Refrigerator, ShoppingCart } from \"lucide-react\";\nimport { useNavigate } from \"react-router\";\nimport EmailChangeSuccess from \"../../components/EmailChangeSuccess\";\nimport Meta from \"../../components/Meta\";\nimport { useEmailChangeConfirmation } from \"../../hooks/useEmailChangeConfirmation\";\nimport useModal from \"../../hooks/useModal\";\nimport { useScrollAnimation } from \"../../hooks/useScrollAnimation\";\nimport FeatureCard from \"./FeatureCard\";\nimport MeritHighLight from \"./MeritHighLight\";\nimport Recommend from \"./Recommend\";\nimport UsageCard from \"./UsageCard\";\n\nconst recommendList: string[] = [\n\t\"忙しい仕事の合間に健康的な食事を摂りたい方\",\n\t\"料理は苦手だけど、外食やコンビニ食を減らしたい方\",\n\t\"健康を意識し始めた社会人の方\",\n\t\"食費を抑えつつ、栄養バランスの良い食事をしたい方\",\n\t\"食材を無駄にせず、効率的に使い切りたい方\",\n];\n\nfunction Top(): React.ReactElement {\n\tconst navigate = useNavigate();\n\tconst { Modal, openModal, closeModal } = useModal();\n\tconst { email } = useEmailChangeConfirmation(openModal);\n\tuseScrollAnimation();\n\n\treturn (\n\t\t<>\n\t\t\t<Meta title=\"トップ\" description=\"VegeGuideのアプリ概要です。\" />\n\t\t\t<header className=\"w-full mx-auto sticky top-0 z-40 backdrop-blur bg-white animate-fade-up mb-16 lg:mb-32\">\n\t\t\t\t<div className=\"container mx-auto flex h-16 items-center justify-center\">\n\t\t\t\t\t<nav className=\"flex justify-center gap-8\">\n\t\t\t\t\t\t<a href=\"#feature\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t特徴\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#usage\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\t使い方\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#merit\" className=\"transition hover:text-primary\">\n\t\t\t\t\t\t\tメリット\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<main\n\t\t\t\tclassName=\"container flex flex-col px-4 lg:px-0  mx-auto space-y-16 lg:space-y-32 min-h-screen animate-fade-up\"\n\t\t\t\tstyle={{ animationDelay: \"0.1s\", animationFillMode: \"both\" }}\n\t\t\t>\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"flex mx-auto animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"0.2s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex-1 flex flex-col items-center justify-center space-y-8\">\n\t\t\t\t\t\t<h1\n\t\t\t\t\t\t\tclassName=\"text-center lg:text-left text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.3s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t忙しいあなたの\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<span className=\"text-primary\">毎日のちょうどいい健康習慣</span>\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName=\" text-lg md:text-xl lg:text-2xl text-neutral-500 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.4s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t野菜情報・価格比較・レシピ提案・買い物リスト・食材管理を一元化。\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t料理のハードルを下げ、食材のムダを防ぎながら、栄養価が高くコスパの良い食生活をサポートします。\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"flex space-x-4 animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.5s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ使ってみる\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button className=\"btn\">\n\t\t\t\t\t\t\t\t<a href=\"#feature\">詳しく見る</a>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"hidden lg:flex flex-1 justify-center animate-fade-up\"\n\t\t\t\t\t\tstyle={{ animationDelay: \"0.6s\", animationFillMode: \"both\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"mockup-phone \">\n\t\t\t\t\t\t\t<div className=\"mockup-phone-camera\" />\n\t\t\t\t\t\t\t<div className=\"bg-base-100 mockup-phone-display text-white grid place-content-center p-2\">\n\t\t\t\t\t\t\t\t<img src=\"/top.png\" alt=\"\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"feature\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t<span className=\"text-primary\">VegeGuide</span>の特徴\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を送りたいけれど、忙しくて時間がない。\n\t\t\t\t\t\t\t\tそんなあなたの毎日をサポートする機能が揃っています。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜情報\"\n\t\t\t\t\t\t\t\t\tdescription=\"「旬・安い・栄養価が高い」野菜を一覧で表示。 季節に合わせた最適な食材選びをサポートします。\"\n\t\t\t\t\t\t\t\t\tIcon={Leaf}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.85s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"時短レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"選んだ野菜を使った簡単レシピをすぐに提案。 忙しい平日でも手軽に作れるメニューが見つかります。\"\n\t\t\t\t\t\t\t\t\tIcon={ChefHat}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.9s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リスト自動生成\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピを選ぶだけで必要な食材が自動でリストアップ。 仕事帰りのスーパーでもサクッと買い物ができます。\"\n\t\t\t\t\t\t\t\t\tIcon={ShoppingCart}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"0.95s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FeatureCard\n\t\t\t\t\t\t\t\t\ttitle=\"食材管理＋レシピ提案\"\n\t\t\t\t\t\t\t\t\tdescription=\"買い物リストから食材を登録し、賞味期限や在庫を管理。登録食材を使ったレシピも提案。食材を無駄なく使い切ります。\"\n\t\t\t\t\t\t\t\t\tIcon={Refrigerator}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"usage\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t使い方はとてもシンプル\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mt-4\">\n\t\t\t\t\t\t\t\t複数のアプリを行き来する必要はありません。\n\t\t\t\t\t\t\t\tVegeGuideひとつで、食材選びから調理まで一気通貫でサポートします。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 mt-16 place-items-center\">\n\t\t\t\t\t\t\t<div className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/ce62a126366946d7196e7c61a7118a26.jpg\"\n\t\t\t\t\t\t\t\t\ttitle=\"旬の野菜を選ぶ\"\n\t\t\t\t\t\t\t\t\tdescription=\"アプリを開くと、旬の野菜が一覧で表示されます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"1\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.15s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/de1f1402b1c2b8ecf02bf5c13dba219a.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"レシピを生成する\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ提案から選んだ野菜のレシピを生成します。\"\n\t\t\t\t\t\t\t\t\tnumber=\"2\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.2s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/8684ee9291f2a6850f9011ffcd941483.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"買い物リストを作成\"\n\t\t\t\t\t\t\t\t\tdescription=\"生成したレシピから買い物リストを作成します\"\n\t\t\t\t\t\t\t\t\tnumber=\"3\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\t\tstyle={{ animationDelay: \"1.25s\", animationFillMode: \"both\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<UsageCard\n\t\t\t\t\t\t\t\t\timage=\"https://i.gyazo.com/cadd35db48d1482d86cc2bbebab4479e.png\"\n\t\t\t\t\t\t\t\t\ttitle=\"簡単に調理\"\n\t\t\t\t\t\t\t\t\tdescription=\"レシピ通りに、短時間で簡単に調理できます。\"\n\t\t\t\t\t\t\t\t\tnumber=\"4\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section id=\"merit\" className=\"scroll-mt-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\tVegeGuideを使うメリット\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"text-md md:text-lg lg:text-xl text-neutral-500 mx-auto mt-4\">\n\t\t\t\t\t\t\t\t健康的な食生活を無理なく続けるための、4つの推しポイント\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"space-y-12 mt-8\">\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"旬の野菜 × 価格情報 × 栄養価表示の三位一体\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今の旬」「価格の安さ」「栄養面」の3軸から、コスパの良い食材選びができる\",\n\t\t\t\t\t\t\t\t\t\"他のレシピアプリや買い物アプリにはない、情報の一元化を実現\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/fb5be1e00203df88a56a73f9291c9d87\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/fb5be1e00203df88a56a73f9291c9d87.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"買い物リストの自動生成 × 実用的UI\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"レシピ一覧から自動生成できるチェックリスト付き買い物リスト\",\n\t\t\t\t\t\t\t\t\t\"仕事帰りでもサクッと買い物できる実用的なUI設計\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/b40e4457aeb065d479f75c0010c8cf2b\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/b40e4457aeb065d479f75c0010c8cf2b.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"600\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-1 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"複数アプリを行き来する必要がなく、毎日の食生活がシンプルに\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「野菜を選ぶ→買う→作る→残りも使う」一連の流れを一つのサービスで完結\",\n\t\t\t\t\t\t\t\t\t\"他サービスのように「レシピだけ」「栄養管理だけ」「冷蔵庫管理だけ」という分断がない\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/6632c66b96f6e7eb1ca6c49a3cd5e9ea.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1\", \"order-2\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<MeritHighLight\n\t\t\t\t\t\t\t\ttitle=\"食材の無駄を減らす「冷蔵庫機能」\"\n\t\t\t\t\t\t\t\tmerits={[\n\t\t\t\t\t\t\t\t\t\"「今あるもので何が作れる？」がすぐにわかる\",\n\t\t\t\t\t\t\t\t\t\"食材のムダがなくなり、食費削減＋罪悪感ゼロ\",\n\t\t\t\t\t\t\t\t\t\"生成AIによるカスタムレシピ提案、冷蔵庫内食材に基づくリコメンド\",\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\timage={\n\t\t\t\t\t\t\t\t\t<a href=\"https://gyazo.com/c2dda647c92d1499f67c7446b210ecef\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://i.gyazo.com/c2dda647c92d1499f67c7446b210ecef.gif\"\n\t\t\t\t\t\t\t\t\t\t\talt=\"Image from Gyazo\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torder={[\"order-1 md:order-2\", \"order-2 md:order-1\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\tstyle={{ animationDelay: \"1.4s\", animationFillMode: \"both\" }}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<div className=\"mx-auto max-w-2xl rounded-xl shadow-lg p-1 md:p-5 lg:p-10\">\n\t\t\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t\t\tこんな方におすすめです\n\t\t\t\t\t\t\t\t</h2>\n\n\t\t\t\t\t\t\t\t<div className=\"space-y-4 mt-8\">\n\t\t\t\t\t\t\t\t\t{recommendList.map((text) => (\n\t\t\t\t\t\t\t\t\t\t<div key={text} className=\"scroll-animation-target\">\n\t\t\t\t\t\t\t\t\t\t\t<Recommend text={text} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section className=\"pb-20 scroll-animation-target\">\n\t\t\t\t\t<div className=\"container text-center space-y-4 mx-auto\">\n\t\t\t\t\t\t<h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold\">\n\t\t\t\t\t\t\t今すぐ初めて、<span className=\"text-primary\">健康的な食生活</span>\n\t\t\t\t\t\t\tを手に入れよう\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<p className=\"mg:text-lg lg:text-xl text-neutral-500 mx-auto\">\n\t\t\t\t\t\t\tVegeGuideなら、忙しい毎日でも無理なく続けられる\n\t\t\t\t\t\t\t\"ちょうどいい健康習慣\"をサポートします。\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<div className=\"flex justify-center pt-4\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary transform transition hover:scale-105\"\n\t\t\t\t\t\t\t\tonClick={() => navigate(\"/signup\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t今すぐ始める\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</main>\n\n\t\t\t<Modal>\n\t\t\t\t<EmailChangeSuccess email={email} closeModal={closeModal} />\n\t\t\t</Modal>\n\t\t</>\n\t);\n}\n\nexport default Top;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"error","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/test/components/EditFridgeItemForm.test.tsx"},"span":[304,307],"sourceCode":"import { render, screen } from \"@testing-library/react\";\nimport type { LucideIcon } from \"lucide-react\";\nimport React from \"react\";\nimport EditFridgeItemForm from \"../../components/EditFridgeItemForm\";\n\ndescribe(\"EditFridgeItemForm\", () => {\n\tconst MockIcon: LucideIcon = React.forwardRef<SVGSVGElement, any>(\n\t\t(props, ref) => <div data-testid=\"mock-icon\" ref={ref} {...props} />,\n\t);\n\tconst defaultProps = {\n\t\tcloseModal: vi.fn(),\n\t\tcategories: [\n\t\t\t{ name: \"野菜\", icon: MockIcon },\n\t\t\t{ name: \"肉類\", icon: MockIcon },\n\t\t\t{ name: \"調味料\", icon: MockIcon },\n\t\t],\n\t\tid: 1,\n\t\titem: {\n\t\t\tid: \"1\",\n\t\t\tname: \"人参\",\n\t\t\tcategory: \"野菜\",\n\t\t\tdisplay_amount: \"100g\",\n\t\t\texpire_date: \"2025-9-20\",\n\t\t\tcreated_at: \"2025-09-17T17:44:38.363+09:00\",\n\t\t\tcreated_day: \"2025-9-17\",\n\t\t\texpire_status: \"warning\",\n\t\t},\n\t\thandleEdit: vi.fn(),\n\t};\n\tbeforeEach(() => {\n\t\tvi.resetAllMocks();\n\t\trender(<EditFridgeItemForm {...defaultProps} />);\n\t});\n\n\tdescribe(\"正常系\", () => {\n\t\tit(\"正しく初期表示されること\", () => {\n\t\t\texpect(screen.getByPlaceholderText(\"食材名\")).toBeInTheDocument();\n\t\t\texpect(screen.getByRole(\"combobox\")).toBeInTheDocument();\n\t\t\texpect(screen.getByRole(\"option\", { name: \"野菜\" })).toBeInTheDocument();\n\t\t\texpect(screen.getByPlaceholderText(\"数量\")).toBeInTheDocument();\n\t\t\texpect(\n\t\t\t\tscreen.getByRole(\"button\", { name: \"9/20/2025\" }),\n\t\t\t).toBeInTheDocument();\n\t\t});\n\t\tit(\"入力フィールドが正しく更新されること\", () => {});\n\t\tit(\"カテゴリ選択が正しく選択できること\");\n\t\tit(\"キャンセルボタンでモーダルが閉じること\");\n\t});\n});\n"},"tags":[],"source":null},{"category":"lint/a11y/useValidAnchor","severity":"error","description":"Use a button element instead of an a element.","message":[{"elements":[],"content":"Use a "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element instead of an "},{"elements":["Emphasis"],"content":"a"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Anchor elements should only be used for default sections or page navigation"}]]},{"log":["info",[{"elements":[],"content":"Check "},{"elements":[{"Hyperlink":{"href":"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}}],"content":"this thorough explanation"},{"elements":[],"content":" to better understand the context."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/VegeList/VegeList.tsx"},"span":[3886,3920],"sourceCode":"import { Leaf, RotateCcw, Search } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useLoaderData, useSearchParams } from \"react-router\";\nimport Card from \"../../components/Card\";\nimport Meta from \"../../components/Meta\";\nimport PaginationButtons from \"../../components/PaginationButtons\";\nimport useVegeNames from \"../../hooks/useVegeNames\";\nimport type { VegetablesLoaderData } from \"../../types/vegetable\";\n\nconst VegeList = () => {\n\tconst loaderData = useLoaderData() as VegetablesLoaderData;\n\tconst { data: vegetables, meta } = loaderData;\n\tconst { total_pages, current_page } = meta;\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\tconst [searchText, setSearchText] = useState<string>(\n\t\tsearchParams.get(\"keyword\") || \"\",\n\t);\n\tconst [isInSeason, setIsInSeason] = useState<boolean>(\n\t\tsearchParams.get(\"season\") === \"true\",\n\t);\n\tconst [isDiscounted, setIsDiscounted] = useState<boolean>(\n\t\tsearchParams.get(\"discounted\") === \"true\",\n\t);\n\tconst { vegeNames } = useVegeNames();\n\tconst [filteredNames, setFilteredNames] = useState<string[]>([]);\n\tconst [isDropdownVisible, setIsDropdownVisible] = useState<boolean>(false);\n\tconst [isResetting, setIsResetting] = useState<boolean>(false);\n\n\t//野菜名の遅延検索（デバウンス、リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tconst timer = setTimeout(() => {\n\t\t\tsetSearchParams((prev) => {\n\t\t\t\tconst current = new URLSearchParams(prev);\n\t\t\t\tcurrent.set(\"keyword\", searchText);\n\t\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\t\treturn current;\n\t\t\t});\n\t\t}, 500);\n\t\treturn () => clearTimeout(timer);\n\t}, [searchText, isResetting]);\n\n\t//フィルター即座反映（リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tsetSearchParams((prev) => {\n\t\t\tconst current = new URLSearchParams(prev);\n\t\t\tcurrent.set(\"season\", isInSeason ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"discounted\", isDiscounted ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\treturn current;\n\t\t});\n\t}, [isInSeason, isDiscounted, isResetting]);\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst value = e.target.value;\n\t\tsetSearchText(value);\n\n\t\tif (value.trim() === \"\") {\n\t\t\tsetFilteredNames([]);\n\t\t\tsetIsDropdownVisible(false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst filtered = vegeNames.filter((name) =>\n\t\t\tname.toLowerCase().includes(value.toLowerCase()),\n\t\t);\n\t\tsetFilteredNames(filtered);\n\t\tsetIsDropdownVisible(filtered.length > 0);\n\t};\n\n\tconst handleSelect = (name: string) => {\n\t\tsetSearchText(name);\n\t\tsetIsDropdownVisible(false);\n\t};\n\n\tconst handleResetFilters = () => {\n\t\tsetIsResetting(true);\n\t\tsetSearchText(\"\");\n\t\tsetIsInSeason(false);\n\t\tsetIsDiscounted(false);\n\t\tsetSearchParams(new URLSearchParams());\n\t\t// リセット完了を確実にするため少し遅延\n\t\tsetTimeout(() => {\n\t\t\tsetIsResetting(false);\n\t\t}, 100);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"野菜一覧\"\n\t\t\t\tdescription=\"旬の野菜を一覧でチェック。栄養や調理のヒントも満載！次のメニューの参考にどうぞ。\"\n\t\t\t/>\n\t\t\t<div className=\"container mx-auto px-2 mt-8 flex flex-col  md:flex-row space-x-4 space-y-2 md:space-y-0 md:items-center\">\n\t\t\t\t<div className=\"dropdown w-full sm:w-72\">\n\t\t\t\t\t<label className=\"input input-primary flex items-center w-full\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"grow\"\n\t\t\t\t\t\t\tname=\"vege-search\"\n\t\t\t\t\t\t\ttype=\"search\"\n\t\t\t\t\t\t\tplaceholder=\"野菜名を検索\"\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t{isDropdownVisible && (\n\t\t\t\t\t\t<ul className=\"dropdown-content menu bg-base-100 rounded-box z-[1] w-full sm:w-72 p-2 shadow-lg border border-base-300 mt-1 max-h-60 overflow-auto\">\n\t\t\t\t\t\t\t{filteredNames.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredNames.map((name) => (\n\t\t\t\t\t\t\t\t\t<li key={name}>\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleSelect(name)}\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(e) => e.preventDefault()}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:bg-base-200 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"px-4 py-2 text-base-content/60 text-center\">\n\t\t\t\t\t\t\t\t\t該当する野菜が見つかりません\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"season\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isInSeason}\n\t\t\t\t\t\tonChange={(e) => setIsInSeason(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"season\" className=\"label text-sm\">\n\t\t\t\t\t\t旬の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"discounted\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isDiscounted}\n\t\t\t\t\t\tonChange={(e) => setIsDiscounted(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"discounted\" className=\"label text-sm\">\n\t\t\t\t\t\t値下がり中の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-4 md:m-8 grid md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 gap-4\">\n\t\t\t\t{vegetables.length > 0 ? (\n\t\t\t\t\tvegetables.map((vegetable, index) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.1}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\tid={vegetable.attributes.id}\n\t\t\t\t\t\t\t\tname={vegetable.attributes.name}\n\t\t\t\t\t\t\t\tdescription={vegetable.attributes.description}\n\t\t\t\t\t\t\t\tprice={vegetable.attributes.latest_price.latest_price}\n\t\t\t\t\t\t\t\trate={vegetable.attributes.compare_last_month.compare_price}\n\t\t\t\t\t\t\t\timage={vegetable.attributes.image_url}\n\t\t\t\t\t\t\t\tseason={vegetable.attributes.seasons[0]?.in_season}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"col-span-full flex flex-col items-center justify-center py-16 px-4\">\n\t\t\t\t\t\t<div className=\"text-center max-w-md mx-auto\">\n\t\t\t\t\t\t\t<div className=\"mb-6\">\n\t\t\t\t\t\t\t\t<Leaf size={64} className=\"mx-auto text-base-content/30\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<h3 className=\"text-xl font-semibold text-base-content mb-3\">\n\t\t\t\t\t\t\t\t該当する野菜が見つかりませんでした\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<p className=\"text-base-content/60 mb-6 leading-relaxed\">\n\t\t\t\t\t\t\t\t検索条件を変更するか、フィルターをリセットして再度お試しください。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleResetFilters}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-primary gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<RotateCcw size={16} />\n\t\t\t\t\t\t\t\t\tフィルターをリセット\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => setSearchText(\"\")}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Search size={16} />\n\t\t\t\t\t\t\t\t\t検索条件をクリア\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{vegetables.length > 0 && total_pages > 0 && (\n\t\t\t\t<PaginationButtons\n\t\t\t\t\ttotalPages={total_pages}\n\t\t\t\t\tcurrentPage={current_page}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default VegeList;\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"error","description":"This hook does not specify all of its dependencies: setSearchParams","message":[{"elements":[],"content":"This hook does not specify all of its dependencies: setSearchParams"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This dependency is not specified in the hook dependency list."}]]},{"frame":{"path":null,"span":[1392,1407],"sourceCode":"import { Leaf, RotateCcw, Search } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useLoaderData, useSearchParams } from \"react-router\";\nimport Card from \"../../components/Card\";\nimport Meta from \"../../components/Meta\";\nimport PaginationButtons from \"../../components/PaginationButtons\";\nimport useVegeNames from \"../../hooks/useVegeNames\";\nimport type { VegetablesLoaderData } from \"../../types/vegetable\";\n\nconst VegeList = () => {\n\tconst loaderData = useLoaderData() as VegetablesLoaderData;\n\tconst { data: vegetables, meta } = loaderData;\n\tconst { total_pages, current_page } = meta;\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\tconst [searchText, setSearchText] = useState<string>(\n\t\tsearchParams.get(\"keyword\") || \"\",\n\t);\n\tconst [isInSeason, setIsInSeason] = useState<boolean>(\n\t\tsearchParams.get(\"season\") === \"true\",\n\t);\n\tconst [isDiscounted, setIsDiscounted] = useState<boolean>(\n\t\tsearchParams.get(\"discounted\") === \"true\",\n\t);\n\tconst { vegeNames } = useVegeNames();\n\tconst [filteredNames, setFilteredNames] = useState<string[]>([]);\n\tconst [isDropdownVisible, setIsDropdownVisible] = useState<boolean>(false);\n\tconst [isResetting, setIsResetting] = useState<boolean>(false);\n\n\t//野菜名の遅延検索（デバウンス、リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tconst timer = setTimeout(() => {\n\t\t\tsetSearchParams((prev) => {\n\t\t\t\tconst current = new URLSearchParams(prev);\n\t\t\t\tcurrent.set(\"keyword\", searchText);\n\t\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\t\treturn current;\n\t\t\t});\n\t\t}, 500);\n\t\treturn () => clearTimeout(timer);\n\t}, [searchText, isResetting]);\n\n\t//フィルター即座反映（リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tsetSearchParams((prev) => {\n\t\t\tconst current = new URLSearchParams(prev);\n\t\t\tcurrent.set(\"season\", isInSeason ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"discounted\", isDiscounted ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\treturn current;\n\t\t});\n\t}, [isInSeason, isDiscounted, isResetting]);\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst value = e.target.value;\n\t\tsetSearchText(value);\n\n\t\tif (value.trim() === \"\") {\n\t\t\tsetFilteredNames([]);\n\t\t\tsetIsDropdownVisible(false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst filtered = vegeNames.filter((name) =>\n\t\t\tname.toLowerCase().includes(value.toLowerCase()),\n\t\t);\n\t\tsetFilteredNames(filtered);\n\t\tsetIsDropdownVisible(filtered.length > 0);\n\t};\n\n\tconst handleSelect = (name: string) => {\n\t\tsetSearchText(name);\n\t\tsetIsDropdownVisible(false);\n\t};\n\n\tconst handleResetFilters = () => {\n\t\tsetIsResetting(true);\n\t\tsetSearchText(\"\");\n\t\tsetIsInSeason(false);\n\t\tsetIsDiscounted(false);\n\t\tsetSearchParams(new URLSearchParams());\n\t\t// リセット完了を確実にするため少し遅延\n\t\tsetTimeout(() => {\n\t\t\tsetIsResetting(false);\n\t\t}, 100);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"野菜一覧\"\n\t\t\t\tdescription=\"旬の野菜を一覧でチェック。栄養や調理のヒントも満載！次のメニューの参考にどうぞ。\"\n\t\t\t/>\n\t\t\t<div className=\"container mx-auto px-2 mt-8 flex flex-col  md:flex-row space-x-4 space-y-2 md:space-y-0 md:items-center\">\n\t\t\t\t<div className=\"dropdown w-full sm:w-72\">\n\t\t\t\t\t<label className=\"input input-primary flex items-center w-full\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"grow\"\n\t\t\t\t\t\t\tname=\"vege-search\"\n\t\t\t\t\t\t\ttype=\"search\"\n\t\t\t\t\t\t\tplaceholder=\"野菜名を検索\"\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t{isDropdownVisible && (\n\t\t\t\t\t\t<ul className=\"dropdown-content menu bg-base-100 rounded-box z-[1] w-full sm:w-72 p-2 shadow-lg border border-base-300 mt-1 max-h-60 overflow-auto\">\n\t\t\t\t\t\t\t{filteredNames.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredNames.map((name) => (\n\t\t\t\t\t\t\t\t\t<li key={name}>\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleSelect(name)}\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(e) => e.preventDefault()}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:bg-base-200 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"px-4 py-2 text-base-content/60 text-center\">\n\t\t\t\t\t\t\t\t\t該当する野菜が見つかりません\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"season\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isInSeason}\n\t\t\t\t\t\tonChange={(e) => setIsInSeason(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"season\" className=\"label text-sm\">\n\t\t\t\t\t\t旬の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"discounted\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isDiscounted}\n\t\t\t\t\t\tonChange={(e) => setIsDiscounted(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"discounted\" className=\"label text-sm\">\n\t\t\t\t\t\t値下がり中の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-4 md:m-8 grid md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 gap-4\">\n\t\t\t\t{vegetables.length > 0 ? (\n\t\t\t\t\tvegetables.map((vegetable, index) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.1}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\tid={vegetable.attributes.id}\n\t\t\t\t\t\t\t\tname={vegetable.attributes.name}\n\t\t\t\t\t\t\t\tdescription={vegetable.attributes.description}\n\t\t\t\t\t\t\t\tprice={vegetable.attributes.latest_price.latest_price}\n\t\t\t\t\t\t\t\trate={vegetable.attributes.compare_last_month.compare_price}\n\t\t\t\t\t\t\t\timage={vegetable.attributes.image_url}\n\t\t\t\t\t\t\t\tseason={vegetable.attributes.seasons[0]?.in_season}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"col-span-full flex flex-col items-center justify-center py-16 px-4\">\n\t\t\t\t\t\t<div className=\"text-center max-w-md mx-auto\">\n\t\t\t\t\t\t\t<div className=\"mb-6\">\n\t\t\t\t\t\t\t\t<Leaf size={64} className=\"mx-auto text-base-content/30\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<h3 className=\"text-xl font-semibold text-base-content mb-3\">\n\t\t\t\t\t\t\t\t該当する野菜が見つかりませんでした\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<p className=\"text-base-content/60 mb-6 leading-relaxed\">\n\t\t\t\t\t\t\t\t検索条件を変更するか、フィルターをリセットして再度お試しください。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleResetFilters}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-primary gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<RotateCcw size={16} />\n\t\t\t\t\t\t\t\t\tフィルターをリセット\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => setSearchText(\"\")}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Search size={16} />\n\t\t\t\t\t\t\t\t\t検索条件をクリア\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{vegetables.length > 0 && total_pages > 0 && (\n\t\t\t\t<PaginationButtons\n\t\t\t\t\ttotalPages={total_pages}\n\t\t\t\t\tcurrentPage={current_page}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default VegeList;\n"}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/VegeList/VegeList.tsx"},"span":[1308,1317],"sourceCode":"import { Leaf, RotateCcw, Search } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useLoaderData, useSearchParams } from \"react-router\";\nimport Card from \"../../components/Card\";\nimport Meta from \"../../components/Meta\";\nimport PaginationButtons from \"../../components/PaginationButtons\";\nimport useVegeNames from \"../../hooks/useVegeNames\";\nimport type { VegetablesLoaderData } from \"../../types/vegetable\";\n\nconst VegeList = () => {\n\tconst loaderData = useLoaderData() as VegetablesLoaderData;\n\tconst { data: vegetables, meta } = loaderData;\n\tconst { total_pages, current_page } = meta;\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\tconst [searchText, setSearchText] = useState<string>(\n\t\tsearchParams.get(\"keyword\") || \"\",\n\t);\n\tconst [isInSeason, setIsInSeason] = useState<boolean>(\n\t\tsearchParams.get(\"season\") === \"true\",\n\t);\n\tconst [isDiscounted, setIsDiscounted] = useState<boolean>(\n\t\tsearchParams.get(\"discounted\") === \"true\",\n\t);\n\tconst { vegeNames } = useVegeNames();\n\tconst [filteredNames, setFilteredNames] = useState<string[]>([]);\n\tconst [isDropdownVisible, setIsDropdownVisible] = useState<boolean>(false);\n\tconst [isResetting, setIsResetting] = useState<boolean>(false);\n\n\t//野菜名の遅延検索（デバウンス、リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tconst timer = setTimeout(() => {\n\t\t\tsetSearchParams((prev) => {\n\t\t\t\tconst current = new URLSearchParams(prev);\n\t\t\t\tcurrent.set(\"keyword\", searchText);\n\t\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\t\treturn current;\n\t\t\t});\n\t\t}, 500);\n\t\treturn () => clearTimeout(timer);\n\t}, [searchText, isResetting]);\n\n\t//フィルター即座反映（リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tsetSearchParams((prev) => {\n\t\t\tconst current = new URLSearchParams(prev);\n\t\t\tcurrent.set(\"season\", isInSeason ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"discounted\", isDiscounted ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\treturn current;\n\t\t});\n\t}, [isInSeason, isDiscounted, isResetting]);\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst value = e.target.value;\n\t\tsetSearchText(value);\n\n\t\tif (value.trim() === \"\") {\n\t\t\tsetFilteredNames([]);\n\t\t\tsetIsDropdownVisible(false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst filtered = vegeNames.filter((name) =>\n\t\t\tname.toLowerCase().includes(value.toLowerCase()),\n\t\t);\n\t\tsetFilteredNames(filtered);\n\t\tsetIsDropdownVisible(filtered.length > 0);\n\t};\n\n\tconst handleSelect = (name: string) => {\n\t\tsetSearchText(name);\n\t\tsetIsDropdownVisible(false);\n\t};\n\n\tconst handleResetFilters = () => {\n\t\tsetIsResetting(true);\n\t\tsetSearchText(\"\");\n\t\tsetIsInSeason(false);\n\t\tsetIsDiscounted(false);\n\t\tsetSearchParams(new URLSearchParams());\n\t\t// リセット完了を確実にするため少し遅延\n\t\tsetTimeout(() => {\n\t\t\tsetIsResetting(false);\n\t\t}, 100);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"野菜一覧\"\n\t\t\t\tdescription=\"旬の野菜を一覧でチェック。栄養や調理のヒントも満載！次のメニューの参考にどうぞ。\"\n\t\t\t/>\n\t\t\t<div className=\"container mx-auto px-2 mt-8 flex flex-col  md:flex-row space-x-4 space-y-2 md:space-y-0 md:items-center\">\n\t\t\t\t<div className=\"dropdown w-full sm:w-72\">\n\t\t\t\t\t<label className=\"input input-primary flex items-center w-full\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"grow\"\n\t\t\t\t\t\t\tname=\"vege-search\"\n\t\t\t\t\t\t\ttype=\"search\"\n\t\t\t\t\t\t\tplaceholder=\"野菜名を検索\"\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t{isDropdownVisible && (\n\t\t\t\t\t\t<ul className=\"dropdown-content menu bg-base-100 rounded-box z-[1] w-full sm:w-72 p-2 shadow-lg border border-base-300 mt-1 max-h-60 overflow-auto\">\n\t\t\t\t\t\t\t{filteredNames.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredNames.map((name) => (\n\t\t\t\t\t\t\t\t\t<li key={name}>\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleSelect(name)}\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(e) => e.preventDefault()}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:bg-base-200 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"px-4 py-2 text-base-content/60 text-center\">\n\t\t\t\t\t\t\t\t\t該当する野菜が見つかりません\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"season\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isInSeason}\n\t\t\t\t\t\tonChange={(e) => setIsInSeason(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"season\" className=\"label text-sm\">\n\t\t\t\t\t\t旬の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"discounted\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isDiscounted}\n\t\t\t\t\t\tonChange={(e) => setIsDiscounted(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"discounted\" className=\"label text-sm\">\n\t\t\t\t\t\t値下がり中の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-4 md:m-8 grid md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 gap-4\">\n\t\t\t\t{vegetables.length > 0 ? (\n\t\t\t\t\tvegetables.map((vegetable, index) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.1}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\tid={vegetable.attributes.id}\n\t\t\t\t\t\t\t\tname={vegetable.attributes.name}\n\t\t\t\t\t\t\t\tdescription={vegetable.attributes.description}\n\t\t\t\t\t\t\t\tprice={vegetable.attributes.latest_price.latest_price}\n\t\t\t\t\t\t\t\trate={vegetable.attributes.compare_last_month.compare_price}\n\t\t\t\t\t\t\t\timage={vegetable.attributes.image_url}\n\t\t\t\t\t\t\t\tseason={vegetable.attributes.seasons[0]?.in_season}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"col-span-full flex flex-col items-center justify-center py-16 px-4\">\n\t\t\t\t\t\t<div className=\"text-center max-w-md mx-auto\">\n\t\t\t\t\t\t\t<div className=\"mb-6\">\n\t\t\t\t\t\t\t\t<Leaf size={64} className=\"mx-auto text-base-content/30\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<h3 className=\"text-xl font-semibold text-base-content mb-3\">\n\t\t\t\t\t\t\t\t該当する野菜が見つかりませんでした\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<p className=\"text-base-content/60 mb-6 leading-relaxed\">\n\t\t\t\t\t\t\t\t検索条件を変更するか、フィルターをリセットして再度お試しください。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleResetFilters}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-primary gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<RotateCcw size={16} />\n\t\t\t\t\t\t\t\t\tフィルターをリセット\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => setSearchText(\"\")}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Search size={16} />\n\t\t\t\t\t\t\t\t\t検索条件をクリア\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{vegetables.length > 0 && total_pages > 0 && (\n\t\t\t\t<PaginationButtons\n\t\t\t\t\ttotalPages={total_pages}\n\t\t\t\t\tcurrentPage={current_page}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default VegeList;\n"},"tags":[],"source":null},{"category":"lint/correctness/useExhaustiveDependencies","severity":"error","description":"This hook does not specify all of its dependencies: setSearchParams","message":[{"elements":[],"content":"This hook does not specify all of its dependencies: setSearchParams"}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"This dependency is not specified in the hook dependency list."}]]},{"frame":{"path":null,"span":[1754,1769],"sourceCode":"import { Leaf, RotateCcw, Search } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useLoaderData, useSearchParams } from \"react-router\";\nimport Card from \"../../components/Card\";\nimport Meta from \"../../components/Meta\";\nimport PaginationButtons from \"../../components/PaginationButtons\";\nimport useVegeNames from \"../../hooks/useVegeNames\";\nimport type { VegetablesLoaderData } from \"../../types/vegetable\";\n\nconst VegeList = () => {\n\tconst loaderData = useLoaderData() as VegetablesLoaderData;\n\tconst { data: vegetables, meta } = loaderData;\n\tconst { total_pages, current_page } = meta;\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\tconst [searchText, setSearchText] = useState<string>(\n\t\tsearchParams.get(\"keyword\") || \"\",\n\t);\n\tconst [isInSeason, setIsInSeason] = useState<boolean>(\n\t\tsearchParams.get(\"season\") === \"true\",\n\t);\n\tconst [isDiscounted, setIsDiscounted] = useState<boolean>(\n\t\tsearchParams.get(\"discounted\") === \"true\",\n\t);\n\tconst { vegeNames } = useVegeNames();\n\tconst [filteredNames, setFilteredNames] = useState<string[]>([]);\n\tconst [isDropdownVisible, setIsDropdownVisible] = useState<boolean>(false);\n\tconst [isResetting, setIsResetting] = useState<boolean>(false);\n\n\t//野菜名の遅延検索（デバウンス、リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tconst timer = setTimeout(() => {\n\t\t\tsetSearchParams((prev) => {\n\t\t\t\tconst current = new URLSearchParams(prev);\n\t\t\t\tcurrent.set(\"keyword\", searchText);\n\t\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\t\treturn current;\n\t\t\t});\n\t\t}, 500);\n\t\treturn () => clearTimeout(timer);\n\t}, [searchText, isResetting]);\n\n\t//フィルター即座反映（リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tsetSearchParams((prev) => {\n\t\t\tconst current = new URLSearchParams(prev);\n\t\t\tcurrent.set(\"season\", isInSeason ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"discounted\", isDiscounted ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\treturn current;\n\t\t});\n\t}, [isInSeason, isDiscounted, isResetting]);\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst value = e.target.value;\n\t\tsetSearchText(value);\n\n\t\tif (value.trim() === \"\") {\n\t\t\tsetFilteredNames([]);\n\t\t\tsetIsDropdownVisible(false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst filtered = vegeNames.filter((name) =>\n\t\t\tname.toLowerCase().includes(value.toLowerCase()),\n\t\t);\n\t\tsetFilteredNames(filtered);\n\t\tsetIsDropdownVisible(filtered.length > 0);\n\t};\n\n\tconst handleSelect = (name: string) => {\n\t\tsetSearchText(name);\n\t\tsetIsDropdownVisible(false);\n\t};\n\n\tconst handleResetFilters = () => {\n\t\tsetIsResetting(true);\n\t\tsetSearchText(\"\");\n\t\tsetIsInSeason(false);\n\t\tsetIsDiscounted(false);\n\t\tsetSearchParams(new URLSearchParams());\n\t\t// リセット完了を確実にするため少し遅延\n\t\tsetTimeout(() => {\n\t\t\tsetIsResetting(false);\n\t\t}, 100);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"野菜一覧\"\n\t\t\t\tdescription=\"旬の野菜を一覧でチェック。栄養や調理のヒントも満載！次のメニューの参考にどうぞ。\"\n\t\t\t/>\n\t\t\t<div className=\"container mx-auto px-2 mt-8 flex flex-col  md:flex-row space-x-4 space-y-2 md:space-y-0 md:items-center\">\n\t\t\t\t<div className=\"dropdown w-full sm:w-72\">\n\t\t\t\t\t<label className=\"input input-primary flex items-center w-full\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"grow\"\n\t\t\t\t\t\t\tname=\"vege-search\"\n\t\t\t\t\t\t\ttype=\"search\"\n\t\t\t\t\t\t\tplaceholder=\"野菜名を検索\"\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t{isDropdownVisible && (\n\t\t\t\t\t\t<ul className=\"dropdown-content menu bg-base-100 rounded-box z-[1] w-full sm:w-72 p-2 shadow-lg border border-base-300 mt-1 max-h-60 overflow-auto\">\n\t\t\t\t\t\t\t{filteredNames.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredNames.map((name) => (\n\t\t\t\t\t\t\t\t\t<li key={name}>\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleSelect(name)}\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(e) => e.preventDefault()}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:bg-base-200 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"px-4 py-2 text-base-content/60 text-center\">\n\t\t\t\t\t\t\t\t\t該当する野菜が見つかりません\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"season\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isInSeason}\n\t\t\t\t\t\tonChange={(e) => setIsInSeason(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"season\" className=\"label text-sm\">\n\t\t\t\t\t\t旬の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"discounted\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isDiscounted}\n\t\t\t\t\t\tonChange={(e) => setIsDiscounted(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"discounted\" className=\"label text-sm\">\n\t\t\t\t\t\t値下がり中の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-4 md:m-8 grid md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 gap-4\">\n\t\t\t\t{vegetables.length > 0 ? (\n\t\t\t\t\tvegetables.map((vegetable, index) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.1}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\tid={vegetable.attributes.id}\n\t\t\t\t\t\t\t\tname={vegetable.attributes.name}\n\t\t\t\t\t\t\t\tdescription={vegetable.attributes.description}\n\t\t\t\t\t\t\t\tprice={vegetable.attributes.latest_price.latest_price}\n\t\t\t\t\t\t\t\trate={vegetable.attributes.compare_last_month.compare_price}\n\t\t\t\t\t\t\t\timage={vegetable.attributes.image_url}\n\t\t\t\t\t\t\t\tseason={vegetable.attributes.seasons[0]?.in_season}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"col-span-full flex flex-col items-center justify-center py-16 px-4\">\n\t\t\t\t\t\t<div className=\"text-center max-w-md mx-auto\">\n\t\t\t\t\t\t\t<div className=\"mb-6\">\n\t\t\t\t\t\t\t\t<Leaf size={64} className=\"mx-auto text-base-content/30\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<h3 className=\"text-xl font-semibold text-base-content mb-3\">\n\t\t\t\t\t\t\t\t該当する野菜が見つかりませんでした\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<p className=\"text-base-content/60 mb-6 leading-relaxed\">\n\t\t\t\t\t\t\t\t検索条件を変更するか、フィルターをリセットして再度お試しください。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleResetFilters}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-primary gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<RotateCcw size={16} />\n\t\t\t\t\t\t\t\t\tフィルターをリセット\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => setSearchText(\"\")}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Search size={16} />\n\t\t\t\t\t\t\t\t\t検索条件をクリア\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{vegetables.length > 0 && total_pages > 0 && (\n\t\t\t\t<PaginationButtons\n\t\t\t\t\ttotalPages={total_pages}\n\t\t\t\t\tcurrentPage={current_page}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default VegeList;\n"}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/VegeList/VegeList.tsx"},"span":[1706,1715],"sourceCode":"import { Leaf, RotateCcw, Search } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useLoaderData, useSearchParams } from \"react-router\";\nimport Card from \"../../components/Card\";\nimport Meta from \"../../components/Meta\";\nimport PaginationButtons from \"../../components/PaginationButtons\";\nimport useVegeNames from \"../../hooks/useVegeNames\";\nimport type { VegetablesLoaderData } from \"../../types/vegetable\";\n\nconst VegeList = () => {\n\tconst loaderData = useLoaderData() as VegetablesLoaderData;\n\tconst { data: vegetables, meta } = loaderData;\n\tconst { total_pages, current_page } = meta;\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\tconst [searchText, setSearchText] = useState<string>(\n\t\tsearchParams.get(\"keyword\") || \"\",\n\t);\n\tconst [isInSeason, setIsInSeason] = useState<boolean>(\n\t\tsearchParams.get(\"season\") === \"true\",\n\t);\n\tconst [isDiscounted, setIsDiscounted] = useState<boolean>(\n\t\tsearchParams.get(\"discounted\") === \"true\",\n\t);\n\tconst { vegeNames } = useVegeNames();\n\tconst [filteredNames, setFilteredNames] = useState<string[]>([]);\n\tconst [isDropdownVisible, setIsDropdownVisible] = useState<boolean>(false);\n\tconst [isResetting, setIsResetting] = useState<boolean>(false);\n\n\t//野菜名の遅延検索（デバウンス、リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tconst timer = setTimeout(() => {\n\t\t\tsetSearchParams((prev) => {\n\t\t\t\tconst current = new URLSearchParams(prev);\n\t\t\t\tcurrent.set(\"keyword\", searchText);\n\t\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\t\treturn current;\n\t\t\t});\n\t\t}, 500);\n\t\treturn () => clearTimeout(timer);\n\t}, [searchText, isResetting]);\n\n\t//フィルター即座反映（リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tsetSearchParams((prev) => {\n\t\t\tconst current = new URLSearchParams(prev);\n\t\t\tcurrent.set(\"season\", isInSeason ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"discounted\", isDiscounted ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\treturn current;\n\t\t});\n\t}, [isInSeason, isDiscounted, isResetting]);\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst value = e.target.value;\n\t\tsetSearchText(value);\n\n\t\tif (value.trim() === \"\") {\n\t\t\tsetFilteredNames([]);\n\t\t\tsetIsDropdownVisible(false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst filtered = vegeNames.filter((name) =>\n\t\t\tname.toLowerCase().includes(value.toLowerCase()),\n\t\t);\n\t\tsetFilteredNames(filtered);\n\t\tsetIsDropdownVisible(filtered.length > 0);\n\t};\n\n\tconst handleSelect = (name: string) => {\n\t\tsetSearchText(name);\n\t\tsetIsDropdownVisible(false);\n\t};\n\n\tconst handleResetFilters = () => {\n\t\tsetIsResetting(true);\n\t\tsetSearchText(\"\");\n\t\tsetIsInSeason(false);\n\t\tsetIsDiscounted(false);\n\t\tsetSearchParams(new URLSearchParams());\n\t\t// リセット完了を確実にするため少し遅延\n\t\tsetTimeout(() => {\n\t\t\tsetIsResetting(false);\n\t\t}, 100);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"野菜一覧\"\n\t\t\t\tdescription=\"旬の野菜を一覧でチェック。栄養や調理のヒントも満載！次のメニューの参考にどうぞ。\"\n\t\t\t/>\n\t\t\t<div className=\"container mx-auto px-2 mt-8 flex flex-col  md:flex-row space-x-4 space-y-2 md:space-y-0 md:items-center\">\n\t\t\t\t<div className=\"dropdown w-full sm:w-72\">\n\t\t\t\t\t<label className=\"input input-primary flex items-center w-full\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"grow\"\n\t\t\t\t\t\t\tname=\"vege-search\"\n\t\t\t\t\t\t\ttype=\"search\"\n\t\t\t\t\t\t\tplaceholder=\"野菜名を検索\"\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t{isDropdownVisible && (\n\t\t\t\t\t\t<ul className=\"dropdown-content menu bg-base-100 rounded-box z-[1] w-full sm:w-72 p-2 shadow-lg border border-base-300 mt-1 max-h-60 overflow-auto\">\n\t\t\t\t\t\t\t{filteredNames.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredNames.map((name) => (\n\t\t\t\t\t\t\t\t\t<li key={name}>\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleSelect(name)}\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(e) => e.preventDefault()}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:bg-base-200 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"px-4 py-2 text-base-content/60 text-center\">\n\t\t\t\t\t\t\t\t\t該当する野菜が見つかりません\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"season\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isInSeason}\n\t\t\t\t\t\tonChange={(e) => setIsInSeason(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"season\" className=\"label text-sm\">\n\t\t\t\t\t\t旬の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"discounted\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isDiscounted}\n\t\t\t\t\t\tonChange={(e) => setIsDiscounted(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"discounted\" className=\"label text-sm\">\n\t\t\t\t\t\t値下がり中の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-4 md:m-8 grid md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 gap-4\">\n\t\t\t\t{vegetables.length > 0 ? (\n\t\t\t\t\tvegetables.map((vegetable, index) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.1}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\tid={vegetable.attributes.id}\n\t\t\t\t\t\t\t\tname={vegetable.attributes.name}\n\t\t\t\t\t\t\t\tdescription={vegetable.attributes.description}\n\t\t\t\t\t\t\t\tprice={vegetable.attributes.latest_price.latest_price}\n\t\t\t\t\t\t\t\trate={vegetable.attributes.compare_last_month.compare_price}\n\t\t\t\t\t\t\t\timage={vegetable.attributes.image_url}\n\t\t\t\t\t\t\t\tseason={vegetable.attributes.seasons[0]?.in_season}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"col-span-full flex flex-col items-center justify-center py-16 px-4\">\n\t\t\t\t\t\t<div className=\"text-center max-w-md mx-auto\">\n\t\t\t\t\t\t\t<div className=\"mb-6\">\n\t\t\t\t\t\t\t\t<Leaf size={64} className=\"mx-auto text-base-content/30\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<h3 className=\"text-xl font-semibold text-base-content mb-3\">\n\t\t\t\t\t\t\t\t該当する野菜が見つかりませんでした\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<p className=\"text-base-content/60 mb-6 leading-relaxed\">\n\t\t\t\t\t\t\t\t検索条件を変更するか、フィルターをリセットして再度お試しください。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleResetFilters}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-primary gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<RotateCcw size={16} />\n\t\t\t\t\t\t\t\t\tフィルターをリセット\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => setSearchText(\"\")}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Search size={16} />\n\t\t\t\t\t\t\t\t\t検索条件をクリア\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{vegetables.length > 0 && total_pages > 0 && (\n\t\t\t\t<PaginationButtons\n\t\t\t\t\ttotalPages={total_pages}\n\t\t\t\t\tcurrentPage={current_page}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default VegeList;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/VegeList/VegeList.tsx"},"span":[6403,6513],"sourceCode":"import { Leaf, RotateCcw, Search } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useLoaderData, useSearchParams } from \"react-router\";\nimport Card from \"../../components/Card\";\nimport Meta from \"../../components/Meta\";\nimport PaginationButtons from \"../../components/PaginationButtons\";\nimport useVegeNames from \"../../hooks/useVegeNames\";\nimport type { VegetablesLoaderData } from \"../../types/vegetable\";\n\nconst VegeList = () => {\n\tconst loaderData = useLoaderData() as VegetablesLoaderData;\n\tconst { data: vegetables, meta } = loaderData;\n\tconst { total_pages, current_page } = meta;\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\tconst [searchText, setSearchText] = useState<string>(\n\t\tsearchParams.get(\"keyword\") || \"\",\n\t);\n\tconst [isInSeason, setIsInSeason] = useState<boolean>(\n\t\tsearchParams.get(\"season\") === \"true\",\n\t);\n\tconst [isDiscounted, setIsDiscounted] = useState<boolean>(\n\t\tsearchParams.get(\"discounted\") === \"true\",\n\t);\n\tconst { vegeNames } = useVegeNames();\n\tconst [filteredNames, setFilteredNames] = useState<string[]>([]);\n\tconst [isDropdownVisible, setIsDropdownVisible] = useState<boolean>(false);\n\tconst [isResetting, setIsResetting] = useState<boolean>(false);\n\n\t//野菜名の遅延検索（デバウンス、リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tconst timer = setTimeout(() => {\n\t\t\tsetSearchParams((prev) => {\n\t\t\t\tconst current = new URLSearchParams(prev);\n\t\t\t\tcurrent.set(\"keyword\", searchText);\n\t\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\t\treturn current;\n\t\t\t});\n\t\t}, 500);\n\t\treturn () => clearTimeout(timer);\n\t}, [searchText, isResetting]);\n\n\t//フィルター即座反映（リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tsetSearchParams((prev) => {\n\t\t\tconst current = new URLSearchParams(prev);\n\t\t\tcurrent.set(\"season\", isInSeason ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"discounted\", isDiscounted ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\treturn current;\n\t\t});\n\t}, [isInSeason, isDiscounted, isResetting]);\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst value = e.target.value;\n\t\tsetSearchText(value);\n\n\t\tif (value.trim() === \"\") {\n\t\t\tsetFilteredNames([]);\n\t\t\tsetIsDropdownVisible(false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst filtered = vegeNames.filter((name) =>\n\t\t\tname.toLowerCase().includes(value.toLowerCase()),\n\t\t);\n\t\tsetFilteredNames(filtered);\n\t\tsetIsDropdownVisible(filtered.length > 0);\n\t};\n\n\tconst handleSelect = (name: string) => {\n\t\tsetSearchText(name);\n\t\tsetIsDropdownVisible(false);\n\t};\n\n\tconst handleResetFilters = () => {\n\t\tsetIsResetting(true);\n\t\tsetSearchText(\"\");\n\t\tsetIsInSeason(false);\n\t\tsetIsDiscounted(false);\n\t\tsetSearchParams(new URLSearchParams());\n\t\t// リセット完了を確実にするため少し遅延\n\t\tsetTimeout(() => {\n\t\t\tsetIsResetting(false);\n\t\t}, 100);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"野菜一覧\"\n\t\t\t\tdescription=\"旬の野菜を一覧でチェック。栄養や調理のヒントも満載！次のメニューの参考にどうぞ。\"\n\t\t\t/>\n\t\t\t<div className=\"container mx-auto px-2 mt-8 flex flex-col  md:flex-row space-x-4 space-y-2 md:space-y-0 md:items-center\">\n\t\t\t\t<div className=\"dropdown w-full sm:w-72\">\n\t\t\t\t\t<label className=\"input input-primary flex items-center w-full\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"grow\"\n\t\t\t\t\t\t\tname=\"vege-search\"\n\t\t\t\t\t\t\ttype=\"search\"\n\t\t\t\t\t\t\tplaceholder=\"野菜名を検索\"\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t{isDropdownVisible && (\n\t\t\t\t\t\t<ul className=\"dropdown-content menu bg-base-100 rounded-box z-[1] w-full sm:w-72 p-2 shadow-lg border border-base-300 mt-1 max-h-60 overflow-auto\">\n\t\t\t\t\t\t\t{filteredNames.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredNames.map((name) => (\n\t\t\t\t\t\t\t\t\t<li key={name}>\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleSelect(name)}\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(e) => e.preventDefault()}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:bg-base-200 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"px-4 py-2 text-base-content/60 text-center\">\n\t\t\t\t\t\t\t\t\t該当する野菜が見つかりません\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"season\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isInSeason}\n\t\t\t\t\t\tonChange={(e) => setIsInSeason(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"season\" className=\"label text-sm\">\n\t\t\t\t\t\t旬の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"discounted\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isDiscounted}\n\t\t\t\t\t\tonChange={(e) => setIsDiscounted(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"discounted\" className=\"label text-sm\">\n\t\t\t\t\t\t値下がり中の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-4 md:m-8 grid md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 gap-4\">\n\t\t\t\t{vegetables.length > 0 ? (\n\t\t\t\t\tvegetables.map((vegetable, index) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.1}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\tid={vegetable.attributes.id}\n\t\t\t\t\t\t\t\tname={vegetable.attributes.name}\n\t\t\t\t\t\t\t\tdescription={vegetable.attributes.description}\n\t\t\t\t\t\t\t\tprice={vegetable.attributes.latest_price.latest_price}\n\t\t\t\t\t\t\t\trate={vegetable.attributes.compare_last_month.compare_price}\n\t\t\t\t\t\t\t\timage={vegetable.attributes.image_url}\n\t\t\t\t\t\t\t\tseason={vegetable.attributes.seasons[0]?.in_season}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"col-span-full flex flex-col items-center justify-center py-16 px-4\">\n\t\t\t\t\t\t<div className=\"text-center max-w-md mx-auto\">\n\t\t\t\t\t\t\t<div className=\"mb-6\">\n\t\t\t\t\t\t\t\t<Leaf size={64} className=\"mx-auto text-base-content/30\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<h3 className=\"text-xl font-semibold text-base-content mb-3\">\n\t\t\t\t\t\t\t\t該当する野菜が見つかりませんでした\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<p className=\"text-base-content/60 mb-6 leading-relaxed\">\n\t\t\t\t\t\t\t\t検索条件を変更するか、フィルターをリセットして再度お試しください。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleResetFilters}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-primary gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<RotateCcw size={16} />\n\t\t\t\t\t\t\t\t\tフィルターをリセット\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => setSearchText(\"\")}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Search size={16} />\n\t\t\t\t\t\t\t\t\t検索条件をクリア\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{vegetables.length > 0 && total_pages > 0 && (\n\t\t\t\t<PaginationButtons\n\t\t\t\t\ttotalPages={total_pages}\n\t\t\t\t\tcurrentPage={current_page}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default VegeList;\n"},"tags":[],"source":null},{"category":"lint/a11y/useButtonType","severity":"error","description":"Provide an explicit type prop for the button element.","message":[{"elements":[],"content":"Provide an explicit "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" prop for the "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" element."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"The default "},{"elements":["Emphasis"],"content":"type"},{"elements":[],"content":" of a button is "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application."}]]},{"log":["info",[{"elements":[],"content":"Allowed button types are: "},{"elements":["Emphasis"],"content":"submit"},{"elements":[],"content":", "},{"elements":["Emphasis"],"content":"button"},{"elements":[],"content":" or "},{"elements":["Emphasis"],"content":"reset"},{"elements":[],"content":""}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/pages/VegeList/VegeList.tsx"},"span":[6613,6714],"sourceCode":"import { Leaf, RotateCcw, Search } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useLoaderData, useSearchParams } from \"react-router\";\nimport Card from \"../../components/Card\";\nimport Meta from \"../../components/Meta\";\nimport PaginationButtons from \"../../components/PaginationButtons\";\nimport useVegeNames from \"../../hooks/useVegeNames\";\nimport type { VegetablesLoaderData } from \"../../types/vegetable\";\n\nconst VegeList = () => {\n\tconst loaderData = useLoaderData() as VegetablesLoaderData;\n\tconst { data: vegetables, meta } = loaderData;\n\tconst { total_pages, current_page } = meta;\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\tconst [searchText, setSearchText] = useState<string>(\n\t\tsearchParams.get(\"keyword\") || \"\",\n\t);\n\tconst [isInSeason, setIsInSeason] = useState<boolean>(\n\t\tsearchParams.get(\"season\") === \"true\",\n\t);\n\tconst [isDiscounted, setIsDiscounted] = useState<boolean>(\n\t\tsearchParams.get(\"discounted\") === \"true\",\n\t);\n\tconst { vegeNames } = useVegeNames();\n\tconst [filteredNames, setFilteredNames] = useState<string[]>([]);\n\tconst [isDropdownVisible, setIsDropdownVisible] = useState<boolean>(false);\n\tconst [isResetting, setIsResetting] = useState<boolean>(false);\n\n\t//野菜名の遅延検索（デバウンス、リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tconst timer = setTimeout(() => {\n\t\t\tsetSearchParams((prev) => {\n\t\t\t\tconst current = new URLSearchParams(prev);\n\t\t\t\tcurrent.set(\"keyword\", searchText);\n\t\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\t\treturn current;\n\t\t\t});\n\t\t}, 500);\n\t\treturn () => clearTimeout(timer);\n\t}, [searchText, isResetting]);\n\n\t//フィルター即座反映（リセット時は除く）\n\tuseEffect(() => {\n\t\tif (isResetting) return;\n\n\t\tsetSearchParams((prev) => {\n\t\t\tconst current = new URLSearchParams(prev);\n\t\t\tcurrent.set(\"season\", isInSeason ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"discounted\", isDiscounted ? \"true\" : \"false\");\n\t\t\tcurrent.set(\"page\", \"1\");\n\t\t\treturn current;\n\t\t});\n\t}, [isInSeason, isDiscounted, isResetting]);\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst value = e.target.value;\n\t\tsetSearchText(value);\n\n\t\tif (value.trim() === \"\") {\n\t\t\tsetFilteredNames([]);\n\t\t\tsetIsDropdownVisible(false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst filtered = vegeNames.filter((name) =>\n\t\t\tname.toLowerCase().includes(value.toLowerCase()),\n\t\t);\n\t\tsetFilteredNames(filtered);\n\t\tsetIsDropdownVisible(filtered.length > 0);\n\t};\n\n\tconst handleSelect = (name: string) => {\n\t\tsetSearchText(name);\n\t\tsetIsDropdownVisible(false);\n\t};\n\n\tconst handleResetFilters = () => {\n\t\tsetIsResetting(true);\n\t\tsetSearchText(\"\");\n\t\tsetIsInSeason(false);\n\t\tsetIsDiscounted(false);\n\t\tsetSearchParams(new URLSearchParams());\n\t\t// リセット完了を確実にするため少し遅延\n\t\tsetTimeout(() => {\n\t\t\tsetIsResetting(false);\n\t\t}, 100);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Meta\n\t\t\t\ttitle=\"野菜一覧\"\n\t\t\t\tdescription=\"旬の野菜を一覧でチェック。栄養や調理のヒントも満載！次のメニューの参考にどうぞ。\"\n\t\t\t/>\n\t\t\t<div className=\"container mx-auto px-2 mt-8 flex flex-col  md:flex-row space-x-4 space-y-2 md:space-y-0 md:items-center\">\n\t\t\t\t<div className=\"dropdown w-full sm:w-72\">\n\t\t\t\t\t<label className=\"input input-primary flex items-center w-full\">\n\t\t\t\t\t\t<Search className=\"text-neutral-500\" size={15} />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"grow\"\n\t\t\t\t\t\t\tname=\"vege-search\"\n\t\t\t\t\t\t\ttype=\"search\"\n\t\t\t\t\t\t\tplaceholder=\"野菜名を検索\"\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t{isDropdownVisible && (\n\t\t\t\t\t\t<ul className=\"dropdown-content menu bg-base-100 rounded-box z-[1] w-full sm:w-72 p-2 shadow-lg border border-base-300 mt-1 max-h-60 overflow-auto\">\n\t\t\t\t\t\t\t{filteredNames.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredNames.map((name) => (\n\t\t\t\t\t\t\t\t\t<li key={name}>\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleSelect(name)}\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(e) => e.preventDefault()}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hover:bg-base-200 transition-colors duration-200\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"px-4 py-2 text-base-content/60 text-center\">\n\t\t\t\t\t\t\t\t\t該当する野菜が見つかりません\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"season\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isInSeason}\n\t\t\t\t\t\tonChange={(e) => setIsInSeason(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"season\" className=\"label text-sm\">\n\t\t\t\t\t\t旬の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"discounted\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tclassName=\"toggle\"\n\t\t\t\t\t\tchecked={isDiscounted}\n\t\t\t\t\t\tonChange={(e) => setIsDiscounted(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"discounted\" className=\"label text-sm\">\n\t\t\t\t\t\t値下がり中の野菜のみ表示\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"mt-4 md:m-8 grid md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 gap-4\">\n\t\t\t\t{vegetables.length > 0 ? (\n\t\t\t\t\tvegetables.map((vegetable, index) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={vegetable.id}\n\t\t\t\t\t\t\tclassName=\"animate-fade-up\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tanimationDelay: `${index * 0.1}s`,\n\t\t\t\t\t\t\t\tanimationFillMode: \"both\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\tid={vegetable.attributes.id}\n\t\t\t\t\t\t\t\tname={vegetable.attributes.name}\n\t\t\t\t\t\t\t\tdescription={vegetable.attributes.description}\n\t\t\t\t\t\t\t\tprice={vegetable.attributes.latest_price.latest_price}\n\t\t\t\t\t\t\t\trate={vegetable.attributes.compare_last_month.compare_price}\n\t\t\t\t\t\t\t\timage={vegetable.attributes.image_url}\n\t\t\t\t\t\t\t\tseason={vegetable.attributes.seasons[0]?.in_season}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"col-span-full flex flex-col items-center justify-center py-16 px-4\">\n\t\t\t\t\t\t<div className=\"text-center max-w-md mx-auto\">\n\t\t\t\t\t\t\t<div className=\"mb-6\">\n\t\t\t\t\t\t\t\t<Leaf size={64} className=\"mx-auto text-base-content/30\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<h3 className=\"text-xl font-semibold text-base-content mb-3\">\n\t\t\t\t\t\t\t\t該当する野菜が見つかりませんでした\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<p className=\"text-base-content/60 mb-6 leading-relaxed\">\n\t\t\t\t\t\t\t\t検索条件を変更するか、フィルターをリセットして再度お試しください。\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={handleResetFilters}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline btn-primary gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<RotateCcw size={16} />\n\t\t\t\t\t\t\t\t\tフィルターをリセット\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => setSearchText(\"\")}\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-ghost gap-2\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Search size={16} />\n\t\t\t\t\t\t\t\t\t検索条件をクリア\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{vegetables.length > 0 && total_pages > 0 && (\n\t\t\t\t<PaginationButtons\n\t\t\t\t\ttotalPages={total_pages}\n\t\t\t\t\tcurrentPage={current_page}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default VegeList;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"error","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"/home/node/app/src/test/components/AddItemFromRecipe.test.tsx"},"span":[516,519],"sourceCode":"import { render, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport AddLItemFromRecipe from \"../../components/AddItemFromRecipe\";\n\ndescribe(\"AddItemFromRecipe\", () => {\n\tconst defaultProps = {\n\t\tcloseModal: vi.fn(),\n\t\tshoppingLists: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: \"買い物リスト\",\n\t\t\t\tupdated: 10,\n\t\t\t\titems_count: 5,\n\t\t\t\tchecked_count: 3,\n\t\t\t\talready_added: false,\n\t\t\t},\n\t\t],\n\t\trecipeName: \"野菜炒め\",\n\t\thandleAddShoppingList: vi.fn(),\n\t};\n\n\tlet renderResult: any;\n\n\tbeforeEach(() => {\n\t\tvi.clearAllMocks();\n\t\trenderResult = render(<AddLItemFromRecipe {...defaultProps} />);\n\t});\n\n\tdescribe(\"正常系\", () => {\n\t\tit(\"必要なフィールドが全て表示されていること\", () => {\n\t\t\texpect(\n\t\t\t\tscreen.getByRole(\"button\", { name: \"新しいリストを作成\" }),\n\t\t\t).toBeInTheDocument();\n\t\t\texpect(\n\t\t\t\tscreen.getByRole(\"button\", { name: \"キャンセル\" }),\n\t\t\t).toBeInTheDocument();\n\t\t\texpect(\n\t\t\t\tscreen.getByRole(\"button\", { name: /買い物リスト/ }),\n\t\t\t).toBeInTheDocument();\n\t\t});\n\n\t\tit(\"新しい買い物リストを作成できること\", async () => {\n\t\t\tconst user = userEvent.setup();\n\t\t\tconst newButton = screen.getByRole(\"button\", {\n\t\t\t\tname: \"新しいリストを作成\",\n\t\t\t});\n\t\t\tawait user.click(newButton);\n\n\t\t\tconst inputElement = screen.getByPlaceholderText(\"買い物リスト名\");\n\t\t\tawait user.type(inputElement, \"本日買い物するリスト\");\n\t\t\tconst submitButton = screen.getByRole(\"button\", { name: \"作成して追加\" });\n\t\t\tawait user.click(submitButton);\n\t\t\texpect(defaultProps.handleAddShoppingList).toHaveBeenCalledWith({\n\t\t\t\tname: \"本日買い物するリスト\",\n\t\t\t});\n\t\t\tawait user.click(screen.getByRole(\"button\", { name: \"キャンセル\" }));\n\t\t});\n\t});\n});\n"},"tags":[],"source":null}],"command":"check"}
